//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

#pragma warning disable 1591 // this is for supress no xml comments in public members warnings 

using Domain.Core.Entities;

namespace Domain.MainModule.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(CotizacionSubLineaNegocio))]
    [KnownType(typeof(CotizacionSubLineaUbi))]
    [KnownType(typeof(LineaNegocio))]
    [KnownType(typeof(UsuarioSubLinea))]
    [KnownType(typeof(CotizacionDeducible))]
    [KnownType(typeof(Tarifa))]
    [System.CodeDom.Compiler.GeneratedCode("STE-EF",".NET 4.0")]
    #if !SILVERLIGHT
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
    #endif
    public partial class SubLineaNegocio: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int SubLineaNegocioID
        {
            get { return _subLineaNegocioID; }
            set
            {
                if (_subLineaNegocioID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'SubLineaNegocioID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _subLineaNegocioID = value;
                    OnPropertyChanged("SubLineaNegocioID");
                }
            }
        }
        private int _subLineaNegocioID;
    
        [DataMember]
        public Nullable<int> LineaNegocioID
        {
            get { return _lineaNegocioID; }
            set
            {
                if (_lineaNegocioID != value)
                {
                    ChangeTracker.RecordOriginalValue("LineaNegocioID", _lineaNegocioID);
                    if (!IsDeserializing)
                    {
                        if (bk_tc_LineaNegocio != null && bk_tc_LineaNegocio.LineaNegocioID != value)
                        {
                            bk_tc_LineaNegocio = null;
                        }
                    }
                    _lineaNegocioID = value;
                    OnPropertyChanged("LineaNegocioID");
                }
            }
        }
        private Nullable<int> _lineaNegocioID;
    
        [DataMember]
        public string nombre
        {
            get { return _nombre; }
            set
            {
                if (_nombre != value)
                {
                    _nombre = value;
                    OnPropertyChanged("nombre");
                }
            }
        }
        private string _nombre;
    
        [DataMember]
        public bool isPrimerRiesgo
        {
            get { return _isPrimerRiesgo; }
            set
            {
                if (_isPrimerRiesgo != value)
                {
                    _isPrimerRiesgo = value;
                    OnPropertyChanged("isPrimerRiesgo");
                }
            }
        }
        private bool _isPrimerRiesgo;
    
        [DataMember]
        public Nullable<bool> isInflacion
        {
            get { return _isInflacion; }
            set
            {
                if (_isInflacion != value)
                {
                    _isInflacion = value;
                    OnPropertyChanged("isInflacion");
                }
            }
        }
        private Nullable<bool> _isInflacion;
    
        [DataMember]
        public Nullable<int> ordenPresentacion
        {
            get { return _ordenPresentacion; }
            set
            {
                if (_ordenPresentacion != value)
                {
                    _ordenPresentacion = value;
                    OnPropertyChanged("ordenPresentacion");
                }
            }
        }
        private Nullable<int> _ordenPresentacion;
    
        [DataMember]
        public Nullable<bool> is_O
        {
            get { return _is_O; }
            set
            {
                if (_is_O != value)
                {
                    _is_O = value;
                    OnPropertyChanged("is_O");
                }
            }
        }
        private Nullable<bool> _is_O;
    
        [DataMember]
        public Nullable<int> ordenPantalla
        {
            get { return _ordenPantalla; }
            set
            {
                if (_ordenPantalla != value)
                {
                    _ordenPantalla = value;
                    OnPropertyChanged("ordenPantalla");
                }
            }
        }
        private Nullable<int> _ordenPantalla;
    
        [DataMember]
        public bool isLimit
        {
            get { return _isLimit; }
            set
            {
                if (_isLimit != value)
                {
                    _isLimit = value;
                    OnPropertyChanged("isLimit");
                }
            }
        }
        private bool _isLimit;
    
        [DataMember]
        public Nullable<int> SISEcod_ramo
        {
            get { return _sISEcod_ramo; }
            set
            {
                if (_sISEcod_ramo != value)
                {
                    _sISEcod_ramo = value;
                    OnPropertyChanged("SISEcod_ramo");
                }
            }
        }
        private Nullable<int> _sISEcod_ramo;
    
        [DataMember]
        public Nullable<int> SISEcod_ramoCOM
        {
            get { return _sISEcod_ramoCOM; }
            set
            {
                if (_sISEcod_ramoCOM != value)
                {
                    _sISEcod_ramoCOM = value;
                    OnPropertyChanged("SISEcod_ramoCOM");
                }
            }
        }
        private Nullable<int> _sISEcod_ramoCOM;
    
        [DataMember]
        public bool isActivo
        {
            get { return _isActivo; }
            set
            {
                if (_isActivo != value)
                {
                    _isActivo = value;
                    OnPropertyChanged("isActivo");
                }
            }
        }
        private bool _isActivo;
    
        [DataMember]
        public Nullable<double> limitReaseguro
        {
            get { return _limitReaseguro; }
            set
            {
                if (_limitReaseguro != value)
                {
                    _limitReaseguro = value;
                    OnPropertyChanged("limitReaseguro");
                }
            }
        }
        private Nullable<double> _limitReaseguro;
    
        [DataMember]
        public Nullable<int> cod_texto
        {
            get { return _cod_texto; }
            set
            {
                if (_cod_texto != value)
                {
                    _cod_texto = value;
                    OnPropertyChanged("cod_texto");
                }
            }
        }
        private Nullable<int> _cod_texto;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<CotizacionSubLineaNegocio> bk_tr_CotizacionSubLineaNegocio
        {
            get
            {
                if (_bk_tr_CotizacionSubLineaNegocio == null)
                {
                    _bk_tr_CotizacionSubLineaNegocio = new TrackableCollection<CotizacionSubLineaNegocio>();
                    _bk_tr_CotizacionSubLineaNegocio.CollectionChanged += Fixupbk_tr_CotizacionSubLineaNegocio;
                }
                return _bk_tr_CotizacionSubLineaNegocio;
            }
            set
            {
                if (!ReferenceEquals(_bk_tr_CotizacionSubLineaNegocio, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_bk_tr_CotizacionSubLineaNegocio != null)
                    {
                        _bk_tr_CotizacionSubLineaNegocio.CollectionChanged -= Fixupbk_tr_CotizacionSubLineaNegocio;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (CotizacionSubLineaNegocio item in _bk_tr_CotizacionSubLineaNegocio)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _bk_tr_CotizacionSubLineaNegocio = value;
                    if (_bk_tr_CotizacionSubLineaNegocio != null)
                    {
                        _bk_tr_CotizacionSubLineaNegocio.CollectionChanged += Fixupbk_tr_CotizacionSubLineaNegocio;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (CotizacionSubLineaNegocio item in _bk_tr_CotizacionSubLineaNegocio)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("bk_tr_CotizacionSubLineaNegocio");
                }
            }
        }
        private TrackableCollection<CotizacionSubLineaNegocio> _bk_tr_CotizacionSubLineaNegocio;
    
        [DataMember]
        public TrackableCollection<CotizacionSubLineaUbi> bk_tr_CotizacionSubLineaUbi
        {
            get
            {
                if (_bk_tr_CotizacionSubLineaUbi == null)
                {
                    _bk_tr_CotizacionSubLineaUbi = new TrackableCollection<CotizacionSubLineaUbi>();
                    _bk_tr_CotizacionSubLineaUbi.CollectionChanged += Fixupbk_tr_CotizacionSubLineaUbi;
                }
                return _bk_tr_CotizacionSubLineaUbi;
            }
            set
            {
                if (!ReferenceEquals(_bk_tr_CotizacionSubLineaUbi, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_bk_tr_CotizacionSubLineaUbi != null)
                    {
                        _bk_tr_CotizacionSubLineaUbi.CollectionChanged -= Fixupbk_tr_CotizacionSubLineaUbi;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (CotizacionSubLineaUbi item in _bk_tr_CotizacionSubLineaUbi)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _bk_tr_CotizacionSubLineaUbi = value;
                    if (_bk_tr_CotizacionSubLineaUbi != null)
                    {
                        _bk_tr_CotizacionSubLineaUbi.CollectionChanged += Fixupbk_tr_CotizacionSubLineaUbi;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (CotizacionSubLineaUbi item in _bk_tr_CotizacionSubLineaUbi)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("bk_tr_CotizacionSubLineaUbi");
                }
            }
        }
        private TrackableCollection<CotizacionSubLineaUbi> _bk_tr_CotizacionSubLineaUbi;
    
        [DataMember]
        public LineaNegocio bk_tc_LineaNegocio
        {
            get { return _bk_tc_LineaNegocio; }
            set
            {
                if (!ReferenceEquals(_bk_tc_LineaNegocio, value))
                {
                    var previousValue = _bk_tc_LineaNegocio;
                    _bk_tc_LineaNegocio = value;
                    Fixupbk_tc_LineaNegocio(previousValue);
                    OnNavigationPropertyChanged("bk_tc_LineaNegocio");
                }
            }
        }
        private LineaNegocio _bk_tc_LineaNegocio;
    
        [DataMember]
        public TrackableCollection<UsuarioSubLinea> bk_tr_UsuarioSubLinea
        {
            get
            {
                if (_bk_tr_UsuarioSubLinea == null)
                {
                    _bk_tr_UsuarioSubLinea = new TrackableCollection<UsuarioSubLinea>();
                    _bk_tr_UsuarioSubLinea.CollectionChanged += Fixupbk_tr_UsuarioSubLinea;
                }
                return _bk_tr_UsuarioSubLinea;
            }
            set
            {
                if (!ReferenceEquals(_bk_tr_UsuarioSubLinea, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_bk_tr_UsuarioSubLinea != null)
                    {
                        _bk_tr_UsuarioSubLinea.CollectionChanged -= Fixupbk_tr_UsuarioSubLinea;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (UsuarioSubLinea item in _bk_tr_UsuarioSubLinea)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _bk_tr_UsuarioSubLinea = value;
                    if (_bk_tr_UsuarioSubLinea != null)
                    {
                        _bk_tr_UsuarioSubLinea.CollectionChanged += Fixupbk_tr_UsuarioSubLinea;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (UsuarioSubLinea item in _bk_tr_UsuarioSubLinea)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("bk_tr_UsuarioSubLinea");
                }
            }
        }
        private TrackableCollection<UsuarioSubLinea> _bk_tr_UsuarioSubLinea;
    
        [DataMember]
        public TrackableCollection<CotizacionDeducible> bk_te_CotizacionDeducible
        {
            get
            {
                if (_bk_te_CotizacionDeducible == null)
                {
                    _bk_te_CotizacionDeducible = new TrackableCollection<CotizacionDeducible>();
                    _bk_te_CotizacionDeducible.CollectionChanged += Fixupbk_te_CotizacionDeducible;
                }
                return _bk_te_CotizacionDeducible;
            }
            set
            {
                if (!ReferenceEquals(_bk_te_CotizacionDeducible, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_bk_te_CotizacionDeducible != null)
                    {
                        _bk_te_CotizacionDeducible.CollectionChanged -= Fixupbk_te_CotizacionDeducible;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (CotizacionDeducible item in _bk_te_CotizacionDeducible)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _bk_te_CotizacionDeducible = value;
                    if (_bk_te_CotizacionDeducible != null)
                    {
                        _bk_te_CotizacionDeducible.CollectionChanged += Fixupbk_te_CotizacionDeducible;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (CotizacionDeducible item in _bk_te_CotizacionDeducible)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("bk_te_CotizacionDeducible");
                }
            }
        }
        private TrackableCollection<CotizacionDeducible> _bk_te_CotizacionDeducible;
    
        [DataMember]
        public TrackableCollection<Tarifa> bk_tc_Tarifa
        {
            get
            {
                if (_bk_tc_Tarifa == null)
                {
                    _bk_tc_Tarifa = new TrackableCollection<Tarifa>();
                    _bk_tc_Tarifa.CollectionChanged += Fixupbk_tc_Tarifa;
                }
                return _bk_tc_Tarifa;
            }
            set
            {
                if (!ReferenceEquals(_bk_tc_Tarifa, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_bk_tc_Tarifa != null)
                    {
                        _bk_tc_Tarifa.CollectionChanged -= Fixupbk_tc_Tarifa;
                    }
                    _bk_tc_Tarifa = value;
                    if (_bk_tc_Tarifa != null)
                    {
                        _bk_tc_Tarifa.CollectionChanged += Fixupbk_tc_Tarifa;
                    }
                    OnNavigationPropertyChanged("bk_tc_Tarifa");
                }
            }
        }
        private TrackableCollection<Tarifa> _bk_tc_Tarifa;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            bk_tr_CotizacionSubLineaNegocio.Clear();
            bk_tr_CotizacionSubLineaUbi.Clear();
            bk_tc_LineaNegocio = null;
            bk_tr_UsuarioSubLinea.Clear();
            bk_te_CotizacionDeducible.Clear();
            bk_tc_Tarifa.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void Fixupbk_tc_LineaNegocio(LineaNegocio previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.bk_tc_SubLineaNegocio.Contains(this))
            {
                previousValue.bk_tc_SubLineaNegocio.Remove(this);
            }
    
            if (bk_tc_LineaNegocio != null)
            {
                if (!bk_tc_LineaNegocio.bk_tc_SubLineaNegocio.Contains(this))
                {
                    bk_tc_LineaNegocio.bk_tc_SubLineaNegocio.Add(this);
                }
    
                LineaNegocioID = bk_tc_LineaNegocio.LineaNegocioID;
            }
            else if (!skipKeys)
            {
                LineaNegocioID = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("bk_tc_LineaNegocio")
                    && (ChangeTracker.OriginalValues["bk_tc_LineaNegocio"] == bk_tc_LineaNegocio))
                {
                    ChangeTracker.OriginalValues.Remove("bk_tc_LineaNegocio");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("bk_tc_LineaNegocio", previousValue);
                }
                if (bk_tc_LineaNegocio != null && !bk_tc_LineaNegocio.ChangeTracker.ChangeTrackingEnabled)
                {
                    bk_tc_LineaNegocio.StartTracking();
                }
            }
        }
    
        private void Fixupbk_tr_CotizacionSubLineaNegocio(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CotizacionSubLineaNegocio item in e.NewItems)
                {
                    item.bk_tc_SubLineaNegocio = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("bk_tr_CotizacionSubLineaNegocio", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CotizacionSubLineaNegocio item in e.OldItems)
                {
                    if (ReferenceEquals(item.bk_tc_SubLineaNegocio, this))
                    {
                        item.bk_tc_SubLineaNegocio = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("bk_tr_CotizacionSubLineaNegocio", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void Fixupbk_tr_CotizacionSubLineaUbi(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CotizacionSubLineaUbi item in e.NewItems)
                {
                    item.bk_tc_SubLineaNegocio = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("bk_tr_CotizacionSubLineaUbi", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CotizacionSubLineaUbi item in e.OldItems)
                {
                    if (ReferenceEquals(item.bk_tc_SubLineaNegocio, this))
                    {
                        item.bk_tc_SubLineaNegocio = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("bk_tr_CotizacionSubLineaUbi", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void Fixupbk_tr_UsuarioSubLinea(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (UsuarioSubLinea item in e.NewItems)
                {
                    item.bk_tc_SubLineaNegocio = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("bk_tr_UsuarioSubLinea", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (UsuarioSubLinea item in e.OldItems)
                {
                    if (ReferenceEquals(item.bk_tc_SubLineaNegocio, this))
                    {
                        item.bk_tc_SubLineaNegocio = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("bk_tr_UsuarioSubLinea", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void Fixupbk_te_CotizacionDeducible(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CotizacionDeducible item in e.NewItems)
                {
                    item.bk_tc_SubLineaNegocio = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("bk_te_CotizacionDeducible", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CotizacionDeducible item in e.OldItems)
                {
                    if (ReferenceEquals(item.bk_tc_SubLineaNegocio, this))
                    {
                        item.bk_tc_SubLineaNegocio = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("bk_te_CotizacionDeducible", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void Fixupbk_tc_Tarifa(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Tarifa item in e.NewItems)
                {
                    item.bk_tc_SubLineaNegocio = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("bk_tc_Tarifa", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Tarifa item in e.OldItems)
                {
                    if (ReferenceEquals(item.bk_tc_SubLineaNegocio, this))
                    {
                        item.bk_tc_SubLineaNegocio = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("bk_tc_Tarifa", item);
                    }
                }
            }
        }

        #endregion

    }
}
