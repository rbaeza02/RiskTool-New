//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

#pragma warning disable 1591 // this is for supress no xml comments in public members warnings 

using Domain.Core.Entities;

namespace Domain.MainModule.Entities
{
    [System.CodeDom.Compiler.GeneratedCode("STE-EF",".NET 4.0")]
    #if !SILVERLIGHT
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
    #endif
    public partial class SelectRiskReportASAreaInc_Result : INotifyComplexPropertyChanging, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int nroUbicacion
        {
            get { return _nroUbicacion; }
            set
            {
                if (_nroUbicacion != value)
                {
                    OnComplexPropertyChanging();
                    _nroUbicacion = value;
                    OnPropertyChanged("nroUbicacion");
                }
            }
        }
        private int _nroUbicacion;
    
        [DataMember]
        public string SIC
        {
            get { return _sIC; }
            set
            {
                if (_sIC != value)
                {
                    OnComplexPropertyChanging();
                    _sIC = value;
                    OnPropertyChanged("SIC");
                }
            }
        }
        private string _sIC;
    
        [DataMember]
        public string RiskClass
        {
            get { return _riskClass; }
            set
            {
                if (_riskClass != value)
                {
                    OnComplexPropertyChanging();
                    _riskClass = value;
                    OnPropertyChanged("RiskClass");
                }
            }
        }
        private string _riskClass;
    
        [DataMember]
        public string iso
        {
            get { return _iso; }
            set
            {
                if (_iso != value)
                {
                    OnComplexPropertyChanging();
                    _iso = value;
                    OnPropertyChanged("iso");
                }
            }
        }
        private string _iso;
    
        [DataMember]
        public string tipoCons
        {
            get { return _tipoCons; }
            set
            {
                if (_tipoCons != value)
                {
                    OnComplexPropertyChanging();
                    _tipoCons = value;
                    OnPropertyChanged("tipoCons");
                }
            }
        }
        private string _tipoCons;
    
        [DataMember]
        public Nullable<double> pct
        {
            get { return _pct; }
            set
            {
                if (_pct != value)
                {
                    OnComplexPropertyChanging();
                    _pct = value;
                    OnPropertyChanged("pct");
                }
            }
        }
        private Nullable<double> _pct;
    
        [DataMember]
        public Nullable<double> Edificio
        {
            get { return _edificio; }
            set
            {
                if (_edificio != value)
                {
                    OnComplexPropertyChanging();
                    _edificio = value;
                    OnPropertyChanged("Edificio");
                }
            }
        }
        private Nullable<double> _edificio;
    
        [DataMember]
        public Nullable<double> Contenido
        {
            get { return _contenido; }
            set
            {
                if (_contenido != value)
                {
                    OnComplexPropertyChanging();
                    _contenido = value;
                    OnPropertyChanged("Contenido");
                }
            }
        }
        private Nullable<double> _contenido;
    
        [DataMember]
        public Nullable<double> Perdidas
        {
            get { return _perdidas; }
            set
            {
                if (_perdidas != value)
                {
                    OnComplexPropertyChanging();
                    _perdidas = value;
                    OnPropertyChanged("Perdidas");
                }
            }
        }
        private Nullable<double> _perdidas;
    
        [DataMember]
        public Nullable<long> orden
        {
            get { return _orden; }
            set
            {
                if (_orden != value)
                {
                    OnComplexPropertyChanging();
                    _orden = value;
                    OnPropertyChanged("orden");
                }
            }
        }
        private Nullable<long> _orden;

        #endregion

        #region ChangeTracking
    
        private void OnComplexPropertyChanging()
        {
            if (_complexPropertyChanging != null)
            {
                _complexPropertyChanging(this, new EventArgs());
            }
        }
    
        event EventHandler INotifyComplexPropertyChanging.ComplexPropertyChanging { add { _complexPropertyChanging += value; } remove { _complexPropertyChanging -= value; } }
        private event EventHandler _complexPropertyChanging;
    
        private void OnPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged { add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
    
        public static void RecordComplexOriginalValues(String parentPropertyName, SelectRiskReportASAreaInc_Result complexObject, ObjectChangeTracker changeTracker)
        {
            if (String.IsNullOrEmpty(parentPropertyName))
            {
                throw new ArgumentException("String parameter cannot be null or empty.", "parentPropertyName");
            }
    
            if (changeTracker == null)
            {
                throw new ArgumentNullException("changeTracker");
            }
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.nroUbicacion", parentPropertyName), complexObject == null ? null : (object)complexObject.nroUbicacion);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.SIC", parentPropertyName), complexObject == null ? null : (object)complexObject.SIC);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.RiskClass", parentPropertyName), complexObject == null ? null : (object)complexObject.RiskClass);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.iso", parentPropertyName), complexObject == null ? null : (object)complexObject.iso);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.tipoCons", parentPropertyName), complexObject == null ? null : (object)complexObject.tipoCons);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.pct", parentPropertyName), complexObject == null ? null : (object)complexObject.pct);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.Edificio", parentPropertyName), complexObject == null ? null : (object)complexObject.Edificio);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.Contenido", parentPropertyName), complexObject == null ? null : (object)complexObject.Contenido);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.Perdidas", parentPropertyName), complexObject == null ? null : (object)complexObject.Perdidas);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.orden", parentPropertyName), complexObject == null ? null : (object)complexObject.orden);
        }

        #endregion

    }
}
