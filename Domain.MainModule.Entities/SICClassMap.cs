//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

#pragma warning disable 1591 // this is for supress no xml comments in public members warnings 

using Domain.Core.Entities;

namespace Domain.MainModule.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(SIC))]
    [KnownType(typeof(CotizacionRCProductoExtResultado))]
    [System.CodeDom.Compiler.GeneratedCode("STE-EF",".NET 4.0")]
    #if !SILVERLIGHT
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
    #endif
    public partial class SICClassMap: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int SICClassMapID
        {
            get { return _sICClassMapID; }
            set
            {
                if (_sICClassMapID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'SICClassMapID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _sICClassMapID = value;
                    OnPropertyChanged("SICClassMapID");
                }
            }
        }
        private int _sICClassMapID;
    
        [DataMember]
        public Nullable<int> SICid
        {
            get { return _sICid; }
            set
            {
                if (_sICid != value)
                {
                    ChangeTracker.RecordOriginalValue("SICid", _sICid);
                    if (!IsDeserializing)
                    {
                        if (bk_tc_SIC != null && bk_tc_SIC.SICid != value)
                        {
                            bk_tc_SIC = null;
                        }
                    }
                    _sICid = value;
                    OnPropertyChanged("SICid");
                }
            }
        }
        private Nullable<int> _sICid;
    
        [DataMember]
        public string Codigo
        {
            get { return _codigo; }
            set
            {
                if (_codigo != value)
                {
                    _codigo = value;
                    OnPropertyChanged("Codigo");
                }
            }
        }
        private string _codigo;
    
        [DataMember]
        public string nombreING
        {
            get { return _nombreING; }
            set
            {
                if (_nombreING != value)
                {
                    _nombreING = value;
                    OnPropertyChanged("nombreING");
                }
            }
        }
        private string _nombreING;
    
        [DataMember]
        public Nullable<int> SICClassMapBaseID
        {
            get { return _sICClassMapBaseID; }
            set
            {
                if (_sICClassMapBaseID != value)
                {
                    _sICClassMapBaseID = value;
                    OnPropertyChanged("SICClassMapBaseID");
                }
            }
        }
        private Nullable<int> _sICClassMapBaseID;
    
        [DataMember]
        public Nullable<double> P_O_Rate
        {
            get { return _p_O_Rate; }
            set
            {
                if (_p_O_Rate != value)
                {
                    _p_O_Rate = value;
                    OnPropertyChanged("P_O_Rate");
                }
            }
        }
        private Nullable<double> _p_O_Rate;
    
        [DataMember]
        public Nullable<double> PCO_Rate
        {
            get { return _pCO_Rate; }
            set
            {
                if (_pCO_Rate != value)
                {
                    _pCO_Rate = value;
                    OnPropertyChanged("PCO_Rate");
                }
            }
        }
        private Nullable<double> _pCO_Rate;
    
        [DataMember]
        public Nullable<int> RCProdPremOpsILFInfoID
        {
            get { return _rCProdPremOpsILFInfoID; }
            set
            {
                if (_rCProdPremOpsILFInfoID != value)
                {
                    _rCProdPremOpsILFInfoID = value;
                    OnPropertyChanged("RCProdPremOpsILFInfoID");
                }
            }
        }
        private Nullable<int> _rCProdPremOpsILFInfoID;
    
        [DataMember]
        public Nullable<int> RCProdProductsILFInfoID
        {
            get { return _rCProdProductsILFInfoID; }
            set
            {
                if (_rCProdProductsILFInfoID != value)
                {
                    _rCProdProductsILFInfoID = value;
                    OnPropertyChanged("RCProdProductsILFInfoID");
                }
            }
        }
        private Nullable<int> _rCProdProductsILFInfoID;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public SIC bk_tc_SIC
        {
            get { return _bk_tc_SIC; }
            set
            {
                if (!ReferenceEquals(_bk_tc_SIC, value))
                {
                    var previousValue = _bk_tc_SIC;
                    _bk_tc_SIC = value;
                    Fixupbk_tc_SIC(previousValue);
                    OnNavigationPropertyChanged("bk_tc_SIC");
                }
            }
        }
        private SIC _bk_tc_SIC;
    
        [DataMember]
        public TrackableCollection<CotizacionRCProductoExtResultado> bk_te_CotizacionRCProductoExtResultado
        {
            get
            {
                if (_bk_te_CotizacionRCProductoExtResultado == null)
                {
                    _bk_te_CotizacionRCProductoExtResultado = new TrackableCollection<CotizacionRCProductoExtResultado>();
                    _bk_te_CotizacionRCProductoExtResultado.CollectionChanged += Fixupbk_te_CotizacionRCProductoExtResultado;
                }
                return _bk_te_CotizacionRCProductoExtResultado;
            }
            set
            {
                if (!ReferenceEquals(_bk_te_CotizacionRCProductoExtResultado, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_bk_te_CotizacionRCProductoExtResultado != null)
                    {
                        _bk_te_CotizacionRCProductoExtResultado.CollectionChanged -= Fixupbk_te_CotizacionRCProductoExtResultado;
                    }
                    _bk_te_CotizacionRCProductoExtResultado = value;
                    if (_bk_te_CotizacionRCProductoExtResultado != null)
                    {
                        _bk_te_CotizacionRCProductoExtResultado.CollectionChanged += Fixupbk_te_CotizacionRCProductoExtResultado;
                    }
                    OnNavigationPropertyChanged("bk_te_CotizacionRCProductoExtResultado");
                }
            }
        }
        private TrackableCollection<CotizacionRCProductoExtResultado> _bk_te_CotizacionRCProductoExtResultado;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            bk_tc_SIC = null;
            bk_te_CotizacionRCProductoExtResultado.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void Fixupbk_tc_SIC(SIC previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.bk_tc_SICClassMap.Contains(this))
            {
                previousValue.bk_tc_SICClassMap.Remove(this);
            }
    
            if (bk_tc_SIC != null)
            {
                if (!bk_tc_SIC.bk_tc_SICClassMap.Contains(this))
                {
                    bk_tc_SIC.bk_tc_SICClassMap.Add(this);
                }
    
                SICid = bk_tc_SIC.SICid;
            }
            else if (!skipKeys)
            {
                SICid = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("bk_tc_SIC")
                    && (ChangeTracker.OriginalValues["bk_tc_SIC"] == bk_tc_SIC))
                {
                    ChangeTracker.OriginalValues.Remove("bk_tc_SIC");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("bk_tc_SIC", previousValue);
                }
                if (bk_tc_SIC != null && !bk_tc_SIC.ChangeTracker.ChangeTrackingEnabled)
                {
                    bk_tc_SIC.StartTracking();
                }
            }
        }
    
        private void Fixupbk_te_CotizacionRCProductoExtResultado(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CotizacionRCProductoExtResultado item in e.NewItems)
                {
                    item.bk_tc_SICClassMap = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("bk_te_CotizacionRCProductoExtResultado", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CotizacionRCProductoExtResultado item in e.OldItems)
                {
                    if (ReferenceEquals(item.bk_tc_SICClassMap, this))
                    {
                        item.bk_tc_SICClassMap = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("bk_te_CotizacionRCProductoExtResultado", item);
                    }
                }
            }
        }

        #endregion

    }
}
