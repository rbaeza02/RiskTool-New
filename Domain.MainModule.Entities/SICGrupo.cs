//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

#pragma warning disable 1591 // this is for supress no xml comments in public members warnings 

using Domain.Core.Entities;

namespace Domain.MainModule.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(SIC))]
    [KnownType(typeof(SICDivision))]
    [System.CodeDom.Compiler.GeneratedCode("STE-EF",".NET 4.0")]
    #if !SILVERLIGHT
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
    #endif
    public partial class SICGrupo: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int SICGrupoID
        {
            get { return _sICGrupoID; }
            set
            {
                if (_sICGrupoID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'SICGrupoID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _sICGrupoID = value;
                    OnPropertyChanged("SICGrupoID");
                }
            }
        }
        private int _sICGrupoID;
    
        [DataMember]
        public Nullable<int> SICDivisionID
        {
            get { return _sICDivisionID; }
            set
            {
                if (_sICDivisionID != value)
                {
                    ChangeTracker.RecordOriginalValue("SICDivisionID", _sICDivisionID);
                    if (!IsDeserializing)
                    {
                        if (bk_tc_SICDivision != null && bk_tc_SICDivision.SICDivisionID != value)
                        {
                            bk_tc_SICDivision = null;
                        }
                    }
                    _sICDivisionID = value;
                    OnPropertyChanged("SICDivisionID");
                }
            }
        }
        private Nullable<int> _sICDivisionID;
    
        [DataMember]
        public string nombre
        {
            get { return _nombre; }
            set
            {
                if (_nombre != value)
                {
                    _nombre = value;
                    OnPropertyChanged("nombre");
                }
            }
        }
        private string _nombre;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<SIC> bk_tc_SIC
        {
            get
            {
                if (_bk_tc_SIC == null)
                {
                    _bk_tc_SIC = new TrackableCollection<SIC>();
                    _bk_tc_SIC.CollectionChanged += Fixupbk_tc_SIC;
                }
                return _bk_tc_SIC;
            }
            set
            {
                if (!ReferenceEquals(_bk_tc_SIC, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_bk_tc_SIC != null)
                    {
                        _bk_tc_SIC.CollectionChanged -= Fixupbk_tc_SIC;
                    }
                    _bk_tc_SIC = value;
                    if (_bk_tc_SIC != null)
                    {
                        _bk_tc_SIC.CollectionChanged += Fixupbk_tc_SIC;
                    }
                    OnNavigationPropertyChanged("bk_tc_SIC");
                }
            }
        }
        private TrackableCollection<SIC> _bk_tc_SIC;
    
        [DataMember]
        public SICDivision bk_tc_SICDivision
        {
            get { return _bk_tc_SICDivision; }
            set
            {
                if (!ReferenceEquals(_bk_tc_SICDivision, value))
                {
                    var previousValue = _bk_tc_SICDivision;
                    _bk_tc_SICDivision = value;
                    Fixupbk_tc_SICDivision(previousValue);
                    OnNavigationPropertyChanged("bk_tc_SICDivision");
                }
            }
        }
        private SICDivision _bk_tc_SICDivision;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            bk_tc_SIC.Clear();
            bk_tc_SICDivision = null;
        }

        #endregion

        #region Association Fixup
    
        private void Fixupbk_tc_SICDivision(SICDivision previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.bk_tc_SICGrupo.Contains(this))
            {
                previousValue.bk_tc_SICGrupo.Remove(this);
            }
    
            if (bk_tc_SICDivision != null)
            {
                if (!bk_tc_SICDivision.bk_tc_SICGrupo.Contains(this))
                {
                    bk_tc_SICDivision.bk_tc_SICGrupo.Add(this);
                }
    
                SICDivisionID = bk_tc_SICDivision.SICDivisionID;
            }
            else if (!skipKeys)
            {
                SICDivisionID = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("bk_tc_SICDivision")
                    && (ChangeTracker.OriginalValues["bk_tc_SICDivision"] == bk_tc_SICDivision))
                {
                    ChangeTracker.OriginalValues.Remove("bk_tc_SICDivision");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("bk_tc_SICDivision", previousValue);
                }
                if (bk_tc_SICDivision != null && !bk_tc_SICDivision.ChangeTracker.ChangeTrackingEnabled)
                {
                    bk_tc_SICDivision.StartTracking();
                }
            }
        }
    
        private void Fixupbk_tc_SIC(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (SIC item in e.NewItems)
                {
                    item.bk_tc_SICGrupo = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("bk_tc_SIC", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SIC item in e.OldItems)
                {
                    if (ReferenceEquals(item.bk_tc_SICGrupo, this))
                    {
                        item.bk_tc_SICGrupo = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("bk_tc_SIC", item);
                    }
                }
            }
        }

        #endregion

    }
}
