//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

#pragma warning disable 1591 // this is for supress no xml comments in public members warnings 

using Domain.Core.Entities;

namespace Domain.MainModule.Entities
{
    [System.CodeDom.Compiler.GeneratedCode("STE-EF",".NET 4.0")]
    #if !SILVERLIGHT
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
    #endif
    public partial class SISEClausula_Result : INotifyComplexPropertyChanging, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public Nullable<int> id_pv
        {
            get { return _id_pv; }
            set
            {
                if (_id_pv != value)
                {
                    OnComplexPropertyChanging();
                    _id_pv = value;
                    OnPropertyChanged("id_pv");
                }
            }
        }
        private Nullable<int> _id_pv;
    
        [DataMember]
        public Nullable<int> cod_suc
        {
            get { return _cod_suc; }
            set
            {
                if (_cod_suc != value)
                {
                    OnComplexPropertyChanging();
                    _cod_suc = value;
                    OnPropertyChanged("cod_suc");
                }
            }
        }
        private Nullable<int> _cod_suc;
    
        [DataMember]
        public int cod_item
        {
            get { return _cod_item; }
            set
            {
                if (_cod_item != value)
                {
                    OnComplexPropertyChanging();
                    _cod_item = value;
                    OnPropertyChanged("cod_item");
                }
            }
        }
        private int _cod_item;
    
        [DataMember]
        public int cod_ind_cob
        {
            get { return _cod_ind_cob; }
            set
            {
                if (_cod_ind_cob != value)
                {
                    OnComplexPropertyChanging();
                    _cod_ind_cob = value;
                    OnPropertyChanged("cod_ind_cob");
                }
            }
        }
        private int _cod_ind_cob;
    
        [DataMember]
        public int cod_tipo_anexo
        {
            get { return _cod_tipo_anexo; }
            set
            {
                if (_cod_tipo_anexo != value)
                {
                    OnComplexPropertyChanging();
                    _cod_tipo_anexo = value;
                    OnPropertyChanged("cod_tipo_anexo");
                }
            }
        }
        private int _cod_tipo_anexo;
    
        [DataMember]
        public Nullable<int> cod_anexo
        {
            get { return _cod_anexo; }
            set
            {
                if (_cod_anexo != value)
                {
                    OnComplexPropertyChanging();
                    _cod_anexo = value;
                    OnPropertyChanged("cod_anexo");
                }
            }
        }
        private Nullable<int> _cod_anexo;

        #endregion

        #region ChangeTracking
    
        private void OnComplexPropertyChanging()
        {
            if (_complexPropertyChanging != null)
            {
                _complexPropertyChanging(this, new EventArgs());
            }
        }
    
        event EventHandler INotifyComplexPropertyChanging.ComplexPropertyChanging { add { _complexPropertyChanging += value; } remove { _complexPropertyChanging -= value; } }
        private event EventHandler _complexPropertyChanging;
    
        private void OnPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged { add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
    
        public static void RecordComplexOriginalValues(String parentPropertyName, SISEClausula_Result complexObject, ObjectChangeTracker changeTracker)
        {
            if (String.IsNullOrEmpty(parentPropertyName))
            {
                throw new ArgumentException("String parameter cannot be null or empty.", "parentPropertyName");
            }
    
            if (changeTracker == null)
            {
                throw new ArgumentNullException("changeTracker");
            }
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.id_pv", parentPropertyName), complexObject == null ? null : (object)complexObject.id_pv);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.cod_suc", parentPropertyName), complexObject == null ? null : (object)complexObject.cod_suc);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.cod_item", parentPropertyName), complexObject == null ? null : (object)complexObject.cod_item);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.cod_ind_cob", parentPropertyName), complexObject == null ? null : (object)complexObject.cod_ind_cob);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.cod_tipo_anexo", parentPropertyName), complexObject == null ? null : (object)complexObject.cod_tipo_anexo);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.cod_anexo", parentPropertyName), complexObject == null ? null : (object)complexObject.cod_anexo);
        }

        #endregion

    }
}
