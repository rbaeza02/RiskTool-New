//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

#pragma warning disable 1591 // this is for supress no xml comments in public members warnings 

using Domain.Core.Entities;

namespace Domain.MainModule.Entities
{
    [System.CodeDom.Compiler.GeneratedCode("STE-EF",".NET 4.0")]
    #if !SILVERLIGHT
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
    #endif
    public partial class SelectRiskReportCOPE_Result : INotifyComplexPropertyChanging, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int UbicacionID
        {
            get { return _ubicacionID; }
            set
            {
                if (_ubicacionID != value)
                {
                    OnComplexPropertyChanging();
                    _ubicacionID = value;
                    OnPropertyChanged("UbicacionID");
                }
            }
        }
        private int _ubicacionID;
    
        [DataMember]
        public string location
        {
            get { return _location; }
            set
            {
                if (_location != value)
                {
                    OnComplexPropertyChanging();
                    _location = value;
                    OnPropertyChanged("location");
                }
            }
        }
        private string _location;
    
        [DataMember]
        public string tipoIncendio
        {
            get { return _tipoIncendio; }
            set
            {
                if (_tipoIncendio != value)
                {
                    OnComplexPropertyChanging();
                    _tipoIncendio = value;
                    OnPropertyChanged("tipoIncendio");
                }
            }
        }
        private string _tipoIncendio;
    
        [DataMember]
        public string Description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    OnComplexPropertyChanging();
                    _description = value;
                    OnPropertyChanged("Description");
                }
            }
        }
        private string _description;
    
        [DataMember]
        public int añoConstruccion
        {
            get { return _añoConstruccion; }
            set
            {
                if (_añoConstruccion != value)
                {
                    OnComplexPropertyChanging();
                    _añoConstruccion = value;
                    OnPropertyChanged("añoConstruccion");
                }
            }
        }
        private int _añoConstruccion;
    
        [DataMember]
        public Nullable<int> Pisos
        {
            get { return _pisos; }
            set
            {
                if (_pisos != value)
                {
                    OnComplexPropertyChanging();
                    _pisos = value;
                    OnPropertyChanged("Pisos");
                }
            }
        }
        private Nullable<int> _pisos;
    
        [DataMember]
        public Nullable<int> FireAreas
        {
            get { return _fireAreas; }
            set
            {
                if (_fireAreas != value)
                {
                    OnComplexPropertyChanging();
                    _fireAreas = value;
                    OnPropertyChanged("FireAreas");
                }
            }
        }
        private Nullable<int> _fireAreas;
    
        [DataMember]
        public string giro
        {
            get { return _giro; }
            set
            {
                if (_giro != value)
                {
                    OnComplexPropertyChanging();
                    _giro = value;
                    OnPropertyChanged("giro");
                }
            }
        }
        private string _giro;
    
        [DataMember]
        public string SIC
        {
            get { return _sIC; }
            set
            {
                if (_sIC != value)
                {
                    OnComplexPropertyChanging();
                    _sIC = value;
                    OnPropertyChanged("SIC");
                }
            }
        }
        private string _sIC;
    
        [DataMember]
        public string PublicProtection
        {
            get { return _publicProtection; }
            set
            {
                if (_publicProtection != value)
                {
                    OnComplexPropertyChanging();
                    _publicProtection = value;
                    OnPropertyChanged("PublicProtection");
                }
            }
        }
        private string _publicProtection;
    
        [DataMember]
        public Nullable<double> DistanceRisk
        {
            get { return _distanceRisk; }
            set
            {
                if (_distanceRisk != value)
                {
                    OnComplexPropertyChanging();
                    _distanceRisk = value;
                    OnPropertyChanged("DistanceRisk");
                }
            }
        }
        private Nullable<double> _distanceRisk;
    
        [DataMember]
        public string PrivateProtection
        {
            get { return _privateProtection; }
            set
            {
                if (_privateProtection != value)
                {
                    OnComplexPropertyChanging();
                    _privateProtection = value;
                    OnPropertyChanged("PrivateProtection");
                }
            }
        }
        private string _privateProtection;
    
        [DataMember]
        public string iso
        {
            get { return _iso; }
            set
            {
                if (_iso != value)
                {
                    OnComplexPropertyChanging();
                    _iso = value;
                    OnPropertyChanged("iso");
                }
            }
        }
        private string _iso;
    
        [DataMember]
        public string PaidFire
        {
            get { return _paidFire; }
            set
            {
                if (_paidFire != value)
                {
                    OnComplexPropertyChanging();
                    _paidFire = value;
                    OnPropertyChanged("PaidFire");
                }
            }
        }
        private string _paidFire;
    
        [DataMember]
        public string FireExterior
        {
            get { return _fireExterior; }
            set
            {
                if (_fireExterior != value)
                {
                    OnComplexPropertyChanging();
                    _fireExterior = value;
                    OnPropertyChanged("FireExterior");
                }
            }
        }
        private string _fireExterior;
    
        [DataMember]
        public string FireInterior
        {
            get { return _fireInterior; }
            set
            {
                if (_fireInterior != value)
                {
                    OnComplexPropertyChanging();
                    _fireInterior = value;
                    OnPropertyChanged("FireInterior");
                }
            }
        }
        private string _fireInterior;
    
        [DataMember]
        public string smoke
        {
            get { return _smoke; }
            set
            {
                if (_smoke != value)
                {
                    OnComplexPropertyChanging();
                    _smoke = value;
                    OnPropertyChanged("smoke");
                }
            }
        }
        private string _smoke;
    
        [DataMember]
        public string water
        {
            get { return _water; }
            set
            {
                if (_water != value)
                {
                    OnComplexPropertyChanging();
                    _water = value;
                    OnPropertyChanged("water");
                }
            }
        }
        private string _water;
    
        [DataMember]
        public string zonaTEV
        {
            get { return _zonaTEV; }
            set
            {
                if (_zonaTEV != value)
                {
                    OnComplexPropertyChanging();
                    _zonaTEV = value;
                    OnPropertyChanged("zonaTEV");
                }
            }
        }
        private string _zonaTEV;
    
        [DataMember]
        public string zonaHidro
        {
            get { return _zonaHidro; }
            set
            {
                if (_zonaHidro != value)
                {
                    OnComplexPropertyChanging();
                    _zonaHidro = value;
                    OnPropertyChanged("zonaHidro");
                }
            }
        }
        private string _zonaHidro;
    
        [DataMember]
        public string MMI
        {
            get { return _mMI; }
            set
            {
                if (_mMI != value)
                {
                    OnComplexPropertyChanging();
                    _mMI = value;
                    OnPropertyChanged("MMI");
                }
            }
        }
        private string _mMI;
    
        [DataMember]
        public Nullable<decimal> PML
        {
            get { return _pML; }
            set
            {
                if (_pML != value)
                {
                    OnComplexPropertyChanging();
                    _pML = value;
                    OnPropertyChanged("PML");
                }
            }
        }
        private Nullable<decimal> _pML;
    
        [DataMember]
        public Nullable<decimal> PML1
        {
            get { return _pML1; }
            set
            {
                if (_pML1 != value)
                {
                    OnComplexPropertyChanging();
                    _pML1 = value;
                    OnPropertyChanged("PML1");
                }
            }
        }
        private Nullable<decimal> _pML1;
    
        [DataMember]
        public string nombre1
        {
            get { return _nombre1; }
            set
            {
                if (_nombre1 != value)
                {
                    OnComplexPropertyChanging();
                    _nombre1 = value;
                    OnPropertyChanged("nombre1");
                }
            }
        }
        private string _nombre1;
    
        [DataMember]
        public Nullable<decimal> PML2
        {
            get { return _pML2; }
            set
            {
                if (_pML2 != value)
                {
                    OnComplexPropertyChanging();
                    _pML2 = value;
                    OnPropertyChanged("PML2");
                }
            }
        }
        private Nullable<decimal> _pML2;
    
        [DataMember]
        public string nombre2
        {
            get { return _nombre2; }
            set
            {
                if (_nombre2 != value)
                {
                    OnComplexPropertyChanging();
                    _nombre2 = value;
                    OnPropertyChanged("nombre2");
                }
            }
        }
        private string _nombre2;
    
        [DataMember]
        public Nullable<decimal> PML3
        {
            get { return _pML3; }
            set
            {
                if (_pML3 != value)
                {
                    OnComplexPropertyChanging();
                    _pML3 = value;
                    OnPropertyChanged("PML3");
                }
            }
        }
        private Nullable<decimal> _pML3;
    
        [DataMember]
        public string nombre3
        {
            get { return _nombre3; }
            set
            {
                if (_nombre3 != value)
                {
                    OnComplexPropertyChanging();
                    _nombre3 = value;
                    OnPropertyChanged("nombre3");
                }
            }
        }
        private string _nombre3;
    
        [DataMember]
        public Nullable<decimal> PML4
        {
            get { return _pML4; }
            set
            {
                if (_pML4 != value)
                {
                    OnComplexPropertyChanging();
                    _pML4 = value;
                    OnPropertyChanged("PML4");
                }
            }
        }
        private Nullable<decimal> _pML4;
    
        [DataMember]
        public string nombre4
        {
            get { return _nombre4; }
            set
            {
                if (_nombre4 != value)
                {
                    OnComplexPropertyChanging();
                    _nombre4 = value;
                    OnPropertyChanged("nombre4");
                }
            }
        }
        private string _nombre4;
    
        [DataMember]
        public Nullable<decimal> PML5
        {
            get { return _pML5; }
            set
            {
                if (_pML5 != value)
                {
                    OnComplexPropertyChanging();
                    _pML5 = value;
                    OnPropertyChanged("PML5");
                }
            }
        }
        private Nullable<decimal> _pML5;
    
        [DataMember]
        public string nombre5
        {
            get { return _nombre5; }
            set
            {
                if (_nombre5 != value)
                {
                    OnComplexPropertyChanging();
                    _nombre5 = value;
                    OnPropertyChanged("nombre5");
                }
            }
        }
        private string _nombre5;

        #endregion

        #region ChangeTracking
    
        private void OnComplexPropertyChanging()
        {
            if (_complexPropertyChanging != null)
            {
                _complexPropertyChanging(this, new EventArgs());
            }
        }
    
        event EventHandler INotifyComplexPropertyChanging.ComplexPropertyChanging { add { _complexPropertyChanging += value; } remove { _complexPropertyChanging -= value; } }
        private event EventHandler _complexPropertyChanging;
    
        private void OnPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged { add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
    
        public static void RecordComplexOriginalValues(String parentPropertyName, SelectRiskReportCOPE_Result complexObject, ObjectChangeTracker changeTracker)
        {
            if (String.IsNullOrEmpty(parentPropertyName))
            {
                throw new ArgumentException("String parameter cannot be null or empty.", "parentPropertyName");
            }
    
            if (changeTracker == null)
            {
                throw new ArgumentNullException("changeTracker");
            }
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.UbicacionID", parentPropertyName), complexObject == null ? null : (object)complexObject.UbicacionID);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.location", parentPropertyName), complexObject == null ? null : (object)complexObject.location);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.tipoIncendio", parentPropertyName), complexObject == null ? null : (object)complexObject.tipoIncendio);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.Description", parentPropertyName), complexObject == null ? null : (object)complexObject.Description);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.añoConstruccion", parentPropertyName), complexObject == null ? null : (object)complexObject.añoConstruccion);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.Pisos", parentPropertyName), complexObject == null ? null : (object)complexObject.Pisos);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.FireAreas", parentPropertyName), complexObject == null ? null : (object)complexObject.FireAreas);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.giro", parentPropertyName), complexObject == null ? null : (object)complexObject.giro);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.SIC", parentPropertyName), complexObject == null ? null : (object)complexObject.SIC);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.PublicProtection", parentPropertyName), complexObject == null ? null : (object)complexObject.PublicProtection);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.DistanceRisk", parentPropertyName), complexObject == null ? null : (object)complexObject.DistanceRisk);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.PrivateProtection", parentPropertyName), complexObject == null ? null : (object)complexObject.PrivateProtection);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.iso", parentPropertyName), complexObject == null ? null : (object)complexObject.iso);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.PaidFire", parentPropertyName), complexObject == null ? null : (object)complexObject.PaidFire);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.FireExterior", parentPropertyName), complexObject == null ? null : (object)complexObject.FireExterior);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.FireInterior", parentPropertyName), complexObject == null ? null : (object)complexObject.FireInterior);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.smoke", parentPropertyName), complexObject == null ? null : (object)complexObject.smoke);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.water", parentPropertyName), complexObject == null ? null : (object)complexObject.water);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.zonaTEV", parentPropertyName), complexObject == null ? null : (object)complexObject.zonaTEV);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.zonaHidro", parentPropertyName), complexObject == null ? null : (object)complexObject.zonaHidro);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.MMI", parentPropertyName), complexObject == null ? null : (object)complexObject.MMI);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.PML", parentPropertyName), complexObject == null ? null : (object)complexObject.PML);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.PML1", parentPropertyName), complexObject == null ? null : (object)complexObject.PML1);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.nombre1", parentPropertyName), complexObject == null ? null : (object)complexObject.nombre1);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.PML2", parentPropertyName), complexObject == null ? null : (object)complexObject.PML2);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.nombre2", parentPropertyName), complexObject == null ? null : (object)complexObject.nombre2);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.PML3", parentPropertyName), complexObject == null ? null : (object)complexObject.PML3);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.nombre3", parentPropertyName), complexObject == null ? null : (object)complexObject.nombre3);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.PML4", parentPropertyName), complexObject == null ? null : (object)complexObject.PML4);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.nombre4", parentPropertyName), complexObject == null ? null : (object)complexObject.nombre4);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.PML5", parentPropertyName), complexObject == null ? null : (object)complexObject.PML5);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.nombre5", parentPropertyName), complexObject == null ? null : (object)complexObject.nombre5);
        }

        #endregion

    }
}
