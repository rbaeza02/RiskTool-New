//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

#pragma warning disable 1591 // this is for supress no xml comments in public members warnings 

using Domain.Core.Entities;

namespace Domain.MainModule.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Asegurado))]
    [KnownType(typeof(Colonia))]
    [KnownType(typeof(TipoConstructivoIncendio))]
    [KnownType(typeof(TipoConstructivoTerremoto))]
    [KnownType(typeof(ZonaHidro))]
    [KnownType(typeof(ZonaTEV))]
    [KnownType(typeof(CotizacionUbicacion))]
    [KnownType(typeof(IncASAreaFuego))]
    [KnownType(typeof(IncCOPE))]
    [KnownType(typeof(CotizacionCoberturaUbi))]
    [KnownType(typeof(CotizacionSubLineaUbi))]
    [System.CodeDom.Compiler.GeneratedCode("STE-EF",".NET 4.0")]
    #if !SILVERLIGHT
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
    #endif
    public partial class Ubicacion: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int UbicacionID
        {
            get { return _ubicacionID; }
            set
            {
                if (_ubicacionID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'UbicacionID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _ubicacionID = value;
                    OnPropertyChanged("UbicacionID");
                }
            }
        }
        private int _ubicacionID;
    
        [DataMember]
        public int nroUbicacion
        {
            get { return _nroUbicacion; }
            set
            {
                if (_nroUbicacion != value)
                {
                    _nroUbicacion = value;
                    OnPropertyChanged("nroUbicacion");
                }
            }
        }
        private int _nroUbicacion;
    
        [DataMember]
        public int AseguradoID
        {
            get { return _aseguradoID; }
            set
            {
                if (_aseguradoID != value)
                {
                    ChangeTracker.RecordOriginalValue("AseguradoID", _aseguradoID);
                    if (!IsDeserializing)
                    {
                        if (bk_tc_Asegurado != null && bk_tc_Asegurado.AseguradoID != value)
                        {
                            bk_tc_Asegurado = null;
                        }
                    }
                    _aseguradoID = value;
                    OnPropertyChanged("AseguradoID");
                }
            }
        }
        private int _aseguradoID;
    
        [DataMember]
        public string CodigoPostal
        {
            get { return _codigoPostal; }
            set
            {
                if (_codigoPostal != value)
                {
                    _codigoPostal = value;
                    OnPropertyChanged("CodigoPostal");
                }
            }
        }
        private string _codigoPostal;
    
        [DataMember]
        public string Domicilio_Calle
        {
            get { return _domicilio_Calle; }
            set
            {
                if (_domicilio_Calle != value)
                {
                    _domicilio_Calle = value;
                    OnPropertyChanged("Domicilio_Calle");
                }
            }
        }
        private string _domicilio_Calle;
    
        [DataMember]
        public string Domicilio_NroExterior
        {
            get { return _domicilio_NroExterior; }
            set
            {
                if (_domicilio_NroExterior != value)
                {
                    _domicilio_NroExterior = value;
                    OnPropertyChanged("Domicilio_NroExterior");
                }
            }
        }
        private string _domicilio_NroExterior;
    
        [DataMember]
        public string Domicilio_NroInterior
        {
            get { return _domicilio_NroInterior; }
            set
            {
                if (_domicilio_NroInterior != value)
                {
                    _domicilio_NroInterior = value;
                    OnPropertyChanged("Domicilio_NroInterior");
                }
            }
        }
        private string _domicilio_NroInterior;
    
        [DataMember]
        public int ColoniaID
        {
            get { return _coloniaID; }
            set
            {
                if (_coloniaID != value)
                {
                    ChangeTracker.RecordOriginalValue("ColoniaID", _coloniaID);
                    if (!IsDeserializing)
                    {
                        if (bk_tc_Colonia != null && bk_tc_Colonia.ColoniaID != value)
                        {
                            bk_tc_Colonia = null;
                        }
                    }
                    _coloniaID = value;
                    OnPropertyChanged("ColoniaID");
                }
            }
        }
        private int _coloniaID;
    
        [DataMember]
        public Nullable<double> Latitud
        {
            get { return _latitud; }
            set
            {
                if (_latitud != value)
                {
                    _latitud = value;
                    OnPropertyChanged("Latitud");
                }
            }
        }
        private Nullable<double> _latitud;
    
        [DataMember]
        public Nullable<double> Longitud
        {
            get { return _longitud; }
            set
            {
                if (_longitud != value)
                {
                    _longitud = value;
                    OnPropertyChanged("Longitud");
                }
            }
        }
        private Nullable<double> _longitud;
    
        [DataMember]
        public int TipoConstructivoIncendioID
        {
            get { return _tipoConstructivoIncendioID; }
            set
            {
                if (_tipoConstructivoIncendioID != value)
                {
                    ChangeTracker.RecordOriginalValue("TipoConstructivoIncendioID", _tipoConstructivoIncendioID);
                    if (!IsDeserializing)
                    {
                        if (bk_tc_TipoConstructivoIncendio != null && bk_tc_TipoConstructivoIncendio.TipoConstructivoIncendioID != value)
                        {
                            bk_tc_TipoConstructivoIncendio = null;
                        }
                    }
                    _tipoConstructivoIncendioID = value;
                    OnPropertyChanged("TipoConstructivoIncendioID");
                }
            }
        }
        private int _tipoConstructivoIncendioID;
    
        [DataMember]
        public int TipoConstructivoTerremotoID
        {
            get { return _tipoConstructivoTerremotoID; }
            set
            {
                if (_tipoConstructivoTerremotoID != value)
                {
                    ChangeTracker.RecordOriginalValue("TipoConstructivoTerremotoID", _tipoConstructivoTerremotoID);
                    if (!IsDeserializing)
                    {
                        if (bk_tc_TipoConstructivoTerremoto != null && bk_tc_TipoConstructivoTerremoto.TipoConstructivoTerremotoID != value)
                        {
                            bk_tc_TipoConstructivoTerremoto = null;
                        }
                    }
                    _tipoConstructivoTerremotoID = value;
                    OnPropertyChanged("TipoConstructivoTerremotoID");
                }
            }
        }
        private int _tipoConstructivoTerremotoID;
    
        [DataMember]
        public int ZonaTEVID
        {
            get { return _zonaTEVID; }
            set
            {
                if (_zonaTEVID != value)
                {
                    ChangeTracker.RecordOriginalValue("ZonaTEVID", _zonaTEVID);
                    if (!IsDeserializing)
                    {
                        if (bk_tc_ZonaTEV != null && bk_tc_ZonaTEV.ZonaTEVID != value)
                        {
                            bk_tc_ZonaTEV = null;
                        }
                    }
                    _zonaTEVID = value;
                    OnPropertyChanged("ZonaTEVID");
                }
            }
        }
        private int _zonaTEVID;
    
        [DataMember]
        public int ZonaHidroID
        {
            get { return _zonaHidroID; }
            set
            {
                if (_zonaHidroID != value)
                {
                    ChangeTracker.RecordOriginalValue("ZonaHidroID", _zonaHidroID);
                    if (!IsDeserializing)
                    {
                        if (bk_tc_ZonaHidro != null && bk_tc_ZonaHidro.ZonaHidroID != value)
                        {
                            bk_tc_ZonaHidro = null;
                        }
                    }
                    _zonaHidroID = value;
                    OnPropertyChanged("ZonaHidroID");
                }
            }
        }
        private int _zonaHidroID;
    
        [DataMember]
        public int nroPiso
        {
            get { return _nroPiso; }
            set
            {
                if (_nroPiso != value)
                {
                    _nroPiso = value;
                    OnPropertyChanged("nroPiso");
                }
            }
        }
        private int _nroPiso;
    
        [DataMember]
        public int nroSotano
        {
            get { return _nroSotano; }
            set
            {
                if (_nroSotano != value)
                {
                    _nroSotano = value;
                    OnPropertyChanged("nroSotano");
                }
            }
        }
        private int _nroSotano;
    
        [DataMember]
        public Nullable<int> añoConstruccion
        {
            get { return _añoConstruccion; }
            set
            {
                if (_añoConstruccion != value)
                {
                    _añoConstruccion = value;
                    OnPropertyChanged("añoConstruccion");
                }
            }
        }
        private Nullable<int> _añoConstruccion;
    
        [DataMember]
        public string SIC
        {
            get { return _sIC; }
            set
            {
                if (_sIC != value)
                {
                    _sIC = value;
                    OnPropertyChanged("SIC");
                }
            }
        }
        private string _sIC;
    
        [DataMember]
        public bool UbicacionCosta
        {
            get { return _ubicacionCosta; }
            set
            {
                if (_ubicacionCosta != value)
                {
                    _ubicacionCosta = value;
                    OnPropertyChanged("UbicacionCosta");
                }
            }
        }
        private bool _ubicacionCosta;
    
        [DataMember]
        public bool AnalisisFire
        {
            get { return _analisisFire; }
            set
            {
                if (_analisisFire != value)
                {
                    _analisisFire = value;
                    OnPropertyChanged("AnalisisFire");
                }
            }
        }
        private bool _analisisFire;
    
        [DataMember]
        public Nullable<int> IncendioTipoRiesgoID
        {
            get { return _incendioTipoRiesgoID; }
            set
            {
                if (_incendioTipoRiesgoID != value)
                {
                    _incendioTipoRiesgoID = value;
                    OnPropertyChanged("IncendioTipoRiesgoID");
                }
            }
        }
        private Nullable<int> _incendioTipoRiesgoID;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public Asegurado bk_tc_Asegurado
        {
            get { return _bk_tc_Asegurado; }
            set
            {
                if (!ReferenceEquals(_bk_tc_Asegurado, value))
                {
                    var previousValue = _bk_tc_Asegurado;
                    _bk_tc_Asegurado = value;
                    Fixupbk_tc_Asegurado(previousValue);
                    OnNavigationPropertyChanged("bk_tc_Asegurado");
                }
            }
        }
        private Asegurado _bk_tc_Asegurado;
    
        [DataMember]
        public Colonia bk_tc_Colonia
        {
            get { return _bk_tc_Colonia; }
            set
            {
                if (!ReferenceEquals(_bk_tc_Colonia, value))
                {
                    var previousValue = _bk_tc_Colonia;
                    _bk_tc_Colonia = value;
                    Fixupbk_tc_Colonia(previousValue);
                    OnNavigationPropertyChanged("bk_tc_Colonia");
                }
            }
        }
        private Colonia _bk_tc_Colonia;
    
        [DataMember]
        public TipoConstructivoIncendio bk_tc_TipoConstructivoIncendio
        {
            get { return _bk_tc_TipoConstructivoIncendio; }
            set
            {
                if (!ReferenceEquals(_bk_tc_TipoConstructivoIncendio, value))
                {
                    var previousValue = _bk_tc_TipoConstructivoIncendio;
                    _bk_tc_TipoConstructivoIncendio = value;
                    Fixupbk_tc_TipoConstructivoIncendio(previousValue);
                    OnNavigationPropertyChanged("bk_tc_TipoConstructivoIncendio");
                }
            }
        }
        private TipoConstructivoIncendio _bk_tc_TipoConstructivoIncendio;
    
        [DataMember]
        public TipoConstructivoTerremoto bk_tc_TipoConstructivoTerremoto
        {
            get { return _bk_tc_TipoConstructivoTerremoto; }
            set
            {
                if (!ReferenceEquals(_bk_tc_TipoConstructivoTerremoto, value))
                {
                    var previousValue = _bk_tc_TipoConstructivoTerremoto;
                    _bk_tc_TipoConstructivoTerremoto = value;
                    Fixupbk_tc_TipoConstructivoTerremoto(previousValue);
                    OnNavigationPropertyChanged("bk_tc_TipoConstructivoTerremoto");
                }
            }
        }
        private TipoConstructivoTerremoto _bk_tc_TipoConstructivoTerremoto;
    
        [DataMember]
        public ZonaHidro bk_tc_ZonaHidro
        {
            get { return _bk_tc_ZonaHidro; }
            set
            {
                if (!ReferenceEquals(_bk_tc_ZonaHidro, value))
                {
                    var previousValue = _bk_tc_ZonaHidro;
                    _bk_tc_ZonaHidro = value;
                    Fixupbk_tc_ZonaHidro(previousValue);
                    OnNavigationPropertyChanged("bk_tc_ZonaHidro");
                }
            }
        }
        private ZonaHidro _bk_tc_ZonaHidro;
    
        [DataMember]
        public ZonaTEV bk_tc_ZonaTEV
        {
            get { return _bk_tc_ZonaTEV; }
            set
            {
                if (!ReferenceEquals(_bk_tc_ZonaTEV, value))
                {
                    var previousValue = _bk_tc_ZonaTEV;
                    _bk_tc_ZonaTEV = value;
                    Fixupbk_tc_ZonaTEV(previousValue);
                    OnNavigationPropertyChanged("bk_tc_ZonaTEV");
                }
            }
        }
        private ZonaTEV _bk_tc_ZonaTEV;
    
        [DataMember]
        public TrackableCollection<CotizacionUbicacion> bk_te_CotizacionUbicacion
        {
            get
            {
                if (_bk_te_CotizacionUbicacion == null)
                {
                    _bk_te_CotizacionUbicacion = new TrackableCollection<CotizacionUbicacion>();
                    _bk_te_CotizacionUbicacion.CollectionChanged += Fixupbk_te_CotizacionUbicacion;
                }
                return _bk_te_CotizacionUbicacion;
            }
            set
            {
                if (!ReferenceEquals(_bk_te_CotizacionUbicacion, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_bk_te_CotizacionUbicacion != null)
                    {
                        _bk_te_CotizacionUbicacion.CollectionChanged -= Fixupbk_te_CotizacionUbicacion;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (CotizacionUbicacion item in _bk_te_CotizacionUbicacion)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _bk_te_CotizacionUbicacion = value;
                    if (_bk_te_CotizacionUbicacion != null)
                    {
                        _bk_te_CotizacionUbicacion.CollectionChanged += Fixupbk_te_CotizacionUbicacion;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (CotizacionUbicacion item in _bk_te_CotizacionUbicacion)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("bk_te_CotizacionUbicacion");
                }
            }
        }
        private TrackableCollection<CotizacionUbicacion> _bk_te_CotizacionUbicacion;
    
        [DataMember]
        public TrackableCollection<IncASAreaFuego> bk_te_IncASAreaFuego
        {
            get
            {
                if (_bk_te_IncASAreaFuego == null)
                {
                    _bk_te_IncASAreaFuego = new TrackableCollection<IncASAreaFuego>();
                    _bk_te_IncASAreaFuego.CollectionChanged += Fixupbk_te_IncASAreaFuego;
                }
                return _bk_te_IncASAreaFuego;
            }
            set
            {
                if (!ReferenceEquals(_bk_te_IncASAreaFuego, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_bk_te_IncASAreaFuego != null)
                    {
                        _bk_te_IncASAreaFuego.CollectionChanged -= Fixupbk_te_IncASAreaFuego;
                    }
                    _bk_te_IncASAreaFuego = value;
                    if (_bk_te_IncASAreaFuego != null)
                    {
                        _bk_te_IncASAreaFuego.CollectionChanged += Fixupbk_te_IncASAreaFuego;
                    }
                    OnNavigationPropertyChanged("bk_te_IncASAreaFuego");
                }
            }
        }
        private TrackableCollection<IncASAreaFuego> _bk_te_IncASAreaFuego;
    
        [DataMember]
        public TrackableCollection<IncCOPE> bk_te_IncCOPE
        {
            get
            {
                if (_bk_te_IncCOPE == null)
                {
                    _bk_te_IncCOPE = new TrackableCollection<IncCOPE>();
                    _bk_te_IncCOPE.CollectionChanged += Fixupbk_te_IncCOPE;
                }
                return _bk_te_IncCOPE;
            }
            set
            {
                if (!ReferenceEquals(_bk_te_IncCOPE, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_bk_te_IncCOPE != null)
                    {
                        _bk_te_IncCOPE.CollectionChanged -= Fixupbk_te_IncCOPE;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (IncCOPE item in _bk_te_IncCOPE)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _bk_te_IncCOPE = value;
                    if (_bk_te_IncCOPE != null)
                    {
                        _bk_te_IncCOPE.CollectionChanged += Fixupbk_te_IncCOPE;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (IncCOPE item in _bk_te_IncCOPE)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("bk_te_IncCOPE");
                }
            }
        }
        private TrackableCollection<IncCOPE> _bk_te_IncCOPE;
    
        [DataMember]
        public TrackableCollection<CotizacionCoberturaUbi> bk_tr_CotizacionCoberturaUbi
        {
            get
            {
                if (_bk_tr_CotizacionCoberturaUbi == null)
                {
                    _bk_tr_CotizacionCoberturaUbi = new TrackableCollection<CotizacionCoberturaUbi>();
                    _bk_tr_CotizacionCoberturaUbi.CollectionChanged += Fixupbk_tr_CotizacionCoberturaUbi;
                }
                return _bk_tr_CotizacionCoberturaUbi;
            }
            set
            {
                if (!ReferenceEquals(_bk_tr_CotizacionCoberturaUbi, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_bk_tr_CotizacionCoberturaUbi != null)
                    {
                        _bk_tr_CotizacionCoberturaUbi.CollectionChanged -= Fixupbk_tr_CotizacionCoberturaUbi;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (CotizacionCoberturaUbi item in _bk_tr_CotizacionCoberturaUbi)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _bk_tr_CotizacionCoberturaUbi = value;
                    if (_bk_tr_CotizacionCoberturaUbi != null)
                    {
                        _bk_tr_CotizacionCoberturaUbi.CollectionChanged += Fixupbk_tr_CotizacionCoberturaUbi;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (CotizacionCoberturaUbi item in _bk_tr_CotizacionCoberturaUbi)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("bk_tr_CotizacionCoberturaUbi");
                }
            }
        }
        private TrackableCollection<CotizacionCoberturaUbi> _bk_tr_CotizacionCoberturaUbi;
    
        [DataMember]
        public TrackableCollection<CotizacionSubLineaUbi> bk_tr_CotizacionSubLineaUbi
        {
            get
            {
                if (_bk_tr_CotizacionSubLineaUbi == null)
                {
                    _bk_tr_CotizacionSubLineaUbi = new TrackableCollection<CotizacionSubLineaUbi>();
                    _bk_tr_CotizacionSubLineaUbi.CollectionChanged += Fixupbk_tr_CotizacionSubLineaUbi;
                }
                return _bk_tr_CotizacionSubLineaUbi;
            }
            set
            {
                if (!ReferenceEquals(_bk_tr_CotizacionSubLineaUbi, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_bk_tr_CotizacionSubLineaUbi != null)
                    {
                        _bk_tr_CotizacionSubLineaUbi.CollectionChanged -= Fixupbk_tr_CotizacionSubLineaUbi;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (CotizacionSubLineaUbi item in _bk_tr_CotizacionSubLineaUbi)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _bk_tr_CotizacionSubLineaUbi = value;
                    if (_bk_tr_CotizacionSubLineaUbi != null)
                    {
                        _bk_tr_CotizacionSubLineaUbi.CollectionChanged += Fixupbk_tr_CotizacionSubLineaUbi;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (CotizacionSubLineaUbi item in _bk_tr_CotizacionSubLineaUbi)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("bk_tr_CotizacionSubLineaUbi");
                }
            }
        }
        private TrackableCollection<CotizacionSubLineaUbi> _bk_tr_CotizacionSubLineaUbi;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            bk_tc_Asegurado = null;
            bk_tc_Colonia = null;
            bk_tc_TipoConstructivoIncendio = null;
            bk_tc_TipoConstructivoTerremoto = null;
            bk_tc_ZonaHidro = null;
            bk_tc_ZonaTEV = null;
            bk_te_CotizacionUbicacion.Clear();
            bk_te_IncASAreaFuego.Clear();
            bk_te_IncCOPE.Clear();
            bk_tr_CotizacionCoberturaUbi.Clear();
            bk_tr_CotizacionSubLineaUbi.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void Fixupbk_tc_Asegurado(Asegurado previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.bk_tc_Ubicacion.Contains(this))
            {
                previousValue.bk_tc_Ubicacion.Remove(this);
            }
    
            if (bk_tc_Asegurado != null)
            {
                if (!bk_tc_Asegurado.bk_tc_Ubicacion.Contains(this))
                {
                    bk_tc_Asegurado.bk_tc_Ubicacion.Add(this);
                }
    
                AseguradoID = bk_tc_Asegurado.AseguradoID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("bk_tc_Asegurado")
                    && (ChangeTracker.OriginalValues["bk_tc_Asegurado"] == bk_tc_Asegurado))
                {
                    ChangeTracker.OriginalValues.Remove("bk_tc_Asegurado");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("bk_tc_Asegurado", previousValue);
                }
                if (bk_tc_Asegurado != null && !bk_tc_Asegurado.ChangeTracker.ChangeTrackingEnabled)
                {
                    bk_tc_Asegurado.StartTracking();
                }
            }
        }
    
        private void Fixupbk_tc_Colonia(Colonia previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.bk_tc_Ubicacion.Contains(this))
            {
                previousValue.bk_tc_Ubicacion.Remove(this);
            }
    
            if (bk_tc_Colonia != null)
            {
                if (!bk_tc_Colonia.bk_tc_Ubicacion.Contains(this))
                {
                    bk_tc_Colonia.bk_tc_Ubicacion.Add(this);
                }
    
                ColoniaID = bk_tc_Colonia.ColoniaID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("bk_tc_Colonia")
                    && (ChangeTracker.OriginalValues["bk_tc_Colonia"] == bk_tc_Colonia))
                {
                    ChangeTracker.OriginalValues.Remove("bk_tc_Colonia");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("bk_tc_Colonia", previousValue);
                }
                if (bk_tc_Colonia != null && !bk_tc_Colonia.ChangeTracker.ChangeTrackingEnabled)
                {
                    bk_tc_Colonia.StartTracking();
                }
            }
        }
    
        private void Fixupbk_tc_TipoConstructivoIncendio(TipoConstructivoIncendio previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.bk_tc_Ubicacion.Contains(this))
            {
                previousValue.bk_tc_Ubicacion.Remove(this);
            }
    
            if (bk_tc_TipoConstructivoIncendio != null)
            {
                if (!bk_tc_TipoConstructivoIncendio.bk_tc_Ubicacion.Contains(this))
                {
                    bk_tc_TipoConstructivoIncendio.bk_tc_Ubicacion.Add(this);
                }
    
                TipoConstructivoIncendioID = bk_tc_TipoConstructivoIncendio.TipoConstructivoIncendioID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("bk_tc_TipoConstructivoIncendio")
                    && (ChangeTracker.OriginalValues["bk_tc_TipoConstructivoIncendio"] == bk_tc_TipoConstructivoIncendio))
                {
                    ChangeTracker.OriginalValues.Remove("bk_tc_TipoConstructivoIncendio");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("bk_tc_TipoConstructivoIncendio", previousValue);
                }
                if (bk_tc_TipoConstructivoIncendio != null && !bk_tc_TipoConstructivoIncendio.ChangeTracker.ChangeTrackingEnabled)
                {
                    bk_tc_TipoConstructivoIncendio.StartTracking();
                }
            }
        }
    
        private void Fixupbk_tc_TipoConstructivoTerremoto(TipoConstructivoTerremoto previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.bk_tc_Ubicacion.Contains(this))
            {
                previousValue.bk_tc_Ubicacion.Remove(this);
            }
    
            if (bk_tc_TipoConstructivoTerremoto != null)
            {
                if (!bk_tc_TipoConstructivoTerremoto.bk_tc_Ubicacion.Contains(this))
                {
                    bk_tc_TipoConstructivoTerremoto.bk_tc_Ubicacion.Add(this);
                }
    
                TipoConstructivoTerremotoID = bk_tc_TipoConstructivoTerremoto.TipoConstructivoTerremotoID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("bk_tc_TipoConstructivoTerremoto")
                    && (ChangeTracker.OriginalValues["bk_tc_TipoConstructivoTerremoto"] == bk_tc_TipoConstructivoTerremoto))
                {
                    ChangeTracker.OriginalValues.Remove("bk_tc_TipoConstructivoTerremoto");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("bk_tc_TipoConstructivoTerremoto", previousValue);
                }
                if (bk_tc_TipoConstructivoTerremoto != null && !bk_tc_TipoConstructivoTerremoto.ChangeTracker.ChangeTrackingEnabled)
                {
                    bk_tc_TipoConstructivoTerremoto.StartTracking();
                }
            }
        }
    
        private void Fixupbk_tc_ZonaHidro(ZonaHidro previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.bk_tc_Ubicacion.Contains(this))
            {
                previousValue.bk_tc_Ubicacion.Remove(this);
            }
    
            if (bk_tc_ZonaHidro != null)
            {
                if (!bk_tc_ZonaHidro.bk_tc_Ubicacion.Contains(this))
                {
                    bk_tc_ZonaHidro.bk_tc_Ubicacion.Add(this);
                }
    
                ZonaHidroID = bk_tc_ZonaHidro.ZonaHidroID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("bk_tc_ZonaHidro")
                    && (ChangeTracker.OriginalValues["bk_tc_ZonaHidro"] == bk_tc_ZonaHidro))
                {
                    ChangeTracker.OriginalValues.Remove("bk_tc_ZonaHidro");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("bk_tc_ZonaHidro", previousValue);
                }
                if (bk_tc_ZonaHidro != null && !bk_tc_ZonaHidro.ChangeTracker.ChangeTrackingEnabled)
                {
                    bk_tc_ZonaHidro.StartTracking();
                }
            }
        }
    
        private void Fixupbk_tc_ZonaTEV(ZonaTEV previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.bk_tc_Ubicacion.Contains(this))
            {
                previousValue.bk_tc_Ubicacion.Remove(this);
            }
    
            if (bk_tc_ZonaTEV != null)
            {
                if (!bk_tc_ZonaTEV.bk_tc_Ubicacion.Contains(this))
                {
                    bk_tc_ZonaTEV.bk_tc_Ubicacion.Add(this);
                }
    
                ZonaTEVID = bk_tc_ZonaTEV.ZonaTEVID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("bk_tc_ZonaTEV")
                    && (ChangeTracker.OriginalValues["bk_tc_ZonaTEV"] == bk_tc_ZonaTEV))
                {
                    ChangeTracker.OriginalValues.Remove("bk_tc_ZonaTEV");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("bk_tc_ZonaTEV", previousValue);
                }
                if (bk_tc_ZonaTEV != null && !bk_tc_ZonaTEV.ChangeTracker.ChangeTrackingEnabled)
                {
                    bk_tc_ZonaTEV.StartTracking();
                }
            }
        }
    
        private void Fixupbk_te_CotizacionUbicacion(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CotizacionUbicacion item in e.NewItems)
                {
                    item.bk_tc_Ubicacion = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("bk_te_CotizacionUbicacion", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CotizacionUbicacion item in e.OldItems)
                {
                    if (ReferenceEquals(item.bk_tc_Ubicacion, this))
                    {
                        item.bk_tc_Ubicacion = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("bk_te_CotizacionUbicacion", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void Fixupbk_te_IncASAreaFuego(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (IncASAreaFuego item in e.NewItems)
                {
                    item.bk_tc_Ubicacion = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("bk_te_IncASAreaFuego", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (IncASAreaFuego item in e.OldItems)
                {
                    if (ReferenceEquals(item.bk_tc_Ubicacion, this))
                    {
                        item.bk_tc_Ubicacion = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("bk_te_IncASAreaFuego", item);
                    }
                }
            }
        }
    
        private void Fixupbk_te_IncCOPE(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (IncCOPE item in e.NewItems)
                {
                    item.bk_tc_Ubicacion = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("bk_te_IncCOPE", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (IncCOPE item in e.OldItems)
                {
                    if (ReferenceEquals(item.bk_tc_Ubicacion, this))
                    {
                        item.bk_tc_Ubicacion = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("bk_te_IncCOPE", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void Fixupbk_tr_CotizacionCoberturaUbi(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CotizacionCoberturaUbi item in e.NewItems)
                {
                    item.bk_tc_Ubicacion = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("bk_tr_CotizacionCoberturaUbi", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CotizacionCoberturaUbi item in e.OldItems)
                {
                    if (ReferenceEquals(item.bk_tc_Ubicacion, this))
                    {
                        item.bk_tc_Ubicacion = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("bk_tr_CotizacionCoberturaUbi", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void Fixupbk_tr_CotizacionSubLineaUbi(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CotizacionSubLineaUbi item in e.NewItems)
                {
                    item.bk_tc_Ubicacion = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("bk_tr_CotizacionSubLineaUbi", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CotizacionSubLineaUbi item in e.OldItems)
                {
                    if (ReferenceEquals(item.bk_tc_Ubicacion, this))
                    {
                        item.bk_tc_Ubicacion = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("bk_tr_CotizacionSubLineaUbi", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }

        #endregion

    }
}
