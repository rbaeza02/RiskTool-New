//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

#pragma warning disable 1591 // this is for supress no xml comments in public members warnings 

using Domain.Core.Entities;

namespace Domain.MainModule.Entities
{
    [System.CodeDom.Compiler.GeneratedCode("STE-EF",".NET 4.0")]
    #if !SILVERLIGHT
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
    #endif
    public partial class SelectPrimasPresentacion_Result : INotifyComplexPropertyChanging, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int CoberturaID
        {
            get { return _coberturaID; }
            set
            {
                if (_coberturaID != value)
                {
                    OnComplexPropertyChanging();
                    _coberturaID = value;
                    OnPropertyChanged("CoberturaID");
                }
            }
        }
        private int _coberturaID;
    
        [DataMember]
        public Nullable<int> SubLineaNegocioID
        {
            get { return _subLineaNegocioID; }
            set
            {
                if (_subLineaNegocioID != value)
                {
                    OnComplexPropertyChanging();
                    _subLineaNegocioID = value;
                    OnPropertyChanged("SubLineaNegocioID");
                }
            }
        }
        private Nullable<int> _subLineaNegocioID;
    
        [DataMember]
        public string Bienes
        {
            get { return _bienes; }
            set
            {
                if (_bienes != value)
                {
                    OnComplexPropertyChanging();
                    _bienes = value;
                    OnPropertyChanged("Bienes");
                }
            }
        }
        private string _bienes;
    
        [DataMember]
        public Nullable<decimal> Infl
        {
            get { return _infl; }
            set
            {
                if (_infl != value)
                {
                    OnComplexPropertyChanging();
                    _infl = value;
                    OnPropertyChanged("Infl");
                }
            }
        }
        private Nullable<decimal> _infl;
    
        [DataMember]
        public string valorAsegurable
        {
            get { return _valorAsegurable; }
            set
            {
                if (_valorAsegurable != value)
                {
                    OnComplexPropertyChanging();
                    _valorAsegurable = value;
                    OnPropertyChanged("valorAsegurable");
                }
            }
        }
        private string _valorAsegurable;
    
        [DataMember]
        public string sumaAsegurada
        {
            get { return _sumaAsegurada; }
            set
            {
                if (_sumaAsegurada != value)
                {
                    OnComplexPropertyChanging();
                    _sumaAsegurada = value;
                    OnPropertyChanged("sumaAsegurada");
                }
            }
        }
        private string _sumaAsegurada;
    
        [DataMember]
        public Nullable<double> cuotas
        {
            get { return _cuotas; }
            set
            {
                if (_cuotas != value)
                {
                    OnComplexPropertyChanging();
                    _cuotas = value;
                    OnPropertyChanged("cuotas");
                }
            }
        }
        private Nullable<double> _cuotas;
    
        [DataMember]
        public string simbolo
        {
            get { return _simbolo; }
            set
            {
                if (_simbolo != value)
                {
                    OnComplexPropertyChanging();
                    _simbolo = value;
                    OnPropertyChanged("simbolo");
                }
            }
        }
        private string _simbolo;
    
        [DataMember]
        public string prima
        {
            get { return _prima; }
            set
            {
                if (_prima != value)
                {
                    OnComplexPropertyChanging();
                    _prima = value;
                    OnPropertyChanged("prima");
                }
            }
        }
        private string _prima;
    
        [DataMember]
        public Nullable<double> cuotas2
        {
            get { return _cuotas2; }
            set
            {
                if (_cuotas2 != value)
                {
                    OnComplexPropertyChanging();
                    _cuotas2 = value;
                    OnPropertyChanged("cuotas2");
                }
            }
        }
        private Nullable<double> _cuotas2;
    
        [DataMember]
        public Nullable<int> isNegritaPresentacion
        {
            get { return _isNegritaPresentacion; }
            set
            {
                if (_isNegritaPresentacion != value)
                {
                    OnComplexPropertyChanging();
                    _isNegritaPresentacion = value;
                    OnPropertyChanged("isNegritaPresentacion");
                }
            }
        }
        private Nullable<int> _isNegritaPresentacion;
    
        [DataMember]
        public Nullable<int> ordenCob
        {
            get { return _ordenCob; }
            set
            {
                if (_ordenCob != value)
                {
                    OnComplexPropertyChanging();
                    _ordenCob = value;
                    OnPropertyChanged("ordenCob");
                }
            }
        }
        private Nullable<int> _ordenCob;
    
        [DataMember]
        public Nullable<int> ordenSubLinea
        {
            get { return _ordenSubLinea; }
            set
            {
                if (_ordenSubLinea != value)
                {
                    OnComplexPropertyChanging();
                    _ordenSubLinea = value;
                    OnPropertyChanged("ordenSubLinea");
                }
            }
        }
        private Nullable<int> _ordenSubLinea;

        #endregion

        #region ChangeTracking
    
        private void OnComplexPropertyChanging()
        {
            if (_complexPropertyChanging != null)
            {
                _complexPropertyChanging(this, new EventArgs());
            }
        }
    
        event EventHandler INotifyComplexPropertyChanging.ComplexPropertyChanging { add { _complexPropertyChanging += value; } remove { _complexPropertyChanging -= value; } }
        private event EventHandler _complexPropertyChanging;
    
        private void OnPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged { add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
    
        public static void RecordComplexOriginalValues(String parentPropertyName, SelectPrimasPresentacion_Result complexObject, ObjectChangeTracker changeTracker)
        {
            if (String.IsNullOrEmpty(parentPropertyName))
            {
                throw new ArgumentException("String parameter cannot be null or empty.", "parentPropertyName");
            }
    
            if (changeTracker == null)
            {
                throw new ArgumentNullException("changeTracker");
            }
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.CoberturaID", parentPropertyName), complexObject == null ? null : (object)complexObject.CoberturaID);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.SubLineaNegocioID", parentPropertyName), complexObject == null ? null : (object)complexObject.SubLineaNegocioID);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.Bienes", parentPropertyName), complexObject == null ? null : (object)complexObject.Bienes);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.Infl", parentPropertyName), complexObject == null ? null : (object)complexObject.Infl);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.valorAsegurable", parentPropertyName), complexObject == null ? null : (object)complexObject.valorAsegurable);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.sumaAsegurada", parentPropertyName), complexObject == null ? null : (object)complexObject.sumaAsegurada);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.cuotas", parentPropertyName), complexObject == null ? null : (object)complexObject.cuotas);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.simbolo", parentPropertyName), complexObject == null ? null : (object)complexObject.simbolo);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.prima", parentPropertyName), complexObject == null ? null : (object)complexObject.prima);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.cuotas2", parentPropertyName), complexObject == null ? null : (object)complexObject.cuotas2);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.isNegritaPresentacion", parentPropertyName), complexObject == null ? null : (object)complexObject.isNegritaPresentacion);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.ordenCob", parentPropertyName), complexObject == null ? null : (object)complexObject.ordenCob);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.ordenSubLinea", parentPropertyName), complexObject == null ? null : (object)complexObject.ordenSubLinea);
        }

        #endregion

    }
}
