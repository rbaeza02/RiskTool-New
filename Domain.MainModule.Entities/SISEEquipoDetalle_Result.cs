//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

#pragma warning disable 1591 // this is for supress no xml comments in public members warnings 

using Domain.Core.Entities;

namespace Domain.MainModule.Entities
{
    [System.CodeDom.Compiler.GeneratedCode("STE-EF",".NET 4.0")]
    #if !SILVERLIGHT
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
    #endif
    public partial class SISEEquipoDetalle_Result : INotifyComplexPropertyChanging, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public Nullable<int> ip_pv
        {
            get { return _ip_pv; }
            set
            {
                if (_ip_pv != value)
                {
                    OnComplexPropertyChanging();
                    _ip_pv = value;
                    OnPropertyChanged("ip_pv");
                }
            }
        }
        private Nullable<int> _ip_pv;
    
        [DataMember]
        public int cod_ind_cob
        {
            get { return _cod_ind_cob; }
            set
            {
                if (_cod_ind_cob != value)
                {
                    OnComplexPropertyChanging();
                    _cod_ind_cob = value;
                    OnPropertyChanged("cod_ind_cob");
                }
            }
        }
        private int _cod_ind_cob;
    
        [DataMember]
        public Nullable<int> anio
        {
            get { return _anio; }
            set
            {
                if (_anio != value)
                {
                    OnComplexPropertyChanging();
                    _anio = value;
                    OnPropertyChanged("anio");
                }
            }
        }
        private Nullable<int> _anio;
    
        [DataMember]
        public string Marca
        {
            get { return _marca; }
            set
            {
                if (_marca != value)
                {
                    OnComplexPropertyChanging();
                    _marca = value;
                    OnPropertyChanged("Marca");
                }
            }
        }
        private string _marca;
    
        [DataMember]
        public string Descripcion
        {
            get { return _descripcion; }
            set
            {
                if (_descripcion != value)
                {
                    OnComplexPropertyChanging();
                    _descripcion = value;
                    OnPropertyChanged("Descripcion");
                }
            }
        }
        private string _descripcion;
    
        [DataMember]
        public Nullable<double> Limite
        {
            get { return _limite; }
            set
            {
                if (_limite != value)
                {
                    OnComplexPropertyChanging();
                    _limite = value;
                    OnPropertyChanged("Limite");
                }
            }
        }
        private Nullable<double> _limite;
    
        [DataMember]
        public string NroSerie
        {
            get { return _nroSerie; }
            set
            {
                if (_nroSerie != value)
                {
                    OnComplexPropertyChanging();
                    _nroSerie = value;
                    OnPropertyChanged("NroSerie");
                }
            }
        }
        private string _nroSerie;

        #endregion

        #region ChangeTracking
    
        private void OnComplexPropertyChanging()
        {
            if (_complexPropertyChanging != null)
            {
                _complexPropertyChanging(this, new EventArgs());
            }
        }
    
        event EventHandler INotifyComplexPropertyChanging.ComplexPropertyChanging { add { _complexPropertyChanging += value; } remove { _complexPropertyChanging -= value; } }
        private event EventHandler _complexPropertyChanging;
    
        private void OnPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged { add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
    
        public static void RecordComplexOriginalValues(String parentPropertyName, SISEEquipoDetalle_Result complexObject, ObjectChangeTracker changeTracker)
        {
            if (String.IsNullOrEmpty(parentPropertyName))
            {
                throw new ArgumentException("String parameter cannot be null or empty.", "parentPropertyName");
            }
    
            if (changeTracker == null)
            {
                throw new ArgumentNullException("changeTracker");
            }
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.ip_pv", parentPropertyName), complexObject == null ? null : (object)complexObject.ip_pv);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.cod_ind_cob", parentPropertyName), complexObject == null ? null : (object)complexObject.cod_ind_cob);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.anio", parentPropertyName), complexObject == null ? null : (object)complexObject.anio);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.Marca", parentPropertyName), complexObject == null ? null : (object)complexObject.Marca);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.Descripcion", parentPropertyName), complexObject == null ? null : (object)complexObject.Descripcion);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.Limite", parentPropertyName), complexObject == null ? null : (object)complexObject.Limite);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.NroSerie", parentPropertyName), complexObject == null ? null : (object)complexObject.NroSerie);
        }

        #endregion

    }
}
