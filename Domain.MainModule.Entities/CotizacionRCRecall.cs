//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

#pragma warning disable 1591 // this is for supress no xml comments in public members warnings 

using Domain.Core.Entities;

namespace Domain.MainModule.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Cotizacion))]
    [System.CodeDom.Compiler.GeneratedCode("STE-EF",".NET 4.0")]
    #if !SILVERLIGHT
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
    #endif
    public partial class CotizacionRCRecall: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int CotizacionID
        {
            get { return _cotizacionID; }
            set
            {
                if (_cotizacionID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'CotizacionID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    if (!IsDeserializing)
                    {
                        if (bk_te_Cotizacion != null && bk_te_Cotizacion.CotizacionID != value)
                        {
                            bk_te_Cotizacion = null;
                        }
                    }
                    _cotizacionID = value;
                    OnPropertyChanged("CotizacionID");
                }
            }
        }
        private int _cotizacionID;
    
        [DataMember]
        public Nullable<int> RCRecallCategoryID
        {
            get { return _rCRecallCategoryID; }
            set
            {
                if (_rCRecallCategoryID != value)
                {
                    _rCRecallCategoryID = value;
                    OnPropertyChanged("RCRecallCategoryID");
                }
            }
        }
        private Nullable<int> _rCRecallCategoryID;
    
        [DataMember]
        public Nullable<int> RCRecallCoverageID
        {
            get { return _rCRecallCoverageID; }
            set
            {
                if (_rCRecallCoverageID != value)
                {
                    _rCRecallCoverageID = value;
                    OnPropertyChanged("RCRecallCoverageID");
                }
            }
        }
        private Nullable<int> _rCRecallCoverageID;
    
        [DataMember]
        public Nullable<int> RCRecallExposureTypeID
        {
            get { return _rCRecallExposureTypeID; }
            set
            {
                if (_rCRecallExposureTypeID != value)
                {
                    _rCRecallExposureTypeID = value;
                    OnPropertyChanged("RCRecallExposureTypeID");
                }
            }
        }
        private Nullable<int> _rCRecallExposureTypeID;
    
        [DataMember]
        public Nullable<int> RCRecallBatchAmountID
        {
            get { return _rCRecallBatchAmountID; }
            set
            {
                if (_rCRecallBatchAmountID != value)
                {
                    _rCRecallBatchAmountID = value;
                    OnPropertyChanged("RCRecallBatchAmountID");
                }
            }
        }
        private Nullable<int> _rCRecallBatchAmountID;
    
        [DataMember]
        public Nullable<int> RCRecallLimitID
        {
            get { return _rCRecallLimitID; }
            set
            {
                if (_rCRecallLimitID != value)
                {
                    _rCRecallLimitID = value;
                    OnPropertyChanged("RCRecallLimitID");
                }
            }
        }
        private Nullable<int> _rCRecallLimitID;
    
        [DataMember]
        public Nullable<double> Sales
        {
            get { return _sales; }
            set
            {
                if (_sales != value)
                {
                    _sales = value;
                    OnPropertyChanged("Sales");
                }
            }
        }
        private Nullable<double> _sales;
    
        [DataMember]
        public Nullable<double> PartyFactor
        {
            get { return _partyFactor; }
            set
            {
                if (_partyFactor != value)
                {
                    _partyFactor = value;
                    OnPropertyChanged("PartyFactor");
                }
            }
        }
        private Nullable<double> _partyFactor;
    
        [DataMember]
        public Nullable<double> AdjustedRateRangeMin
        {
            get { return _adjustedRateRangeMin; }
            set
            {
                if (_adjustedRateRangeMin != value)
                {
                    _adjustedRateRangeMin = value;
                    OnPropertyChanged("AdjustedRateRangeMin");
                }
            }
        }
        private Nullable<double> _adjustedRateRangeMin;
    
        [DataMember]
        public Nullable<double> AdjustedRateRangeMax
        {
            get { return _adjustedRateRangeMax; }
            set
            {
                if (_adjustedRateRangeMax != value)
                {
                    _adjustedRateRangeMax = value;
                    OnPropertyChanged("AdjustedRateRangeMax");
                }
            }
        }
        private Nullable<double> _adjustedRateRangeMax;
    
        [DataMember]
        public Nullable<double> SelectedRateSales
        {
            get { return _selectedRateSales; }
            set
            {
                if (_selectedRateSales != value)
                {
                    _selectedRateSales = value;
                    OnPropertyChanged("SelectedRateSales");
                }
            }
        }
        private Nullable<double> _selectedRateSales;
    
        [DataMember]
        public Nullable<double> Factor
        {
            get { return _factor; }
            set
            {
                if (_factor != value)
                {
                    _factor = value;
                    OnPropertyChanged("Factor");
                }
            }
        }
        private Nullable<double> _factor;
    
        [DataMember]
        public Nullable<double> Systems
        {
            get { return _systems; }
            set
            {
                if (_systems != value)
                {
                    _systems = value;
                    OnPropertyChanged("Systems");
                }
            }
        }
        private Nullable<double> _systems;
    
        [DataMember]
        public Nullable<double> Cost
        {
            get { return _cost; }
            set
            {
                if (_cost != value)
                {
                    _cost = value;
                    OnPropertyChanged("Cost");
                }
            }
        }
        private Nullable<double> _cost;
    
        [DataMember]
        public Nullable<double> DeductibleMinimum
        {
            get { return _deductibleMinimum; }
            set
            {
                if (_deductibleMinimum != value)
                {
                    _deductibleMinimum = value;
                    OnPropertyChanged("DeductibleMinimum");
                }
            }
        }
        private Nullable<double> _deductibleMinimum;
    
        [DataMember]
        public Nullable<int> RCRecallDeducibleID
        {
            get { return _rCRecallDeducibleID; }
            set
            {
                if (_rCRecallDeducibleID != value)
                {
                    _rCRecallDeducibleID = value;
                    OnPropertyChanged("RCRecallDeducibleID");
                }
            }
        }
        private Nullable<int> _rCRecallDeducibleID;
    
        [DataMember]
        public Nullable<double> DeducibleFactor
        {
            get { return _deducibleFactor; }
            set
            {
                if (_deducibleFactor != value)
                {
                    _deducibleFactor = value;
                    OnPropertyChanged("DeducibleFactor");
                }
            }
        }
        private Nullable<double> _deducibleFactor;
    
        [DataMember]
        public Nullable<double> Premium
        {
            get { return _premium; }
            set
            {
                if (_premium != value)
                {
                    _premium = value;
                    OnPropertyChanged("Premium");
                }
            }
        }
        private Nullable<double> _premium;
    
        [DataMember]
        public Nullable<double> PremiumMinimum
        {
            get { return _premiumMinimum; }
            set
            {
                if (_premiumMinimum != value)
                {
                    _premiumMinimum = value;
                    OnPropertyChanged("PremiumMinimum");
                }
            }
        }
        private Nullable<double> _premiumMinimum;
    
        [DataMember]
        public Nullable<double> PremiumFinal
        {
            get { return _premiumFinal; }
            set
            {
                if (_premiumFinal != value)
                {
                    _premiumFinal = value;
                    OnPropertyChanged("PremiumFinal");
                }
            }
        }
        private Nullable<double> _premiumFinal;
    
        [DataMember]
        public Nullable<double> AdjustedRate
        {
            get { return _adjustedRate; }
            set
            {
                if (_adjustedRate != value)
                {
                    _adjustedRate = value;
                    OnPropertyChanged("AdjustedRate");
                }
            }
        }
        private Nullable<double> _adjustedRate;
    
        [DataMember]
        public Nullable<double> BasicRateRangeMin
        {
            get { return _basicRateRangeMin; }
            set
            {
                if (_basicRateRangeMin != value)
                {
                    _basicRateRangeMin = value;
                    OnPropertyChanged("BasicRateRangeMin");
                }
            }
        }
        private Nullable<double> _basicRateRangeMin;
    
        [DataMember]
        public Nullable<double> BasicRateRangeMax
        {
            get { return _basicRateRangeMax; }
            set
            {
                if (_basicRateRangeMax != value)
                {
                    _basicRateRangeMax = value;
                    OnPropertyChanged("BasicRateRangeMax");
                }
            }
        }
        private Nullable<double> _basicRateRangeMax;
    
        [DataMember]
        public Nullable<int> RCRecallOccupancyID
        {
            get { return _rCRecallOccupancyID; }
            set
            {
                if (_rCRecallOccupancyID != value)
                {
                    _rCRecallOccupancyID = value;
                    OnPropertyChanged("RCRecallOccupancyID");
                }
            }
        }
        private Nullable<int> _rCRecallOccupancyID;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public Cotizacion bk_te_Cotizacion
        {
            get { return _bk_te_Cotizacion; }
            set
            {
                if (!ReferenceEquals(_bk_te_Cotizacion, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && value != null)
                    {
                        // This the dependent end of an identifying relationship, so the principal end cannot be changed if it is already set,
                        // otherwise it can only be set to an entity with a primary key that is the same value as the dependent's foreign key.
                        if (CotizacionID != value.CotizacionID)
                        {
                            throw new InvalidOperationException("The principal end of an identifying relationship can only be changed when the dependent end is in the Added state.");
                        }
                    }
                    var previousValue = _bk_te_Cotizacion;
                    _bk_te_Cotizacion = value;
                    Fixupbk_te_Cotizacion(previousValue);
                    OnNavigationPropertyChanged("bk_te_Cotizacion");
                }
            }
        }
        private Cotizacion _bk_te_Cotizacion;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        // This entity type is the dependent end in at least one association that performs cascade deletes.
        // This event handler will process notifications that occur when the principal end is deleted.
        internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                this.MarkAsDeleted();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            bk_te_Cotizacion = null;
        }

        #endregion

        #region Association Fixup
    
        private void Fixupbk_te_Cotizacion(Cotizacion previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && ReferenceEquals(previousValue.bk_te_CotizacionRCRecall, this))
            {
                previousValue.bk_te_CotizacionRCRecall = null;
            }
    
            if (bk_te_Cotizacion != null)
            {
                bk_te_Cotizacion.bk_te_CotizacionRCRecall = this;
                CotizacionID = bk_te_Cotizacion.CotizacionID;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("bk_te_Cotizacion")
                    && (ChangeTracker.OriginalValues["bk_te_Cotizacion"] == bk_te_Cotizacion))
                {
                    ChangeTracker.OriginalValues.Remove("bk_te_Cotizacion");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("bk_te_Cotizacion", previousValue);
                }
                if (bk_te_Cotizacion != null && !bk_te_Cotizacion.ChangeTracker.ChangeTrackingEnabled)
                {
                    bk_te_Cotizacion.StartTracking();
                }
            }
        }

        #endregion

    }
}
