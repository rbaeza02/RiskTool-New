//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

#pragma warning disable 1591 // this is for supress no xml comments in public members warnings 

using Domain.Core.Entities;

namespace Domain.MainModule.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(TipoConstructivoIncendio))]
    [KnownType(typeof(Ubicacion))]
    [KnownType(typeof(Cotizacion))]
    [System.CodeDom.Compiler.GeneratedCode("STE-EF",".NET 4.0")]
    #if !SILVERLIGHT
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
    #endif
    public partial class IncASAreaFuego: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int IncASAreaFuegoID
        {
            get { return _incASAreaFuegoID; }
            set
            {
                if (_incASAreaFuegoID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'IncASAreaFuegoID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _incASAreaFuegoID = value;
                    OnPropertyChanged("IncASAreaFuegoID");
                }
            }
        }
        private int _incASAreaFuegoID;
    
        [DataMember]
        public Nullable<int> CotizacionID
        {
            get { return _cotizacionID; }
            set
            {
                if (_cotizacionID != value)
                {
                    ChangeTracker.RecordOriginalValue("CotizacionID", _cotizacionID);
                    if (!IsDeserializing)
                    {
                        if (bk_te_Cotizacion != null && bk_te_Cotizacion.CotizacionID != value)
                        {
                            bk_te_Cotizacion = null;
                        }
                    }
                    _cotizacionID = value;
                    OnPropertyChanged("CotizacionID");
                }
            }
        }
        private Nullable<int> _cotizacionID;
    
        [DataMember]
        public Nullable<int> UbicacionID
        {
            get { return _ubicacionID; }
            set
            {
                if (_ubicacionID != value)
                {
                    ChangeTracker.RecordOriginalValue("UbicacionID", _ubicacionID);
                    if (!IsDeserializing)
                    {
                        if (bk_tc_Ubicacion != null && bk_tc_Ubicacion.UbicacionID != value)
                        {
                            bk_tc_Ubicacion = null;
                        }
                    }
                    _ubicacionID = value;
                    OnPropertyChanged("UbicacionID");
                }
            }
        }
        private Nullable<int> _ubicacionID;
    
        [DataMember]
        public string SIC
        {
            get { return _sIC; }
            set
            {
                if (_sIC != value)
                {
                    _sIC = value;
                    OnPropertyChanged("SIC");
                }
            }
        }
        private string _sIC;
    
        [DataMember]
        public Nullable<int> ISOid
        {
            get { return _iSOid; }
            set
            {
                if (_iSOid != value)
                {
                    _iSOid = value;
                    OnPropertyChanged("ISOid");
                }
            }
        }
        private Nullable<int> _iSOid;
    
        [DataMember]
        public Nullable<int> TipoConstructivoIncendioID
        {
            get { return _tipoConstructivoIncendioID; }
            set
            {
                if (_tipoConstructivoIncendioID != value)
                {
                    ChangeTracker.RecordOriginalValue("TipoConstructivoIncendioID", _tipoConstructivoIncendioID);
                    if (!IsDeserializing)
                    {
                        if (bk_tc_TipoConstructivoIncendio != null && bk_tc_TipoConstructivoIncendio.TipoConstructivoIncendioID != value)
                        {
                            bk_tc_TipoConstructivoIncendio = null;
                        }
                    }
                    _tipoConstructivoIncendioID = value;
                    OnPropertyChanged("TipoConstructivoIncendioID");
                }
            }
        }
        private Nullable<int> _tipoConstructivoIncendioID;
    
        [DataMember]
        public Nullable<double> pct
        {
            get { return _pct; }
            set
            {
                if (_pct != value)
                {
                    _pct = value;
                    OnPropertyChanged("pct");
                }
            }
        }
        private Nullable<double> _pct;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TipoConstructivoIncendio bk_tc_TipoConstructivoIncendio
        {
            get { return _bk_tc_TipoConstructivoIncendio; }
            set
            {
                if (!ReferenceEquals(_bk_tc_TipoConstructivoIncendio, value))
                {
                    var previousValue = _bk_tc_TipoConstructivoIncendio;
                    _bk_tc_TipoConstructivoIncendio = value;
                    Fixupbk_tc_TipoConstructivoIncendio(previousValue);
                    OnNavigationPropertyChanged("bk_tc_TipoConstructivoIncendio");
                }
            }
        }
        private TipoConstructivoIncendio _bk_tc_TipoConstructivoIncendio;
    
        [DataMember]
        public Ubicacion bk_tc_Ubicacion
        {
            get { return _bk_tc_Ubicacion; }
            set
            {
                if (!ReferenceEquals(_bk_tc_Ubicacion, value))
                {
                    var previousValue = _bk_tc_Ubicacion;
                    _bk_tc_Ubicacion = value;
                    Fixupbk_tc_Ubicacion(previousValue);
                    OnNavigationPropertyChanged("bk_tc_Ubicacion");
                }
            }
        }
        private Ubicacion _bk_tc_Ubicacion;
    
        [DataMember]
        public Cotizacion bk_te_Cotizacion
        {
            get { return _bk_te_Cotizacion; }
            set
            {
                if (!ReferenceEquals(_bk_te_Cotizacion, value))
                {
                    var previousValue = _bk_te_Cotizacion;
                    _bk_te_Cotizacion = value;
                    Fixupbk_te_Cotizacion(previousValue);
                    OnNavigationPropertyChanged("bk_te_Cotizacion");
                }
            }
        }
        private Cotizacion _bk_te_Cotizacion;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            bk_tc_TipoConstructivoIncendio = null;
            bk_tc_Ubicacion = null;
            bk_te_Cotizacion = null;
        }

        #endregion

        #region Association Fixup
    
        private void Fixupbk_tc_TipoConstructivoIncendio(TipoConstructivoIncendio previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.bk_te_IncASAreaFuego.Contains(this))
            {
                previousValue.bk_te_IncASAreaFuego.Remove(this);
            }
    
            if (bk_tc_TipoConstructivoIncendio != null)
            {
                if (!bk_tc_TipoConstructivoIncendio.bk_te_IncASAreaFuego.Contains(this))
                {
                    bk_tc_TipoConstructivoIncendio.bk_te_IncASAreaFuego.Add(this);
                }
    
                TipoConstructivoIncendioID = bk_tc_TipoConstructivoIncendio.TipoConstructivoIncendioID;
            }
            else if (!skipKeys)
            {
                TipoConstructivoIncendioID = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("bk_tc_TipoConstructivoIncendio")
                    && (ChangeTracker.OriginalValues["bk_tc_TipoConstructivoIncendio"] == bk_tc_TipoConstructivoIncendio))
                {
                    ChangeTracker.OriginalValues.Remove("bk_tc_TipoConstructivoIncendio");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("bk_tc_TipoConstructivoIncendio", previousValue);
                }
                if (bk_tc_TipoConstructivoIncendio != null && !bk_tc_TipoConstructivoIncendio.ChangeTracker.ChangeTrackingEnabled)
                {
                    bk_tc_TipoConstructivoIncendio.StartTracking();
                }
            }
        }
    
        private void Fixupbk_tc_Ubicacion(Ubicacion previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.bk_te_IncASAreaFuego.Contains(this))
            {
                previousValue.bk_te_IncASAreaFuego.Remove(this);
            }
    
            if (bk_tc_Ubicacion != null)
            {
                if (!bk_tc_Ubicacion.bk_te_IncASAreaFuego.Contains(this))
                {
                    bk_tc_Ubicacion.bk_te_IncASAreaFuego.Add(this);
                }
    
                UbicacionID = bk_tc_Ubicacion.UbicacionID;
            }
            else if (!skipKeys)
            {
                UbicacionID = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("bk_tc_Ubicacion")
                    && (ChangeTracker.OriginalValues["bk_tc_Ubicacion"] == bk_tc_Ubicacion))
                {
                    ChangeTracker.OriginalValues.Remove("bk_tc_Ubicacion");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("bk_tc_Ubicacion", previousValue);
                }
                if (bk_tc_Ubicacion != null && !bk_tc_Ubicacion.ChangeTracker.ChangeTrackingEnabled)
                {
                    bk_tc_Ubicacion.StartTracking();
                }
            }
        }
    
        private void Fixupbk_te_Cotizacion(Cotizacion previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.bk_te_IncASAreaFuego.Contains(this))
            {
                previousValue.bk_te_IncASAreaFuego.Remove(this);
            }
    
            if (bk_te_Cotizacion != null)
            {
                if (!bk_te_Cotizacion.bk_te_IncASAreaFuego.Contains(this))
                {
                    bk_te_Cotizacion.bk_te_IncASAreaFuego.Add(this);
                }
    
                CotizacionID = bk_te_Cotizacion.CotizacionID;
            }
            else if (!skipKeys)
            {
                CotizacionID = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("bk_te_Cotizacion")
                    && (ChangeTracker.OriginalValues["bk_te_Cotizacion"] == bk_te_Cotizacion))
                {
                    ChangeTracker.OriginalValues.Remove("bk_te_Cotizacion");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("bk_te_Cotizacion", previousValue);
                }
                if (bk_te_Cotizacion != null && !bk_te_Cotizacion.ChangeTracker.ChangeTrackingEnabled)
                {
                    bk_te_Cotizacion.StartTracking();
                }
            }
        }

        #endregion

    }
}
