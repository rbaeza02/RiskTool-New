//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

#pragma warning disable 1591 // this is for supress no xml comments in public members warnings 

using Domain.Core.Entities;

namespace Domain.MainModule.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Asegurado))]
    [KnownType(typeof(Sucursal))]
    [KnownType(typeof(Rol))]
    [KnownType(typeof(UsuarioSubLinea))]
    [KnownType(typeof(CotizacionLog))]
    [KnownType(typeof(Cotizacion))]
    [System.CodeDom.Compiler.GeneratedCode("STE-EF",".NET 4.0")]
    #if !SILVERLIGHT
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
    #endif
    public partial class Usuario: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int UsuarioID
        {
            get { return _usuarioID; }
            set
            {
                if (_usuarioID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'UsuarioID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _usuarioID = value;
                    OnPropertyChanged("UsuarioID");
                }
            }
        }
        private int _usuarioID;
    
        [DataMember]
        public string NombreUsuario
        {
            get { return _nombreUsuario; }
            set
            {
                if (_nombreUsuario != value)
                {
                    _nombreUsuario = value;
                    OnPropertyChanged("NombreUsuario");
                }
            }
        }
        private string _nombreUsuario;
    
        [DataMember]
        public string Nombre
        {
            get { return _nombre; }
            set
            {
                if (_nombre != value)
                {
                    _nombre = value;
                    OnPropertyChanged("Nombre");
                }
            }
        }
        private string _nombre;
    
        [DataMember]
        public string email
        {
            get { return _email; }
            set
            {
                if (_email != value)
                {
                    _email = value;
                    OnPropertyChanged("email");
                }
            }
        }
        private string _email;
    
        [DataMember]
        public string Contraseña
        {
            get { return _contraseña; }
            set
            {
                if (_contraseña != value)
                {
                    _contraseña = value;
                    OnPropertyChanged("Contraseña");
                }
            }
        }
        private string _contraseña;
    
        [DataMember]
        public string VCode
        {
            get { return _vCode; }
            set
            {
                if (_vCode != value)
                {
                    _vCode = value;
                    OnPropertyChanged("VCode");
                }
            }
        }
        private string _vCode;
    
        [DataMember]
        public Nullable<bool> isActivo
        {
            get { return _isActivo; }
            set
            {
                if (_isActivo != value)
                {
                    _isActivo = value;
                    OnPropertyChanged("isActivo");
                }
            }
        }
        private Nullable<bool> _isActivo;
    
        [DataMember]
        public int SucursalID
        {
            get { return _sucursalID; }
            set
            {
                if (_sucursalID != value)
                {
                    ChangeTracker.RecordOriginalValue("SucursalID", _sucursalID);
                    if (!IsDeserializing)
                    {
                        if (bk_tc_Sucursal != null && bk_tc_Sucursal.SucursalID != value)
                        {
                            bk_tc_Sucursal = null;
                        }
                    }
                    _sucursalID = value;
                    OnPropertyChanged("SucursalID");
                }
            }
        }
        private int _sucursalID;
    
        [DataMember]
        public string Apellido
        {
            get { return _apellido; }
            set
            {
                if (_apellido != value)
                {
                    _apellido = value;
                    OnPropertyChanged("Apellido");
                }
            }
        }
        private string _apellido;
    
        [DataMember]
        public Nullable<int> rolID
        {
            get { return _rolID; }
            set
            {
                if (_rolID != value)
                {
                    ChangeTracker.RecordOriginalValue("rolID", _rolID);
                    if (!IsDeserializing)
                    {
                        if (bk_tc_Rol != null && bk_tc_Rol.rolID != value)
                        {
                            bk_tc_Rol = null;
                        }
                    }
                    _rolID = value;
                    OnPropertyChanged("rolID");
                }
            }
        }
        private Nullable<int> _rolID;
    
        [DataMember]
        public string SISEcod_sus
        {
            get { return _sISEcod_sus; }
            set
            {
                if (_sISEcod_sus != value)
                {
                    _sISEcod_sus = value;
                    OnPropertyChanged("SISEcod_sus");
                }
            }
        }
        private string _sISEcod_sus;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<Asegurado> bk_tc_Asegurado
        {
            get
            {
                if (_bk_tc_Asegurado == null)
                {
                    _bk_tc_Asegurado = new TrackableCollection<Asegurado>();
                    _bk_tc_Asegurado.CollectionChanged += Fixupbk_tc_Asegurado;
                }
                return _bk_tc_Asegurado;
            }
            set
            {
                if (!ReferenceEquals(_bk_tc_Asegurado, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_bk_tc_Asegurado != null)
                    {
                        _bk_tc_Asegurado.CollectionChanged -= Fixupbk_tc_Asegurado;
                    }
                    _bk_tc_Asegurado = value;
                    if (_bk_tc_Asegurado != null)
                    {
                        _bk_tc_Asegurado.CollectionChanged += Fixupbk_tc_Asegurado;
                    }
                    OnNavigationPropertyChanged("bk_tc_Asegurado");
                }
            }
        }
        private TrackableCollection<Asegurado> _bk_tc_Asegurado;
    
        [DataMember]
        public Sucursal bk_tc_Sucursal
        {
            get { return _bk_tc_Sucursal; }
            set
            {
                if (!ReferenceEquals(_bk_tc_Sucursal, value))
                {
                    var previousValue = _bk_tc_Sucursal;
                    _bk_tc_Sucursal = value;
                    Fixupbk_tc_Sucursal(previousValue);
                    OnNavigationPropertyChanged("bk_tc_Sucursal");
                }
            }
        }
        private Sucursal _bk_tc_Sucursal;
    
        [DataMember]
        public Rol bk_tc_Rol
        {
            get { return _bk_tc_Rol; }
            set
            {
                if (!ReferenceEquals(_bk_tc_Rol, value))
                {
                    var previousValue = _bk_tc_Rol;
                    _bk_tc_Rol = value;
                    Fixupbk_tc_Rol(previousValue);
                    OnNavigationPropertyChanged("bk_tc_Rol");
                }
            }
        }
        private Rol _bk_tc_Rol;
    
        [DataMember]
        public TrackableCollection<UsuarioSubLinea> bk_tr_UsuarioSubLinea
        {
            get
            {
                if (_bk_tr_UsuarioSubLinea == null)
                {
                    _bk_tr_UsuarioSubLinea = new TrackableCollection<UsuarioSubLinea>();
                    _bk_tr_UsuarioSubLinea.CollectionChanged += Fixupbk_tr_UsuarioSubLinea;
                }
                return _bk_tr_UsuarioSubLinea;
            }
            set
            {
                if (!ReferenceEquals(_bk_tr_UsuarioSubLinea, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_bk_tr_UsuarioSubLinea != null)
                    {
                        _bk_tr_UsuarioSubLinea.CollectionChanged -= Fixupbk_tr_UsuarioSubLinea;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (UsuarioSubLinea item in _bk_tr_UsuarioSubLinea)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _bk_tr_UsuarioSubLinea = value;
                    if (_bk_tr_UsuarioSubLinea != null)
                    {
                        _bk_tr_UsuarioSubLinea.CollectionChanged += Fixupbk_tr_UsuarioSubLinea;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (UsuarioSubLinea item in _bk_tr_UsuarioSubLinea)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("bk_tr_UsuarioSubLinea");
                }
            }
        }
        private TrackableCollection<UsuarioSubLinea> _bk_tr_UsuarioSubLinea;
    
        [DataMember]
        public TrackableCollection<CotizacionLog> bk_te_CotizacionLog
        {
            get
            {
                if (_bk_te_CotizacionLog == null)
                {
                    _bk_te_CotizacionLog = new TrackableCollection<CotizacionLog>();
                    _bk_te_CotizacionLog.CollectionChanged += Fixupbk_te_CotizacionLog;
                }
                return _bk_te_CotizacionLog;
            }
            set
            {
                if (!ReferenceEquals(_bk_te_CotizacionLog, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_bk_te_CotizacionLog != null)
                    {
                        _bk_te_CotizacionLog.CollectionChanged -= Fixupbk_te_CotizacionLog;
                    }
                    _bk_te_CotizacionLog = value;
                    if (_bk_te_CotizacionLog != null)
                    {
                        _bk_te_CotizacionLog.CollectionChanged += Fixupbk_te_CotizacionLog;
                    }
                    OnNavigationPropertyChanged("bk_te_CotizacionLog");
                }
            }
        }
        private TrackableCollection<CotizacionLog> _bk_te_CotizacionLog;
    
        [DataMember]
        public TrackableCollection<Cotizacion> bk_te_Cotizacion
        {
            get
            {
                if (_bk_te_Cotizacion == null)
                {
                    _bk_te_Cotizacion = new TrackableCollection<Cotizacion>();
                    _bk_te_Cotizacion.CollectionChanged += Fixupbk_te_Cotizacion;
                }
                return _bk_te_Cotizacion;
            }
            set
            {
                if (!ReferenceEquals(_bk_te_Cotizacion, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_bk_te_Cotizacion != null)
                    {
                        _bk_te_Cotizacion.CollectionChanged -= Fixupbk_te_Cotizacion;
                    }
                    _bk_te_Cotizacion = value;
                    if (_bk_te_Cotizacion != null)
                    {
                        _bk_te_Cotizacion.CollectionChanged += Fixupbk_te_Cotizacion;
                    }
                    OnNavigationPropertyChanged("bk_te_Cotizacion");
                }
            }
        }
        private TrackableCollection<Cotizacion> _bk_te_Cotizacion;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            bk_tc_Asegurado.Clear();
            bk_tc_Sucursal = null;
            bk_tc_Rol = null;
            bk_tr_UsuarioSubLinea.Clear();
            bk_te_CotizacionLog.Clear();
            bk_te_Cotizacion.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void Fixupbk_tc_Sucursal(Sucursal previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.bk_tc_Usuario.Contains(this))
            {
                previousValue.bk_tc_Usuario.Remove(this);
            }
    
            if (bk_tc_Sucursal != null)
            {
                if (!bk_tc_Sucursal.bk_tc_Usuario.Contains(this))
                {
                    bk_tc_Sucursal.bk_tc_Usuario.Add(this);
                }
    
                SucursalID = bk_tc_Sucursal.SucursalID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("bk_tc_Sucursal")
                    && (ChangeTracker.OriginalValues["bk_tc_Sucursal"] == bk_tc_Sucursal))
                {
                    ChangeTracker.OriginalValues.Remove("bk_tc_Sucursal");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("bk_tc_Sucursal", previousValue);
                }
                if (bk_tc_Sucursal != null && !bk_tc_Sucursal.ChangeTracker.ChangeTrackingEnabled)
                {
                    bk_tc_Sucursal.StartTracking();
                }
            }
        }
    
        private void Fixupbk_tc_Rol(Rol previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.bk_tc_Usuario.Contains(this))
            {
                previousValue.bk_tc_Usuario.Remove(this);
            }
    
            if (bk_tc_Rol != null)
            {
                if (!bk_tc_Rol.bk_tc_Usuario.Contains(this))
                {
                    bk_tc_Rol.bk_tc_Usuario.Add(this);
                }
    
                rolID = bk_tc_Rol.rolID;
            }
            else if (!skipKeys)
            {
                rolID = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("bk_tc_Rol")
                    && (ChangeTracker.OriginalValues["bk_tc_Rol"] == bk_tc_Rol))
                {
                    ChangeTracker.OriginalValues.Remove("bk_tc_Rol");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("bk_tc_Rol", previousValue);
                }
                if (bk_tc_Rol != null && !bk_tc_Rol.ChangeTracker.ChangeTrackingEnabled)
                {
                    bk_tc_Rol.StartTracking();
                }
            }
        }
    
        private void Fixupbk_tc_Asegurado(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Asegurado item in e.NewItems)
                {
                    item.bk_tc_Usuario = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("bk_tc_Asegurado", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Asegurado item in e.OldItems)
                {
                    if (ReferenceEquals(item.bk_tc_Usuario, this))
                    {
                        item.bk_tc_Usuario = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("bk_tc_Asegurado", item);
                    }
                }
            }
        }
    
        private void Fixupbk_tr_UsuarioSubLinea(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (UsuarioSubLinea item in e.NewItems)
                {
                    item.bk_tc_Usuario = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("bk_tr_UsuarioSubLinea", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (UsuarioSubLinea item in e.OldItems)
                {
                    if (ReferenceEquals(item.bk_tc_Usuario, this))
                    {
                        item.bk_tc_Usuario = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("bk_tr_UsuarioSubLinea", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void Fixupbk_te_CotizacionLog(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CotizacionLog item in e.NewItems)
                {
                    item.bk_tc_Usuario = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("bk_te_CotizacionLog", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CotizacionLog item in e.OldItems)
                {
                    if (ReferenceEquals(item.bk_tc_Usuario, this))
                    {
                        item.bk_tc_Usuario = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("bk_te_CotizacionLog", item);
                    }
                }
            }
        }
    
        private void Fixupbk_te_Cotizacion(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Cotizacion item in e.NewItems)
                {
                    item.bk_tc_Usuario = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("bk_te_Cotizacion", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Cotizacion item in e.OldItems)
                {
                    if (ReferenceEquals(item.bk_tc_Usuario, this))
                    {
                        item.bk_tc_Usuario = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("bk_te_Cotizacion", item);
                    }
                }
            }
        }

        #endregion

    }
}
