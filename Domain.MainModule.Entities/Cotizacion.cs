//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

#pragma warning disable 1591 // this is for supress no xml comments in public members warnings 

using Domain.Core.Entities;

namespace Domain.MainModule.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Asegurado))]
    [KnownType(typeof(Contacto))]
    [KnownType(typeof(CotizacionEqElec))]
    [KnownType(typeof(CotizacionRCEqContratista))]
    [KnownType(typeof(CotizacionEqElecPortExt))]
    [KnownType(typeof(CotizacionEqElecCostoOper))]
    [KnownType(typeof(CotizacionEqElecMovil))]
    [KnownType(typeof(CotizacionRCTrabajoTerm))]
    [KnownType(typeof(CotizacionUbicacion))]
    [KnownType(typeof(CotizacionRCTaller))]
    [KnownType(typeof(CotizacionRCEstacionamiento))]
    [KnownType(typeof(CotizacionCristal))]
    [KnownType(typeof(CotizacionRCProductoExtPais))]
    [KnownType(typeof(CotizacionAnuncio))]
    [KnownType(typeof(CotizacionRobo))]
    [KnownType(typeof(CotizacionDinVal))]
    [KnownType(typeof(CotizacionCaldera))]
    [KnownType(typeof(CotizacionCalderaPC))]
    [KnownType(typeof(CotizacionRotMaq))]
    [KnownType(typeof(CotizacionRCRecall))]
    [KnownType(typeof(CotizacionRotMaqPC))]
    [KnownType(typeof(CotizacionEqContratista))]
    [KnownType(typeof(CotizacionLog))]
    [KnownType(typeof(FormaPago))]
    [KnownType(typeof(Moneda))]
    [KnownType(typeof(TipoOperacion))]
    [KnownType(typeof(Usuario))]
    [KnownType(typeof(IncASAreaFuego))]
    [KnownType(typeof(IncAS))]
    [KnownType(typeof(IncGeneralInf))]
    [KnownType(typeof(IncCOPE))]
    [KnownType(typeof(LazCasualty))]
    [KnownType(typeof(CotizacionTipoCobertura))]
    [KnownType(typeof(CotizacionCoberturaUbi))]
    [KnownType(typeof(CotizacionSubLineaUbi))]
    [KnownType(typeof(CotizacionSubLineaNegocio))]
    [KnownType(typeof(CotizacionDeducible))]
    [KnownType(typeof(EqContratistaEquipo))]
    [KnownType(typeof(CotizacionTransConceptoEvaluacion))]
    [KnownType(typeof(CotizacionPagador))]
    [KnownType(typeof(CotizacionRCProductoExt))]
    [KnownType(typeof(CotizacionRCProductoExtResultado))]
    [KnownType(typeof(CotizacionRCHoteleria))]
    [KnownType(typeof(CotizacionRCVehiculoExc))]
    [KnownType(typeof(CotizacionRCConstruccion))]
    [KnownType(typeof(CotizacionRCActInm))]
    [KnownType(typeof(CotizacionTrans))]
    [KnownType(typeof(CotizacionRCAdicional))]
    [System.CodeDom.Compiler.GeneratedCode("STE-EF",".NET 4.0")]
    #if !SILVERLIGHT
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
    #endif
    public partial class Cotizacion: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int CotizacionID
        {
            get { return _cotizacionID; }
            set
            {
                if (_cotizacionID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'CotizacionID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _cotizacionID = value;
                    OnPropertyChanged("CotizacionID");
                }
            }
        }
        private int _cotizacionID;
    
        [DataMember]
        public int AseguradoID
        {
            get { return _aseguradoID; }
            set
            {
                if (_aseguradoID != value)
                {
                    ChangeTracker.RecordOriginalValue("AseguradoID", _aseguradoID);
                    if (!IsDeserializing)
                    {
                        if (bk_tc_Asegurado != null && bk_tc_Asegurado.AseguradoID != value)
                        {
                            bk_tc_Asegurado = null;
                        }
                    }
                    _aseguradoID = value;
                    OnPropertyChanged("AseguradoID");
                }
            }
        }
        private int _aseguradoID;
    
        [DataMember]
        public System.DateTime Fecha
        {
            get { return _fecha; }
            set
            {
                if (_fecha != value)
                {
                    _fecha = value;
                    OnPropertyChanged("Fecha");
                }
            }
        }
        private System.DateTime _fecha;
    
        [DataMember]
        public System.DateTime VigenciaInicio
        {
            get { return _vigenciaInicio; }
            set
            {
                if (_vigenciaInicio != value)
                {
                    _vigenciaInicio = value;
                    OnPropertyChanged("VigenciaInicio");
                }
            }
        }
        private System.DateTime _vigenciaInicio;
    
        [DataMember]
        public System.DateTime VigenciaFin
        {
            get { return _vigenciaFin; }
            set
            {
                if (_vigenciaFin != value)
                {
                    _vigenciaFin = value;
                    OnPropertyChanged("VigenciaFin");
                }
            }
        }
        private System.DateTime _vigenciaFin;
    
        [DataMember]
        public bool isNew
        {
            get { return _isNew; }
            set
            {
                if (_isNew != value)
                {
                    _isNew = value;
                    OnPropertyChanged("isNew");
                }
            }
        }
        private bool _isNew;
    
        [DataMember]
        public Nullable<int> nroPolizaAnt
        {
            get { return _nroPolizaAnt; }
            set
            {
                if (_nroPolizaAnt != value)
                {
                    _nroPolizaAnt = value;
                    OnPropertyChanged("nroPolizaAnt");
                }
            }
        }
        private Nullable<int> _nroPolizaAnt;
    
        [DataMember]
        public int FormaPagoID
        {
            get { return _formaPagoID; }
            set
            {
                if (_formaPagoID != value)
                {
                    ChangeTracker.RecordOriginalValue("FormaPagoID", _formaPagoID);
                    if (!IsDeserializing)
                    {
                        if (bk_tc_FormaPago != null && bk_tc_FormaPago.FormaPagoID != value)
                        {
                            bk_tc_FormaPago = null;
                        }
                    }
                    _formaPagoID = value;
                    OnPropertyChanged("FormaPagoID");
                }
            }
        }
        private int _formaPagoID;
    
        [DataMember]
        public int MonedaID
        {
            get { return _monedaID; }
            set
            {
                if (_monedaID != value)
                {
                    ChangeTracker.RecordOriginalValue("MonedaID", _monedaID);
                    if (!IsDeserializing)
                    {
                        if (bk_tc_Moneda != null && bk_tc_Moneda.MonedaID != value)
                        {
                            bk_tc_Moneda = null;
                        }
                    }
                    _monedaID = value;
                    OnPropertyChanged("MonedaID");
                }
            }
        }
        private int _monedaID;
    
        [DataMember]
        public Nullable<double> TipoCambio
        {
            get { return _tipoCambio; }
            set
            {
                if (_tipoCambio != value)
                {
                    _tipoCambio = value;
                    OnPropertyChanged("TipoCambio");
                }
            }
        }
        private Nullable<double> _tipoCambio;
    
        [DataMember]
        public double GastosAdquisicion
        {
            get { return _gastosAdquisicion; }
            set
            {
                if (_gastosAdquisicion != value)
                {
                    _gastosAdquisicion = value;
                    OnPropertyChanged("GastosAdquisicion");
                }
            }
        }
        private double _gastosAdquisicion;
    
        [DataMember]
        public double GastosAdministracion
        {
            get { return _gastosAdministracion; }
            set
            {
                if (_gastosAdministracion != value)
                {
                    _gastosAdministracion = value;
                    OnPropertyChanged("GastosAdministracion");
                }
            }
        }
        private double _gastosAdministracion;
    
        [DataMember]
        public double Utilidad
        {
            get { return _utilidad; }
            set
            {
                if (_utilidad != value)
                {
                    _utilidad = value;
                    OnPropertyChanged("Utilidad");
                }
            }
        }
        private double _utilidad;
    
        [DataMember]
        public double Comision
        {
            get { return _comision; }
            set
            {
                if (_comision != value)
                {
                    _comision = value;
                    OnPropertyChanged("Comision");
                }
            }
        }
        private double _comision;
    
        [DataMember]
        public int usuarioid
        {
            get { return _usuarioid; }
            set
            {
                if (_usuarioid != value)
                {
                    ChangeTracker.RecordOriginalValue("usuarioid", _usuarioid);
                    if (!IsDeserializing)
                    {
                        if (bk_tc_Usuario != null && bk_tc_Usuario.UsuarioID != value)
                        {
                            bk_tc_Usuario = null;
                        }
                    }
                    _usuarioid = value;
                    OnPropertyChanged("usuarioid");
                }
            }
        }
        private int _usuarioid;
    
        [DataMember]
        public Nullable<int> TipoOperacionID
        {
            get { return _tipoOperacionID; }
            set
            {
                if (_tipoOperacionID != value)
                {
                    ChangeTracker.RecordOriginalValue("TipoOperacionID", _tipoOperacionID);
                    if (!IsDeserializing)
                    {
                        if (bk_tc_TipoOperacion != null && bk_tc_TipoOperacion.TipoOperacionID != value)
                        {
                            bk_tc_TipoOperacion = null;
                        }
                    }
                    _tipoOperacionID = value;
                    OnPropertyChanged("TipoOperacionID");
                }
            }
        }
        private Nullable<int> _tipoOperacionID;
    
        [DataMember]
        public Nullable<double> Participacion
        {
            get { return _participacion; }
            set
            {
                if (_participacion != value)
                {
                    _participacion = value;
                    OnPropertyChanged("Participacion");
                }
            }
        }
        private Nullable<double> _participacion;
    
        [DataMember]
        public Nullable<int> ContactoID
        {
            get { return _contactoID; }
            set
            {
                if (_contactoID != value)
                {
                    ChangeTracker.RecordOriginalValue("ContactoID", _contactoID);
                    if (!IsDeserializing)
                    {
                        if (bk_tc_Contacto != null && bk_tc_Contacto.ContactoID != value)
                        {
                            bk_tc_Contacto = null;
                        }
                    }
                    _contactoID = value;
                    OnPropertyChanged("ContactoID");
                }
            }
        }
        private Nullable<int> _contactoID;
    
        [DataMember]
        public Nullable<double> LimitPrimerRiesgo
        {
            get { return _limitPrimerRiesgo; }
            set
            {
                if (_limitPrimerRiesgo != value)
                {
                    _limitPrimerRiesgo = value;
                    OnPropertyChanged("LimitPrimerRiesgo");
                }
            }
        }
        private Nullable<double> _limitPrimerRiesgo;
    
        [DataMember]
        public Nullable<decimal> Inflacion
        {
            get { return _inflacion; }
            set
            {
                if (_inflacion != value)
                {
                    _inflacion = value;
                    OnPropertyChanged("Inflacion");
                }
            }
        }
        private Nullable<decimal> _inflacion;
    
        [DataMember]
        public Nullable<double> pctPrimerRiesgo
        {
            get { return _pctPrimerRiesgo; }
            set
            {
                if (_pctPrimerRiesgo != value)
                {
                    _pctPrimerRiesgo = value;
                    OnPropertyChanged("pctPrimerRiesgo");
                }
            }
        }
        private Nullable<double> _pctPrimerRiesgo;
    
        [DataMember]
        public Nullable<double> primaTotal
        {
            get { return _primaTotal; }
            set
            {
                if (_primaTotal != value)
                {
                    _primaTotal = value;
                    OnPropertyChanged("primaTotal");
                }
            }
        }
        private Nullable<double> _primaTotal;
    
        [DataMember]
        public Nullable<double> PrimaNeta
        {
            get { return _primaNeta; }
            set
            {
                if (_primaNeta != value)
                {
                    _primaNeta = value;
                    OnPropertyChanged("PrimaNeta");
                }
            }
        }
        private Nullable<double> _primaNeta;
    
        [DataMember]
        public Nullable<double> Recargo
        {
            get { return _recargo; }
            set
            {
                if (_recargo != value)
                {
                    _recargo = value;
                    OnPropertyChanged("Recargo");
                }
            }
        }
        private Nullable<double> _recargo;
    
        [DataMember]
        public Nullable<double> Derecho
        {
            get { return _derecho; }
            set
            {
                if (_derecho != value)
                {
                    _derecho = value;
                    OnPropertyChanged("Derecho");
                }
            }
        }
        private Nullable<double> _derecho;
    
        [DataMember]
        public Nullable<double> SumaAseguradaTotal
        {
            get { return _sumaAseguradaTotal; }
            set
            {
                if (_sumaAseguradaTotal != value)
                {
                    _sumaAseguradaTotal = value;
                    OnPropertyChanged("SumaAseguradaTotal");
                }
            }
        }
        private Nullable<double> _sumaAseguradaTotal;
    
        [DataMember]
        public Nullable<double> IVA
        {
            get { return _iVA; }
            set
            {
                if (_iVA != value)
                {
                    _iVA = value;
                    OnPropertyChanged("IVA");
                }
            }
        }
        private Nullable<double> _iVA;
    
        [DataMember]
        public Nullable<double> ValorAsegurableTotal
        {
            get { return _valorAsegurableTotal; }
            set
            {
                if (_valorAsegurableTotal != value)
                {
                    _valorAsegurableTotal = value;
                    OnPropertyChanged("ValorAsegurableTotal");
                }
            }
        }
        private Nullable<double> _valorAsegurableTotal;
    
        [DataMember]
        public bool isActivo
        {
            get { return _isActivo; }
            set
            {
                if (_isActivo != value)
                {
                    _isActivo = value;
                    OnPropertyChanged("isActivo");
                }
            }
        }
        private bool _isActivo;
    
        [DataMember]
        public Nullable<double> OtrosGastosAdq
        {
            get { return _otrosGastosAdq; }
            set
            {
                if (_otrosGastosAdq != value)
                {
                    _otrosGastosAdq = value;
                    OnPropertyChanged("OtrosGastosAdq");
                }
            }
        }
        private Nullable<double> _otrosGastosAdq;
    
        [DataMember]
        public Nullable<double> primaNetaAnual
        {
            get { return _primaNetaAnual; }
            set
            {
                if (_primaNetaAnual != value)
                {
                    _primaNetaAnual = value;
                    OnPropertyChanged("primaNetaAnual");
                }
            }
        }
        private Nullable<double> _primaNetaAnual;
    
        [DataMember]
        public Nullable<int> nroPoliza
        {
            get { return _nroPoliza; }
            set
            {
                if (_nroPoliza != value)
                {
                    _nroPoliza = value;
                    OnPropertyChanged("nroPoliza");
                }
            }
        }
        private Nullable<int> _nroPoliza;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public Asegurado bk_tc_Asegurado
        {
            get { return _bk_tc_Asegurado; }
            set
            {
                if (!ReferenceEquals(_bk_tc_Asegurado, value))
                {
                    var previousValue = _bk_tc_Asegurado;
                    _bk_tc_Asegurado = value;
                    Fixupbk_tc_Asegurado(previousValue);
                    OnNavigationPropertyChanged("bk_tc_Asegurado");
                }
            }
        }
        private Asegurado _bk_tc_Asegurado;
    
        [DataMember]
        public Contacto bk_tc_Contacto
        {
            get { return _bk_tc_Contacto; }
            set
            {
                if (!ReferenceEquals(_bk_tc_Contacto, value))
                {
                    var previousValue = _bk_tc_Contacto;
                    _bk_tc_Contacto = value;
                    Fixupbk_tc_Contacto(previousValue);
                    OnNavigationPropertyChanged("bk_tc_Contacto");
                }
            }
        }
        private Contacto _bk_tc_Contacto;
    
        [DataMember]
        public CotizacionEqElec bk_te_CotizacionEqElec
        {
            get { return _bk_te_CotizacionEqElec; }
            set
            {
                if (!ReferenceEquals(_bk_te_CotizacionEqElec, value))
                {
                    var previousValue = _bk_te_CotizacionEqElec;
                    _bk_te_CotizacionEqElec = value;
                    Fixupbk_te_CotizacionEqElec(previousValue);
                    OnNavigationPropertyChanged("bk_te_CotizacionEqElec");
                }
            }
        }
        private CotizacionEqElec _bk_te_CotizacionEqElec;
    
        [DataMember]
        public CotizacionRCEqContratista bk_te_CotizacionRCEqContratista
        {
            get { return _bk_te_CotizacionRCEqContratista; }
            set
            {
                if (!ReferenceEquals(_bk_te_CotizacionRCEqContratista, value))
                {
                    var previousValue = _bk_te_CotizacionRCEqContratista;
                    _bk_te_CotizacionRCEqContratista = value;
                    Fixupbk_te_CotizacionRCEqContratista(previousValue);
                    OnNavigationPropertyChanged("bk_te_CotizacionRCEqContratista");
                }
            }
        }
        private CotizacionRCEqContratista _bk_te_CotizacionRCEqContratista;
    
        [DataMember]
        public CotizacionEqElecPortExt bk_te_CotizacionEqElecPortExt
        {
            get { return _bk_te_CotizacionEqElecPortExt; }
            set
            {
                if (!ReferenceEquals(_bk_te_CotizacionEqElecPortExt, value))
                {
                    var previousValue = _bk_te_CotizacionEqElecPortExt;
                    _bk_te_CotizacionEqElecPortExt = value;
                    Fixupbk_te_CotizacionEqElecPortExt(previousValue);
                    OnNavigationPropertyChanged("bk_te_CotizacionEqElecPortExt");
                }
            }
        }
        private CotizacionEqElecPortExt _bk_te_CotizacionEqElecPortExt;
    
        [DataMember]
        public CotizacionEqElecCostoOper bk_te_CotizacionEqElecCostoOper
        {
            get { return _bk_te_CotizacionEqElecCostoOper; }
            set
            {
                if (!ReferenceEquals(_bk_te_CotizacionEqElecCostoOper, value))
                {
                    var previousValue = _bk_te_CotizacionEqElecCostoOper;
                    _bk_te_CotizacionEqElecCostoOper = value;
                    Fixupbk_te_CotizacionEqElecCostoOper(previousValue);
                    OnNavigationPropertyChanged("bk_te_CotizacionEqElecCostoOper");
                }
            }
        }
        private CotizacionEqElecCostoOper _bk_te_CotizacionEqElecCostoOper;
    
        [DataMember]
        public CotizacionEqElecMovil bk_te_CotizacionEqElecMovil
        {
            get { return _bk_te_CotizacionEqElecMovil; }
            set
            {
                if (!ReferenceEquals(_bk_te_CotizacionEqElecMovil, value))
                {
                    var previousValue = _bk_te_CotizacionEqElecMovil;
                    _bk_te_CotizacionEqElecMovil = value;
                    Fixupbk_te_CotizacionEqElecMovil(previousValue);
                    OnNavigationPropertyChanged("bk_te_CotizacionEqElecMovil");
                }
            }
        }
        private CotizacionEqElecMovil _bk_te_CotizacionEqElecMovil;
    
        [DataMember]
        public CotizacionRCTrabajoTerm bk_te_CotizacionRCTrabajoTerm
        {
            get { return _bk_te_CotizacionRCTrabajoTerm; }
            set
            {
                if (!ReferenceEquals(_bk_te_CotizacionRCTrabajoTerm, value))
                {
                    var previousValue = _bk_te_CotizacionRCTrabajoTerm;
                    _bk_te_CotizacionRCTrabajoTerm = value;
                    Fixupbk_te_CotizacionRCTrabajoTerm(previousValue);
                    OnNavigationPropertyChanged("bk_te_CotizacionRCTrabajoTerm");
                }
            }
        }
        private CotizacionRCTrabajoTerm _bk_te_CotizacionRCTrabajoTerm;
    
        [DataMember]
        public TrackableCollection<CotizacionUbicacion> bk_te_CotizacionUbicacion
        {
            get
            {
                if (_bk_te_CotizacionUbicacion == null)
                {
                    _bk_te_CotizacionUbicacion = new TrackableCollection<CotizacionUbicacion>();
                    _bk_te_CotizacionUbicacion.CollectionChanged += Fixupbk_te_CotizacionUbicacion;
                }
                return _bk_te_CotizacionUbicacion;
            }
            set
            {
                if (!ReferenceEquals(_bk_te_CotizacionUbicacion, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_bk_te_CotizacionUbicacion != null)
                    {
                        _bk_te_CotizacionUbicacion.CollectionChanged -= Fixupbk_te_CotizacionUbicacion;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (CotizacionUbicacion item in _bk_te_CotizacionUbicacion)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _bk_te_CotizacionUbicacion = value;
                    if (_bk_te_CotizacionUbicacion != null)
                    {
                        _bk_te_CotizacionUbicacion.CollectionChanged += Fixupbk_te_CotizacionUbicacion;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (CotizacionUbicacion item in _bk_te_CotizacionUbicacion)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("bk_te_CotizacionUbicacion");
                }
            }
        }
        private TrackableCollection<CotizacionUbicacion> _bk_te_CotizacionUbicacion;
    
        [DataMember]
        public CotizacionRCTaller bk_te_CotizacionRCTaller
        {
            get { return _bk_te_CotizacionRCTaller; }
            set
            {
                if (!ReferenceEquals(_bk_te_CotizacionRCTaller, value))
                {
                    var previousValue = _bk_te_CotizacionRCTaller;
                    _bk_te_CotizacionRCTaller = value;
                    Fixupbk_te_CotizacionRCTaller(previousValue);
                    OnNavigationPropertyChanged("bk_te_CotizacionRCTaller");
                }
            }
        }
        private CotizacionRCTaller _bk_te_CotizacionRCTaller;
    
        [DataMember]
        public CotizacionRCEstacionamiento bk_te_CotizacionRCEstacionamiento
        {
            get { return _bk_te_CotizacionRCEstacionamiento; }
            set
            {
                if (!ReferenceEquals(_bk_te_CotizacionRCEstacionamiento, value))
                {
                    var previousValue = _bk_te_CotizacionRCEstacionamiento;
                    _bk_te_CotizacionRCEstacionamiento = value;
                    Fixupbk_te_CotizacionRCEstacionamiento(previousValue);
                    OnNavigationPropertyChanged("bk_te_CotizacionRCEstacionamiento");
                }
            }
        }
        private CotizacionRCEstacionamiento _bk_te_CotizacionRCEstacionamiento;
    
        [DataMember]
        public CotizacionCristal bk_te_CotizacionCristal
        {
            get { return _bk_te_CotizacionCristal; }
            set
            {
                if (!ReferenceEquals(_bk_te_CotizacionCristal, value))
                {
                    var previousValue = _bk_te_CotizacionCristal;
                    _bk_te_CotizacionCristal = value;
                    Fixupbk_te_CotizacionCristal(previousValue);
                    OnNavigationPropertyChanged("bk_te_CotizacionCristal");
                }
            }
        }
        private CotizacionCristal _bk_te_CotizacionCristal;
    
        [DataMember]
        public TrackableCollection<CotizacionRCProductoExtPais> bk_te_CotizacionRCProductoExtPais
        {
            get
            {
                if (_bk_te_CotizacionRCProductoExtPais == null)
                {
                    _bk_te_CotizacionRCProductoExtPais = new TrackableCollection<CotizacionRCProductoExtPais>();
                    _bk_te_CotizacionRCProductoExtPais.CollectionChanged += Fixupbk_te_CotizacionRCProductoExtPais;
                }
                return _bk_te_CotizacionRCProductoExtPais;
            }
            set
            {
                if (!ReferenceEquals(_bk_te_CotizacionRCProductoExtPais, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_bk_te_CotizacionRCProductoExtPais != null)
                    {
                        _bk_te_CotizacionRCProductoExtPais.CollectionChanged -= Fixupbk_te_CotizacionRCProductoExtPais;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (CotizacionRCProductoExtPais item in _bk_te_CotizacionRCProductoExtPais)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _bk_te_CotizacionRCProductoExtPais = value;
                    if (_bk_te_CotizacionRCProductoExtPais != null)
                    {
                        _bk_te_CotizacionRCProductoExtPais.CollectionChanged += Fixupbk_te_CotizacionRCProductoExtPais;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (CotizacionRCProductoExtPais item in _bk_te_CotizacionRCProductoExtPais)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("bk_te_CotizacionRCProductoExtPais");
                }
            }
        }
        private TrackableCollection<CotizacionRCProductoExtPais> _bk_te_CotizacionRCProductoExtPais;
    
        [DataMember]
        public CotizacionAnuncio bk_te_CotizacionAnuncio
        {
            get { return _bk_te_CotizacionAnuncio; }
            set
            {
                if (!ReferenceEquals(_bk_te_CotizacionAnuncio, value))
                {
                    var previousValue = _bk_te_CotizacionAnuncio;
                    _bk_te_CotizacionAnuncio = value;
                    Fixupbk_te_CotizacionAnuncio(previousValue);
                    OnNavigationPropertyChanged("bk_te_CotizacionAnuncio");
                }
            }
        }
        private CotizacionAnuncio _bk_te_CotizacionAnuncio;
    
        [DataMember]
        public CotizacionRobo bk_te_CotizacionRobo
        {
            get { return _bk_te_CotizacionRobo; }
            set
            {
                if (!ReferenceEquals(_bk_te_CotizacionRobo, value))
                {
                    var previousValue = _bk_te_CotizacionRobo;
                    _bk_te_CotizacionRobo = value;
                    Fixupbk_te_CotizacionRobo(previousValue);
                    OnNavigationPropertyChanged("bk_te_CotizacionRobo");
                }
            }
        }
        private CotizacionRobo _bk_te_CotizacionRobo;
    
        [DataMember]
        public CotizacionDinVal bk_te_CotizacionDinVal
        {
            get { return _bk_te_CotizacionDinVal; }
            set
            {
                if (!ReferenceEquals(_bk_te_CotizacionDinVal, value))
                {
                    var previousValue = _bk_te_CotizacionDinVal;
                    _bk_te_CotizacionDinVal = value;
                    Fixupbk_te_CotizacionDinVal(previousValue);
                    OnNavigationPropertyChanged("bk_te_CotizacionDinVal");
                }
            }
        }
        private CotizacionDinVal _bk_te_CotizacionDinVal;
    
        [DataMember]
        public CotizacionCaldera bk_te_CotizacionCaldera
        {
            get { return _bk_te_CotizacionCaldera; }
            set
            {
                if (!ReferenceEquals(_bk_te_CotizacionCaldera, value))
                {
                    var previousValue = _bk_te_CotizacionCaldera;
                    _bk_te_CotizacionCaldera = value;
                    Fixupbk_te_CotizacionCaldera(previousValue);
                    OnNavigationPropertyChanged("bk_te_CotizacionCaldera");
                }
            }
        }
        private CotizacionCaldera _bk_te_CotizacionCaldera;
    
        [DataMember]
        public CotizacionCalderaPC bk_te_CotizacionCalderaPC
        {
            get { return _bk_te_CotizacionCalderaPC; }
            set
            {
                if (!ReferenceEquals(_bk_te_CotizacionCalderaPC, value))
                {
                    var previousValue = _bk_te_CotizacionCalderaPC;
                    _bk_te_CotizacionCalderaPC = value;
                    Fixupbk_te_CotizacionCalderaPC(previousValue);
                    OnNavigationPropertyChanged("bk_te_CotizacionCalderaPC");
                }
            }
        }
        private CotizacionCalderaPC _bk_te_CotizacionCalderaPC;
    
        [DataMember]
        public CotizacionRotMaq bk_te_CotizacionRotMaq
        {
            get { return _bk_te_CotizacionRotMaq; }
            set
            {
                if (!ReferenceEquals(_bk_te_CotizacionRotMaq, value))
                {
                    var previousValue = _bk_te_CotizacionRotMaq;
                    _bk_te_CotizacionRotMaq = value;
                    Fixupbk_te_CotizacionRotMaq(previousValue);
                    OnNavigationPropertyChanged("bk_te_CotizacionRotMaq");
                }
            }
        }
        private CotizacionRotMaq _bk_te_CotizacionRotMaq;
    
        [DataMember]
        public CotizacionRCRecall bk_te_CotizacionRCRecall
        {
            get { return _bk_te_CotizacionRCRecall; }
            set
            {
                if (!ReferenceEquals(_bk_te_CotizacionRCRecall, value))
                {
                    var previousValue = _bk_te_CotizacionRCRecall;
                    _bk_te_CotizacionRCRecall = value;
                    Fixupbk_te_CotizacionRCRecall(previousValue);
                    OnNavigationPropertyChanged("bk_te_CotizacionRCRecall");
                }
            }
        }
        private CotizacionRCRecall _bk_te_CotizacionRCRecall;
    
        [DataMember]
        public CotizacionRotMaqPC bk_te_CotizacionRotMaqPC
        {
            get { return _bk_te_CotizacionRotMaqPC; }
            set
            {
                if (!ReferenceEquals(_bk_te_CotizacionRotMaqPC, value))
                {
                    var previousValue = _bk_te_CotizacionRotMaqPC;
                    _bk_te_CotizacionRotMaqPC = value;
                    Fixupbk_te_CotizacionRotMaqPC(previousValue);
                    OnNavigationPropertyChanged("bk_te_CotizacionRotMaqPC");
                }
            }
        }
        private CotizacionRotMaqPC _bk_te_CotizacionRotMaqPC;
    
        [DataMember]
        public CotizacionEqContratista bk_te_CotizacionEqContratista
        {
            get { return _bk_te_CotizacionEqContratista; }
            set
            {
                if (!ReferenceEquals(_bk_te_CotizacionEqContratista, value))
                {
                    var previousValue = _bk_te_CotizacionEqContratista;
                    _bk_te_CotizacionEqContratista = value;
                    Fixupbk_te_CotizacionEqContratista(previousValue);
                    OnNavigationPropertyChanged("bk_te_CotizacionEqContratista");
                }
            }
        }
        private CotizacionEqContratista _bk_te_CotizacionEqContratista;
    
        [DataMember]
        public TrackableCollection<CotizacionLog> bk_te_CotizacionLog
        {
            get
            {
                if (_bk_te_CotizacionLog == null)
                {
                    _bk_te_CotizacionLog = new TrackableCollection<CotizacionLog>();
                    _bk_te_CotizacionLog.CollectionChanged += Fixupbk_te_CotizacionLog;
                }
                return _bk_te_CotizacionLog;
            }
            set
            {
                if (!ReferenceEquals(_bk_te_CotizacionLog, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_bk_te_CotizacionLog != null)
                    {
                        _bk_te_CotizacionLog.CollectionChanged -= Fixupbk_te_CotizacionLog;
                    }
                    _bk_te_CotizacionLog = value;
                    if (_bk_te_CotizacionLog != null)
                    {
                        _bk_te_CotizacionLog.CollectionChanged += Fixupbk_te_CotizacionLog;
                    }
                    OnNavigationPropertyChanged("bk_te_CotizacionLog");
                }
            }
        }
        private TrackableCollection<CotizacionLog> _bk_te_CotizacionLog;
    
        [DataMember]
        public FormaPago bk_tc_FormaPago
        {
            get { return _bk_tc_FormaPago; }
            set
            {
                if (!ReferenceEquals(_bk_tc_FormaPago, value))
                {
                    var previousValue = _bk_tc_FormaPago;
                    _bk_tc_FormaPago = value;
                    Fixupbk_tc_FormaPago(previousValue);
                    OnNavigationPropertyChanged("bk_tc_FormaPago");
                }
            }
        }
        private FormaPago _bk_tc_FormaPago;
    
        [DataMember]
        public Moneda bk_tc_Moneda
        {
            get { return _bk_tc_Moneda; }
            set
            {
                if (!ReferenceEquals(_bk_tc_Moneda, value))
                {
                    var previousValue = _bk_tc_Moneda;
                    _bk_tc_Moneda = value;
                    Fixupbk_tc_Moneda(previousValue);
                    OnNavigationPropertyChanged("bk_tc_Moneda");
                }
            }
        }
        private Moneda _bk_tc_Moneda;
    
        [DataMember]
        public TipoOperacion bk_tc_TipoOperacion
        {
            get { return _bk_tc_TipoOperacion; }
            set
            {
                if (!ReferenceEquals(_bk_tc_TipoOperacion, value))
                {
                    var previousValue = _bk_tc_TipoOperacion;
                    _bk_tc_TipoOperacion = value;
                    Fixupbk_tc_TipoOperacion(previousValue);
                    OnNavigationPropertyChanged("bk_tc_TipoOperacion");
                }
            }
        }
        private TipoOperacion _bk_tc_TipoOperacion;
    
        [DataMember]
        public Usuario bk_tc_Usuario
        {
            get { return _bk_tc_Usuario; }
            set
            {
                if (!ReferenceEquals(_bk_tc_Usuario, value))
                {
                    var previousValue = _bk_tc_Usuario;
                    _bk_tc_Usuario = value;
                    Fixupbk_tc_Usuario(previousValue);
                    OnNavigationPropertyChanged("bk_tc_Usuario");
                }
            }
        }
        private Usuario _bk_tc_Usuario;
    
        [DataMember]
        public TrackableCollection<IncASAreaFuego> bk_te_IncASAreaFuego
        {
            get
            {
                if (_bk_te_IncASAreaFuego == null)
                {
                    _bk_te_IncASAreaFuego = new TrackableCollection<IncASAreaFuego>();
                    _bk_te_IncASAreaFuego.CollectionChanged += Fixupbk_te_IncASAreaFuego;
                }
                return _bk_te_IncASAreaFuego;
            }
            set
            {
                if (!ReferenceEquals(_bk_te_IncASAreaFuego, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_bk_te_IncASAreaFuego != null)
                    {
                        _bk_te_IncASAreaFuego.CollectionChanged -= Fixupbk_te_IncASAreaFuego;
                    }
                    _bk_te_IncASAreaFuego = value;
                    if (_bk_te_IncASAreaFuego != null)
                    {
                        _bk_te_IncASAreaFuego.CollectionChanged += Fixupbk_te_IncASAreaFuego;
                    }
                    OnNavigationPropertyChanged("bk_te_IncASAreaFuego");
                }
            }
        }
        private TrackableCollection<IncASAreaFuego> _bk_te_IncASAreaFuego;
    
        [DataMember]
        public IncAS bk_te_IncAS
        {
            get { return _bk_te_IncAS; }
            set
            {
                if (!ReferenceEquals(_bk_te_IncAS, value))
                {
                    var previousValue = _bk_te_IncAS;
                    _bk_te_IncAS = value;
                    Fixupbk_te_IncAS(previousValue);
                    OnNavigationPropertyChanged("bk_te_IncAS");
                }
            }
        }
        private IncAS _bk_te_IncAS;
    
        [DataMember]
        public IncGeneralInf bk_te_IncGeneralInf
        {
            get { return _bk_te_IncGeneralInf; }
            set
            {
                if (!ReferenceEquals(_bk_te_IncGeneralInf, value))
                {
                    var previousValue = _bk_te_IncGeneralInf;
                    _bk_te_IncGeneralInf = value;
                    Fixupbk_te_IncGeneralInf(previousValue);
                    OnNavigationPropertyChanged("bk_te_IncGeneralInf");
                }
            }
        }
        private IncGeneralInf _bk_te_IncGeneralInf;
    
        [DataMember]
        public TrackableCollection<IncCOPE> bk_te_IncCOPE
        {
            get
            {
                if (_bk_te_IncCOPE == null)
                {
                    _bk_te_IncCOPE = new TrackableCollection<IncCOPE>();
                    _bk_te_IncCOPE.CollectionChanged += Fixupbk_te_IncCOPE;
                }
                return _bk_te_IncCOPE;
            }
            set
            {
                if (!ReferenceEquals(_bk_te_IncCOPE, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_bk_te_IncCOPE != null)
                    {
                        _bk_te_IncCOPE.CollectionChanged -= Fixupbk_te_IncCOPE;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (IncCOPE item in _bk_te_IncCOPE)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _bk_te_IncCOPE = value;
                    if (_bk_te_IncCOPE != null)
                    {
                        _bk_te_IncCOPE.CollectionChanged += Fixupbk_te_IncCOPE;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (IncCOPE item in _bk_te_IncCOPE)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("bk_te_IncCOPE");
                }
            }
        }
        private TrackableCollection<IncCOPE> _bk_te_IncCOPE;
    
        [DataMember]
        public LazCasualty bk_te_LazCasualty
        {
            get { return _bk_te_LazCasualty; }
            set
            {
                if (!ReferenceEquals(_bk_te_LazCasualty, value))
                {
                    var previousValue = _bk_te_LazCasualty;
                    _bk_te_LazCasualty = value;
                    Fixupbk_te_LazCasualty(previousValue);
                    OnNavigationPropertyChanged("bk_te_LazCasualty");
                }
            }
        }
        private LazCasualty _bk_te_LazCasualty;
    
        [DataMember]
        public TrackableCollection<CotizacionTipoCobertura> bk_tr_CotizacionTipoCobertura
        {
            get
            {
                if (_bk_tr_CotizacionTipoCobertura == null)
                {
                    _bk_tr_CotizacionTipoCobertura = new TrackableCollection<CotizacionTipoCobertura>();
                    _bk_tr_CotizacionTipoCobertura.CollectionChanged += Fixupbk_tr_CotizacionTipoCobertura;
                }
                return _bk_tr_CotizacionTipoCobertura;
            }
            set
            {
                if (!ReferenceEquals(_bk_tr_CotizacionTipoCobertura, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_bk_tr_CotizacionTipoCobertura != null)
                    {
                        _bk_tr_CotizacionTipoCobertura.CollectionChanged -= Fixupbk_tr_CotizacionTipoCobertura;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (CotizacionTipoCobertura item in _bk_tr_CotizacionTipoCobertura)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _bk_tr_CotizacionTipoCobertura = value;
                    if (_bk_tr_CotizacionTipoCobertura != null)
                    {
                        _bk_tr_CotizacionTipoCobertura.CollectionChanged += Fixupbk_tr_CotizacionTipoCobertura;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (CotizacionTipoCobertura item in _bk_tr_CotizacionTipoCobertura)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("bk_tr_CotizacionTipoCobertura");
                }
            }
        }
        private TrackableCollection<CotizacionTipoCobertura> _bk_tr_CotizacionTipoCobertura;
    
        [DataMember]
        public TrackableCollection<CotizacionCoberturaUbi> bk_tr_CotizacionCoberturaUbi
        {
            get
            {
                if (_bk_tr_CotizacionCoberturaUbi == null)
                {
                    _bk_tr_CotizacionCoberturaUbi = new TrackableCollection<CotizacionCoberturaUbi>();
                    _bk_tr_CotizacionCoberturaUbi.CollectionChanged += Fixupbk_tr_CotizacionCoberturaUbi;
                }
                return _bk_tr_CotizacionCoberturaUbi;
            }
            set
            {
                if (!ReferenceEquals(_bk_tr_CotizacionCoberturaUbi, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_bk_tr_CotizacionCoberturaUbi != null)
                    {
                        _bk_tr_CotizacionCoberturaUbi.CollectionChanged -= Fixupbk_tr_CotizacionCoberturaUbi;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (CotizacionCoberturaUbi item in _bk_tr_CotizacionCoberturaUbi)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _bk_tr_CotizacionCoberturaUbi = value;
                    if (_bk_tr_CotizacionCoberturaUbi != null)
                    {
                        _bk_tr_CotizacionCoberturaUbi.CollectionChanged += Fixupbk_tr_CotizacionCoberturaUbi;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (CotizacionCoberturaUbi item in _bk_tr_CotizacionCoberturaUbi)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("bk_tr_CotizacionCoberturaUbi");
                }
            }
        }
        private TrackableCollection<CotizacionCoberturaUbi> _bk_tr_CotizacionCoberturaUbi;
    
        [DataMember]
        public TrackableCollection<CotizacionSubLineaUbi> bk_tr_CotizacionSubLineaUbi
        {
            get
            {
                if (_bk_tr_CotizacionSubLineaUbi == null)
                {
                    _bk_tr_CotizacionSubLineaUbi = new TrackableCollection<CotizacionSubLineaUbi>();
                    _bk_tr_CotizacionSubLineaUbi.CollectionChanged += Fixupbk_tr_CotizacionSubLineaUbi;
                }
                return _bk_tr_CotizacionSubLineaUbi;
            }
            set
            {
                if (!ReferenceEquals(_bk_tr_CotizacionSubLineaUbi, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_bk_tr_CotizacionSubLineaUbi != null)
                    {
                        _bk_tr_CotizacionSubLineaUbi.CollectionChanged -= Fixupbk_tr_CotizacionSubLineaUbi;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (CotizacionSubLineaUbi item in _bk_tr_CotizacionSubLineaUbi)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _bk_tr_CotizacionSubLineaUbi = value;
                    if (_bk_tr_CotizacionSubLineaUbi != null)
                    {
                        _bk_tr_CotizacionSubLineaUbi.CollectionChanged += Fixupbk_tr_CotizacionSubLineaUbi;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (CotizacionSubLineaUbi item in _bk_tr_CotizacionSubLineaUbi)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("bk_tr_CotizacionSubLineaUbi");
                }
            }
        }
        private TrackableCollection<CotizacionSubLineaUbi> _bk_tr_CotizacionSubLineaUbi;
    
        [DataMember]
        public TrackableCollection<CotizacionSubLineaNegocio> bk_tr_CotizacionSubLineaNegocio
        {
            get
            {
                if (_bk_tr_CotizacionSubLineaNegocio == null)
                {
                    _bk_tr_CotizacionSubLineaNegocio = new TrackableCollection<CotizacionSubLineaNegocio>();
                    _bk_tr_CotizacionSubLineaNegocio.CollectionChanged += Fixupbk_tr_CotizacionSubLineaNegocio;
                }
                return _bk_tr_CotizacionSubLineaNegocio;
            }
            set
            {
                if (!ReferenceEquals(_bk_tr_CotizacionSubLineaNegocio, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_bk_tr_CotizacionSubLineaNegocio != null)
                    {
                        _bk_tr_CotizacionSubLineaNegocio.CollectionChanged -= Fixupbk_tr_CotizacionSubLineaNegocio;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (CotizacionSubLineaNegocio item in _bk_tr_CotizacionSubLineaNegocio)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _bk_tr_CotizacionSubLineaNegocio = value;
                    if (_bk_tr_CotizacionSubLineaNegocio != null)
                    {
                        _bk_tr_CotizacionSubLineaNegocio.CollectionChanged += Fixupbk_tr_CotizacionSubLineaNegocio;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (CotizacionSubLineaNegocio item in _bk_tr_CotizacionSubLineaNegocio)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("bk_tr_CotizacionSubLineaNegocio");
                }
            }
        }
        private TrackableCollection<CotizacionSubLineaNegocio> _bk_tr_CotizacionSubLineaNegocio;
    
        [DataMember]
        public TrackableCollection<CotizacionDeducible> bk_te_CotizacionDeducible
        {
            get
            {
                if (_bk_te_CotizacionDeducible == null)
                {
                    _bk_te_CotizacionDeducible = new TrackableCollection<CotizacionDeducible>();
                    _bk_te_CotizacionDeducible.CollectionChanged += Fixupbk_te_CotizacionDeducible;
                }
                return _bk_te_CotizacionDeducible;
            }
            set
            {
                if (!ReferenceEquals(_bk_te_CotizacionDeducible, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_bk_te_CotizacionDeducible != null)
                    {
                        _bk_te_CotizacionDeducible.CollectionChanged -= Fixupbk_te_CotizacionDeducible;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (CotizacionDeducible item in _bk_te_CotizacionDeducible)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _bk_te_CotizacionDeducible = value;
                    if (_bk_te_CotizacionDeducible != null)
                    {
                        _bk_te_CotizacionDeducible.CollectionChanged += Fixupbk_te_CotizacionDeducible;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (CotizacionDeducible item in _bk_te_CotizacionDeducible)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("bk_te_CotizacionDeducible");
                }
            }
        }
        private TrackableCollection<CotizacionDeducible> _bk_te_CotizacionDeducible;
    
        [DataMember]
        public TrackableCollection<EqContratistaEquipo> bk_tw_EqContratistaEquipo
        {
            get
            {
                if (_bk_tw_EqContratistaEquipo == null)
                {
                    _bk_tw_EqContratistaEquipo = new TrackableCollection<EqContratistaEquipo>();
                    _bk_tw_EqContratistaEquipo.CollectionChanged += Fixupbk_tw_EqContratistaEquipo;
                }
                return _bk_tw_EqContratistaEquipo;
            }
            set
            {
                if (!ReferenceEquals(_bk_tw_EqContratistaEquipo, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_bk_tw_EqContratistaEquipo != null)
                    {
                        _bk_tw_EqContratistaEquipo.CollectionChanged -= Fixupbk_tw_EqContratistaEquipo;
                    }
                    _bk_tw_EqContratistaEquipo = value;
                    if (_bk_tw_EqContratistaEquipo != null)
                    {
                        _bk_tw_EqContratistaEquipo.CollectionChanged += Fixupbk_tw_EqContratistaEquipo;
                    }
                    OnNavigationPropertyChanged("bk_tw_EqContratistaEquipo");
                }
            }
        }
        private TrackableCollection<EqContratistaEquipo> _bk_tw_EqContratistaEquipo;
    
        [DataMember]
        public TrackableCollection<CotizacionTransConceptoEvaluacion> bk_te_CotizacionTransConceptoEvaluacion
        {
            get
            {
                if (_bk_te_CotizacionTransConceptoEvaluacion == null)
                {
                    _bk_te_CotizacionTransConceptoEvaluacion = new TrackableCollection<CotizacionTransConceptoEvaluacion>();
                    _bk_te_CotizacionTransConceptoEvaluacion.CollectionChanged += Fixupbk_te_CotizacionTransConceptoEvaluacion;
                }
                return _bk_te_CotizacionTransConceptoEvaluacion;
            }
            set
            {
                if (!ReferenceEquals(_bk_te_CotizacionTransConceptoEvaluacion, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_bk_te_CotizacionTransConceptoEvaluacion != null)
                    {
                        _bk_te_CotizacionTransConceptoEvaluacion.CollectionChanged -= Fixupbk_te_CotizacionTransConceptoEvaluacion;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (CotizacionTransConceptoEvaluacion item in _bk_te_CotizacionTransConceptoEvaluacion)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _bk_te_CotizacionTransConceptoEvaluacion = value;
                    if (_bk_te_CotizacionTransConceptoEvaluacion != null)
                    {
                        _bk_te_CotizacionTransConceptoEvaluacion.CollectionChanged += Fixupbk_te_CotizacionTransConceptoEvaluacion;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (CotizacionTransConceptoEvaluacion item in _bk_te_CotizacionTransConceptoEvaluacion)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("bk_te_CotizacionTransConceptoEvaluacion");
                }
            }
        }
        private TrackableCollection<CotizacionTransConceptoEvaluacion> _bk_te_CotizacionTransConceptoEvaluacion;
    
        [DataMember]
        public CotizacionPagador bk_te_CotizacionPagador
        {
            get { return _bk_te_CotizacionPagador; }
            set
            {
                if (!ReferenceEquals(_bk_te_CotizacionPagador, value))
                {
                    var previousValue = _bk_te_CotizacionPagador;
                    _bk_te_CotizacionPagador = value;
                    Fixupbk_te_CotizacionPagador(previousValue);
                    OnNavigationPropertyChanged("bk_te_CotizacionPagador");
                }
            }
        }
        private CotizacionPagador _bk_te_CotizacionPagador;
    
        [DataMember]
        public CotizacionRCProductoExt bk_te_CotizacionRCProductoExt
        {
            get { return _bk_te_CotizacionRCProductoExt; }
            set
            {
                if (!ReferenceEquals(_bk_te_CotizacionRCProductoExt, value))
                {
                    var previousValue = _bk_te_CotizacionRCProductoExt;
                    _bk_te_CotizacionRCProductoExt = value;
                    Fixupbk_te_CotizacionRCProductoExt(previousValue);
                    OnNavigationPropertyChanged("bk_te_CotizacionRCProductoExt");
                }
            }
        }
        private CotizacionRCProductoExt _bk_te_CotizacionRCProductoExt;
    
        [DataMember]
        public TrackableCollection<CotizacionRCProductoExtResultado> bk_te_CotizacionRCProductoExtResultado
        {
            get
            {
                if (_bk_te_CotizacionRCProductoExtResultado == null)
                {
                    _bk_te_CotizacionRCProductoExtResultado = new TrackableCollection<CotizacionRCProductoExtResultado>();
                    _bk_te_CotizacionRCProductoExtResultado.CollectionChanged += Fixupbk_te_CotizacionRCProductoExtResultado;
                }
                return _bk_te_CotizacionRCProductoExtResultado;
            }
            set
            {
                if (!ReferenceEquals(_bk_te_CotizacionRCProductoExtResultado, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_bk_te_CotizacionRCProductoExtResultado != null)
                    {
                        _bk_te_CotizacionRCProductoExtResultado.CollectionChanged -= Fixupbk_te_CotizacionRCProductoExtResultado;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (CotizacionRCProductoExtResultado item in _bk_te_CotizacionRCProductoExtResultado)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _bk_te_CotizacionRCProductoExtResultado = value;
                    if (_bk_te_CotizacionRCProductoExtResultado != null)
                    {
                        _bk_te_CotizacionRCProductoExtResultado.CollectionChanged += Fixupbk_te_CotizacionRCProductoExtResultado;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (CotizacionRCProductoExtResultado item in _bk_te_CotizacionRCProductoExtResultado)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("bk_te_CotizacionRCProductoExtResultado");
                }
            }
        }
        private TrackableCollection<CotizacionRCProductoExtResultado> _bk_te_CotizacionRCProductoExtResultado;
    
        [DataMember]
        public CotizacionRCHoteleria bk_te_CotizacionRCHoteleria
        {
            get { return _bk_te_CotizacionRCHoteleria; }
            set
            {
                if (!ReferenceEquals(_bk_te_CotizacionRCHoteleria, value))
                {
                    var previousValue = _bk_te_CotizacionRCHoteleria;
                    _bk_te_CotizacionRCHoteleria = value;
                    Fixupbk_te_CotizacionRCHoteleria(previousValue);
                    OnNavigationPropertyChanged("bk_te_CotizacionRCHoteleria");
                }
            }
        }
        private CotizacionRCHoteleria _bk_te_CotizacionRCHoteleria;
    
        [DataMember]
        public CotizacionRCVehiculoExc bk_te_CotizacionRCVehiculoExc
        {
            get { return _bk_te_CotizacionRCVehiculoExc; }
            set
            {
                if (!ReferenceEquals(_bk_te_CotizacionRCVehiculoExc, value))
                {
                    var previousValue = _bk_te_CotizacionRCVehiculoExc;
                    _bk_te_CotizacionRCVehiculoExc = value;
                    Fixupbk_te_CotizacionRCVehiculoExc(previousValue);
                    OnNavigationPropertyChanged("bk_te_CotizacionRCVehiculoExc");
                }
            }
        }
        private CotizacionRCVehiculoExc _bk_te_CotizacionRCVehiculoExc;
    
        [DataMember]
        public CotizacionRCConstruccion bk_te_CotizacionRCConstruccion
        {
            get { return _bk_te_CotizacionRCConstruccion; }
            set
            {
                if (!ReferenceEquals(_bk_te_CotizacionRCConstruccion, value))
                {
                    var previousValue = _bk_te_CotizacionRCConstruccion;
                    _bk_te_CotizacionRCConstruccion = value;
                    Fixupbk_te_CotizacionRCConstruccion(previousValue);
                    OnNavigationPropertyChanged("bk_te_CotizacionRCConstruccion");
                }
            }
        }
        private CotizacionRCConstruccion _bk_te_CotizacionRCConstruccion;
    
        [DataMember]
        public CotizacionRCActInm bk_te_CotizacionRCActInm
        {
            get { return _bk_te_CotizacionRCActInm; }
            set
            {
                if (!ReferenceEquals(_bk_te_CotizacionRCActInm, value))
                {
                    var previousValue = _bk_te_CotizacionRCActInm;
                    _bk_te_CotizacionRCActInm = value;
                    Fixupbk_te_CotizacionRCActInm(previousValue);
                    OnNavigationPropertyChanged("bk_te_CotizacionRCActInm");
                }
            }
        }
        private CotizacionRCActInm _bk_te_CotizacionRCActInm;
    
        [DataMember]
        public CotizacionTrans bk_te_CotizacionTrans
        {
            get { return _bk_te_CotizacionTrans; }
            set
            {
                if (!ReferenceEquals(_bk_te_CotizacionTrans, value))
                {
                    var previousValue = _bk_te_CotizacionTrans;
                    _bk_te_CotizacionTrans = value;
                    Fixupbk_te_CotizacionTrans(previousValue);
                    OnNavigationPropertyChanged("bk_te_CotizacionTrans");
                }
            }
        }
        private CotizacionTrans _bk_te_CotizacionTrans;
    
        [DataMember]
        public CotizacionRCAdicional bk_te_CotizacionRCAdicional
        {
            get { return _bk_te_CotizacionRCAdicional; }
            set
            {
                if (!ReferenceEquals(_bk_te_CotizacionRCAdicional, value))
                {
                    var previousValue = _bk_te_CotizacionRCAdicional;
                    _bk_te_CotizacionRCAdicional = value;
                    Fixupbk_te_CotizacionRCAdicional(previousValue);
                    OnNavigationPropertyChanged("bk_te_CotizacionRCAdicional");
                }
            }
        }
        private CotizacionRCAdicional _bk_te_CotizacionRCAdicional;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            bk_tc_Asegurado = null;
            bk_tc_Contacto = null;
            bk_te_CotizacionEqElec = null;
            bk_te_CotizacionRCEqContratista = null;
            bk_te_CotizacionEqElecPortExt = null;
            bk_te_CotizacionEqElecCostoOper = null;
            bk_te_CotizacionEqElecMovil = null;
            bk_te_CotizacionRCTrabajoTerm = null;
            bk_te_CotizacionUbicacion.Clear();
            bk_te_CotizacionRCTaller = null;
            bk_te_CotizacionRCEstacionamiento = null;
            bk_te_CotizacionCristal = null;
            bk_te_CotizacionRCProductoExtPais.Clear();
            bk_te_CotizacionAnuncio = null;
            bk_te_CotizacionRobo = null;
            bk_te_CotizacionDinVal = null;
            bk_te_CotizacionCaldera = null;
            bk_te_CotizacionCalderaPC = null;
            bk_te_CotizacionRotMaq = null;
            bk_te_CotizacionRCRecall = null;
            bk_te_CotizacionRotMaqPC = null;
            bk_te_CotizacionEqContratista = null;
            bk_te_CotizacionLog.Clear();
            bk_tc_FormaPago = null;
            bk_tc_Moneda = null;
            bk_tc_TipoOperacion = null;
            bk_tc_Usuario = null;
            bk_te_IncASAreaFuego.Clear();
            bk_te_IncAS = null;
            bk_te_IncGeneralInf = null;
            bk_te_IncCOPE.Clear();
            bk_te_LazCasualty = null;
            bk_tr_CotizacionTipoCobertura.Clear();
            bk_tr_CotizacionCoberturaUbi.Clear();
            bk_tr_CotizacionSubLineaUbi.Clear();
            bk_tr_CotizacionSubLineaNegocio.Clear();
            bk_te_CotizacionDeducible.Clear();
            bk_tw_EqContratistaEquipo.Clear();
            bk_te_CotizacionTransConceptoEvaluacion.Clear();
            bk_te_CotizacionPagador = null;
            bk_te_CotizacionRCProductoExt = null;
            bk_te_CotizacionRCProductoExtResultado.Clear();
            bk_te_CotizacionRCHoteleria = null;
            bk_te_CotizacionRCVehiculoExc = null;
            bk_te_CotizacionRCConstruccion = null;
            bk_te_CotizacionRCActInm = null;
            bk_te_CotizacionTrans = null;
            bk_te_CotizacionRCAdicional = null;
        }

        #endregion

        #region Association Fixup
    
        private void Fixupbk_tc_Asegurado(Asegurado previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.bk_te_Cotizacion.Contains(this))
            {
                previousValue.bk_te_Cotizacion.Remove(this);
            }
    
            if (bk_tc_Asegurado != null)
            {
                if (!bk_tc_Asegurado.bk_te_Cotizacion.Contains(this))
                {
                    bk_tc_Asegurado.bk_te_Cotizacion.Add(this);
                }
    
                AseguradoID = bk_tc_Asegurado.AseguradoID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("bk_tc_Asegurado")
                    && (ChangeTracker.OriginalValues["bk_tc_Asegurado"] == bk_tc_Asegurado))
                {
                    ChangeTracker.OriginalValues.Remove("bk_tc_Asegurado");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("bk_tc_Asegurado", previousValue);
                }
                if (bk_tc_Asegurado != null && !bk_tc_Asegurado.ChangeTracker.ChangeTrackingEnabled)
                {
                    bk_tc_Asegurado.StartTracking();
                }
            }
        }
    
        private void Fixupbk_tc_Contacto(Contacto previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.bk_te_Cotizacion.Contains(this))
            {
                previousValue.bk_te_Cotizacion.Remove(this);
            }
    
            if (bk_tc_Contacto != null)
            {
                if (!bk_tc_Contacto.bk_te_Cotizacion.Contains(this))
                {
                    bk_tc_Contacto.bk_te_Cotizacion.Add(this);
                }
    
                ContactoID = bk_tc_Contacto.ContactoID;
            }
            else if (!skipKeys)
            {
                ContactoID = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("bk_tc_Contacto")
                    && (ChangeTracker.OriginalValues["bk_tc_Contacto"] == bk_tc_Contacto))
                {
                    ChangeTracker.OriginalValues.Remove("bk_tc_Contacto");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("bk_tc_Contacto", previousValue);
                }
                if (bk_tc_Contacto != null && !bk_tc_Contacto.ChangeTracker.ChangeTrackingEnabled)
                {
                    bk_tc_Contacto.StartTracking();
                }
            }
        }
    
        private void Fixupbk_te_CotizacionEqElec(CotizacionEqElec previousValue)
        {
            // This is the principal end in an association that performs cascade deletes.
            // Update the event listener to refer to the new dependent.
            if (previousValue != null)
            {
                ChangeTracker.ObjectStateChanging -= previousValue.HandleCascadeDelete;
            }
    
            if (bk_te_CotizacionEqElec != null)
            {
                ChangeTracker.ObjectStateChanging += bk_te_CotizacionEqElec.HandleCascadeDelete;
            }
    
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && ReferenceEquals(previousValue.bk_te_Cotizacion, this))
            {
                previousValue.bk_te_Cotizacion = null;
            }
    
            if (bk_te_CotizacionEqElec != null)
            {
                bk_te_CotizacionEqElec.bk_te_Cotizacion = this;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("bk_te_CotizacionEqElec")
                    && (ChangeTracker.OriginalValues["bk_te_CotizacionEqElec"] == bk_te_CotizacionEqElec))
                {
                    ChangeTracker.OriginalValues.Remove("bk_te_CotizacionEqElec");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("bk_te_CotizacionEqElec", previousValue);
                    // This is the principal end of an identifying association, so the dependent must be deleted when the relationship is removed.
                    // If the current state of the dependent is Added, the relationship can be changed without causing the dependent to be deleted.
                    if (previousValue != null && previousValue.ChangeTracker.State != ObjectState.Added)
                    {
                        previousValue.MarkAsDeleted();
                    }
                }
                if (bk_te_CotizacionEqElec != null && !bk_te_CotizacionEqElec.ChangeTracker.ChangeTrackingEnabled)
                {
                    bk_te_CotizacionEqElec.StartTracking();
                }
            }
        }
    
        private void Fixupbk_te_CotizacionRCEqContratista(CotizacionRCEqContratista previousValue)
        {
            // This is the principal end in an association that performs cascade deletes.
            // Update the event listener to refer to the new dependent.
            if (previousValue != null)
            {
                ChangeTracker.ObjectStateChanging -= previousValue.HandleCascadeDelete;
            }
    
            if (bk_te_CotizacionRCEqContratista != null)
            {
                ChangeTracker.ObjectStateChanging += bk_te_CotizacionRCEqContratista.HandleCascadeDelete;
            }
    
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && ReferenceEquals(previousValue.bk_te_Cotizacion, this))
            {
                previousValue.bk_te_Cotizacion = null;
            }
    
            if (bk_te_CotizacionRCEqContratista != null)
            {
                bk_te_CotizacionRCEqContratista.bk_te_Cotizacion = this;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("bk_te_CotizacionRCEqContratista")
                    && (ChangeTracker.OriginalValues["bk_te_CotizacionRCEqContratista"] == bk_te_CotizacionRCEqContratista))
                {
                    ChangeTracker.OriginalValues.Remove("bk_te_CotizacionRCEqContratista");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("bk_te_CotizacionRCEqContratista", previousValue);
                    // This is the principal end of an identifying association, so the dependent must be deleted when the relationship is removed.
                    // If the current state of the dependent is Added, the relationship can be changed without causing the dependent to be deleted.
                    if (previousValue != null && previousValue.ChangeTracker.State != ObjectState.Added)
                    {
                        previousValue.MarkAsDeleted();
                    }
                }
                if (bk_te_CotizacionRCEqContratista != null && !bk_te_CotizacionRCEqContratista.ChangeTracker.ChangeTrackingEnabled)
                {
                    bk_te_CotizacionRCEqContratista.StartTracking();
                }
            }
        }
    
        private void Fixupbk_te_CotizacionEqElecPortExt(CotizacionEqElecPortExt previousValue)
        {
            // This is the principal end in an association that performs cascade deletes.
            // Update the event listener to refer to the new dependent.
            if (previousValue != null)
            {
                ChangeTracker.ObjectStateChanging -= previousValue.HandleCascadeDelete;
            }
    
            if (bk_te_CotizacionEqElecPortExt != null)
            {
                ChangeTracker.ObjectStateChanging += bk_te_CotizacionEqElecPortExt.HandleCascadeDelete;
            }
    
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && ReferenceEquals(previousValue.bk_te_Cotizacion, this))
            {
                previousValue.bk_te_Cotizacion = null;
            }
    
            if (bk_te_CotizacionEqElecPortExt != null)
            {
                bk_te_CotizacionEqElecPortExt.bk_te_Cotizacion = this;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("bk_te_CotizacionEqElecPortExt")
                    && (ChangeTracker.OriginalValues["bk_te_CotizacionEqElecPortExt"] == bk_te_CotizacionEqElecPortExt))
                {
                    ChangeTracker.OriginalValues.Remove("bk_te_CotizacionEqElecPortExt");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("bk_te_CotizacionEqElecPortExt", previousValue);
                    // This is the principal end of an identifying association, so the dependent must be deleted when the relationship is removed.
                    // If the current state of the dependent is Added, the relationship can be changed without causing the dependent to be deleted.
                    if (previousValue != null && previousValue.ChangeTracker.State != ObjectState.Added)
                    {
                        previousValue.MarkAsDeleted();
                    }
                }
                if (bk_te_CotizacionEqElecPortExt != null && !bk_te_CotizacionEqElecPortExt.ChangeTracker.ChangeTrackingEnabled)
                {
                    bk_te_CotizacionEqElecPortExt.StartTracking();
                }
            }
        }
    
        private void Fixupbk_te_CotizacionEqElecCostoOper(CotizacionEqElecCostoOper previousValue)
        {
            // This is the principal end in an association that performs cascade deletes.
            // Update the event listener to refer to the new dependent.
            if (previousValue != null)
            {
                ChangeTracker.ObjectStateChanging -= previousValue.HandleCascadeDelete;
            }
    
            if (bk_te_CotizacionEqElecCostoOper != null)
            {
                ChangeTracker.ObjectStateChanging += bk_te_CotizacionEqElecCostoOper.HandleCascadeDelete;
            }
    
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && ReferenceEquals(previousValue.bk_te_Cotizacion, this))
            {
                previousValue.bk_te_Cotizacion = null;
            }
    
            if (bk_te_CotizacionEqElecCostoOper != null)
            {
                bk_te_CotizacionEqElecCostoOper.bk_te_Cotizacion = this;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("bk_te_CotizacionEqElecCostoOper")
                    && (ChangeTracker.OriginalValues["bk_te_CotizacionEqElecCostoOper"] == bk_te_CotizacionEqElecCostoOper))
                {
                    ChangeTracker.OriginalValues.Remove("bk_te_CotizacionEqElecCostoOper");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("bk_te_CotizacionEqElecCostoOper", previousValue);
                    // This is the principal end of an identifying association, so the dependent must be deleted when the relationship is removed.
                    // If the current state of the dependent is Added, the relationship can be changed without causing the dependent to be deleted.
                    if (previousValue != null && previousValue.ChangeTracker.State != ObjectState.Added)
                    {
                        previousValue.MarkAsDeleted();
                    }
                }
                if (bk_te_CotizacionEqElecCostoOper != null && !bk_te_CotizacionEqElecCostoOper.ChangeTracker.ChangeTrackingEnabled)
                {
                    bk_te_CotizacionEqElecCostoOper.StartTracking();
                }
            }
        }
    
        private void Fixupbk_te_CotizacionEqElecMovil(CotizacionEqElecMovil previousValue)
        {
            // This is the principal end in an association that performs cascade deletes.
            // Update the event listener to refer to the new dependent.
            if (previousValue != null)
            {
                ChangeTracker.ObjectStateChanging -= previousValue.HandleCascadeDelete;
            }
    
            if (bk_te_CotizacionEqElecMovil != null)
            {
                ChangeTracker.ObjectStateChanging += bk_te_CotizacionEqElecMovil.HandleCascadeDelete;
            }
    
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && ReferenceEquals(previousValue.bk_te_Cotizacion, this))
            {
                previousValue.bk_te_Cotizacion = null;
            }
    
            if (bk_te_CotizacionEqElecMovil != null)
            {
                bk_te_CotizacionEqElecMovil.bk_te_Cotizacion = this;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("bk_te_CotizacionEqElecMovil")
                    && (ChangeTracker.OriginalValues["bk_te_CotizacionEqElecMovil"] == bk_te_CotizacionEqElecMovil))
                {
                    ChangeTracker.OriginalValues.Remove("bk_te_CotizacionEqElecMovil");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("bk_te_CotizacionEqElecMovil", previousValue);
                    // This is the principal end of an identifying association, so the dependent must be deleted when the relationship is removed.
                    // If the current state of the dependent is Added, the relationship can be changed without causing the dependent to be deleted.
                    if (previousValue != null && previousValue.ChangeTracker.State != ObjectState.Added)
                    {
                        previousValue.MarkAsDeleted();
                    }
                }
                if (bk_te_CotizacionEqElecMovil != null && !bk_te_CotizacionEqElecMovil.ChangeTracker.ChangeTrackingEnabled)
                {
                    bk_te_CotizacionEqElecMovil.StartTracking();
                }
            }
        }
    
        private void Fixupbk_te_CotizacionRCTrabajoTerm(CotizacionRCTrabajoTerm previousValue)
        {
            // This is the principal end in an association that performs cascade deletes.
            // Update the event listener to refer to the new dependent.
            if (previousValue != null)
            {
                ChangeTracker.ObjectStateChanging -= previousValue.HandleCascadeDelete;
            }
    
            if (bk_te_CotizacionRCTrabajoTerm != null)
            {
                ChangeTracker.ObjectStateChanging += bk_te_CotizacionRCTrabajoTerm.HandleCascadeDelete;
            }
    
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && ReferenceEquals(previousValue.bk_te_Cotizacion, this))
            {
                previousValue.bk_te_Cotizacion = null;
            }
    
            if (bk_te_CotizacionRCTrabajoTerm != null)
            {
                bk_te_CotizacionRCTrabajoTerm.bk_te_Cotizacion = this;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("bk_te_CotizacionRCTrabajoTerm")
                    && (ChangeTracker.OriginalValues["bk_te_CotizacionRCTrabajoTerm"] == bk_te_CotizacionRCTrabajoTerm))
                {
                    ChangeTracker.OriginalValues.Remove("bk_te_CotizacionRCTrabajoTerm");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("bk_te_CotizacionRCTrabajoTerm", previousValue);
                    // This is the principal end of an identifying association, so the dependent must be deleted when the relationship is removed.
                    // If the current state of the dependent is Added, the relationship can be changed without causing the dependent to be deleted.
                    if (previousValue != null && previousValue.ChangeTracker.State != ObjectState.Added)
                    {
                        previousValue.MarkAsDeleted();
                    }
                }
                if (bk_te_CotizacionRCTrabajoTerm != null && !bk_te_CotizacionRCTrabajoTerm.ChangeTracker.ChangeTrackingEnabled)
                {
                    bk_te_CotizacionRCTrabajoTerm.StartTracking();
                }
            }
        }
    
        private void Fixupbk_te_CotizacionRCTaller(CotizacionRCTaller previousValue)
        {
            // This is the principal end in an association that performs cascade deletes.
            // Update the event listener to refer to the new dependent.
            if (previousValue != null)
            {
                ChangeTracker.ObjectStateChanging -= previousValue.HandleCascadeDelete;
            }
    
            if (bk_te_CotizacionRCTaller != null)
            {
                ChangeTracker.ObjectStateChanging += bk_te_CotizacionRCTaller.HandleCascadeDelete;
            }
    
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && ReferenceEquals(previousValue.bk_te_Cotizacion, this))
            {
                previousValue.bk_te_Cotizacion = null;
            }
    
            if (bk_te_CotizacionRCTaller != null)
            {
                bk_te_CotizacionRCTaller.bk_te_Cotizacion = this;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("bk_te_CotizacionRCTaller")
                    && (ChangeTracker.OriginalValues["bk_te_CotizacionRCTaller"] == bk_te_CotizacionRCTaller))
                {
                    ChangeTracker.OriginalValues.Remove("bk_te_CotizacionRCTaller");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("bk_te_CotizacionRCTaller", previousValue);
                    // This is the principal end of an identifying association, so the dependent must be deleted when the relationship is removed.
                    // If the current state of the dependent is Added, the relationship can be changed without causing the dependent to be deleted.
                    if (previousValue != null && previousValue.ChangeTracker.State != ObjectState.Added)
                    {
                        previousValue.MarkAsDeleted();
                    }
                }
                if (bk_te_CotizacionRCTaller != null && !bk_te_CotizacionRCTaller.ChangeTracker.ChangeTrackingEnabled)
                {
                    bk_te_CotizacionRCTaller.StartTracking();
                }
            }
        }
    
        private void Fixupbk_te_CotizacionRCEstacionamiento(CotizacionRCEstacionamiento previousValue)
        {
            // This is the principal end in an association that performs cascade deletes.
            // Update the event listener to refer to the new dependent.
            if (previousValue != null)
            {
                ChangeTracker.ObjectStateChanging -= previousValue.HandleCascadeDelete;
            }
    
            if (bk_te_CotizacionRCEstacionamiento != null)
            {
                ChangeTracker.ObjectStateChanging += bk_te_CotizacionRCEstacionamiento.HandleCascadeDelete;
            }
    
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && ReferenceEquals(previousValue.bk_te_Cotizacion, this))
            {
                previousValue.bk_te_Cotizacion = null;
            }
    
            if (bk_te_CotizacionRCEstacionamiento != null)
            {
                bk_te_CotizacionRCEstacionamiento.bk_te_Cotizacion = this;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("bk_te_CotizacionRCEstacionamiento")
                    && (ChangeTracker.OriginalValues["bk_te_CotizacionRCEstacionamiento"] == bk_te_CotizacionRCEstacionamiento))
                {
                    ChangeTracker.OriginalValues.Remove("bk_te_CotizacionRCEstacionamiento");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("bk_te_CotizacionRCEstacionamiento", previousValue);
                    // This is the principal end of an identifying association, so the dependent must be deleted when the relationship is removed.
                    // If the current state of the dependent is Added, the relationship can be changed without causing the dependent to be deleted.
                    if (previousValue != null && previousValue.ChangeTracker.State != ObjectState.Added)
                    {
                        previousValue.MarkAsDeleted();
                    }
                }
                if (bk_te_CotizacionRCEstacionamiento != null && !bk_te_CotizacionRCEstacionamiento.ChangeTracker.ChangeTrackingEnabled)
                {
                    bk_te_CotizacionRCEstacionamiento.StartTracking();
                }
            }
        }
    
        private void Fixupbk_te_CotizacionCristal(CotizacionCristal previousValue)
        {
            // This is the principal end in an association that performs cascade deletes.
            // Update the event listener to refer to the new dependent.
            if (previousValue != null)
            {
                ChangeTracker.ObjectStateChanging -= previousValue.HandleCascadeDelete;
            }
    
            if (bk_te_CotizacionCristal != null)
            {
                ChangeTracker.ObjectStateChanging += bk_te_CotizacionCristal.HandleCascadeDelete;
            }
    
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && ReferenceEquals(previousValue.bk_te_Cotizacion, this))
            {
                previousValue.bk_te_Cotizacion = null;
            }
    
            if (bk_te_CotizacionCristal != null)
            {
                bk_te_CotizacionCristal.bk_te_Cotizacion = this;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("bk_te_CotizacionCristal")
                    && (ChangeTracker.OriginalValues["bk_te_CotizacionCristal"] == bk_te_CotizacionCristal))
                {
                    ChangeTracker.OriginalValues.Remove("bk_te_CotizacionCristal");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("bk_te_CotizacionCristal", previousValue);
                    // This is the principal end of an identifying association, so the dependent must be deleted when the relationship is removed.
                    // If the current state of the dependent is Added, the relationship can be changed without causing the dependent to be deleted.
                    if (previousValue != null && previousValue.ChangeTracker.State != ObjectState.Added)
                    {
                        previousValue.MarkAsDeleted();
                    }
                }
                if (bk_te_CotizacionCristal != null && !bk_te_CotizacionCristal.ChangeTracker.ChangeTrackingEnabled)
                {
                    bk_te_CotizacionCristal.StartTracking();
                }
            }
        }
    
        private void Fixupbk_te_CotizacionAnuncio(CotizacionAnuncio previousValue)
        {
            // This is the principal end in an association that performs cascade deletes.
            // Update the event listener to refer to the new dependent.
            if (previousValue != null)
            {
                ChangeTracker.ObjectStateChanging -= previousValue.HandleCascadeDelete;
            }
    
            if (bk_te_CotizacionAnuncio != null)
            {
                ChangeTracker.ObjectStateChanging += bk_te_CotizacionAnuncio.HandleCascadeDelete;
            }
    
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && ReferenceEquals(previousValue.bk_te_Cotizacion, this))
            {
                previousValue.bk_te_Cotizacion = null;
            }
    
            if (bk_te_CotizacionAnuncio != null)
            {
                bk_te_CotizacionAnuncio.bk_te_Cotizacion = this;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("bk_te_CotizacionAnuncio")
                    && (ChangeTracker.OriginalValues["bk_te_CotizacionAnuncio"] == bk_te_CotizacionAnuncio))
                {
                    ChangeTracker.OriginalValues.Remove("bk_te_CotizacionAnuncio");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("bk_te_CotizacionAnuncio", previousValue);
                    // This is the principal end of an identifying association, so the dependent must be deleted when the relationship is removed.
                    // If the current state of the dependent is Added, the relationship can be changed without causing the dependent to be deleted.
                    if (previousValue != null && previousValue.ChangeTracker.State != ObjectState.Added)
                    {
                        previousValue.MarkAsDeleted();
                    }
                }
                if (bk_te_CotizacionAnuncio != null && !bk_te_CotizacionAnuncio.ChangeTracker.ChangeTrackingEnabled)
                {
                    bk_te_CotizacionAnuncio.StartTracking();
                }
            }
        }
    
        private void Fixupbk_te_CotizacionRobo(CotizacionRobo previousValue)
        {
            // This is the principal end in an association that performs cascade deletes.
            // Update the event listener to refer to the new dependent.
            if (previousValue != null)
            {
                ChangeTracker.ObjectStateChanging -= previousValue.HandleCascadeDelete;
            }
    
            if (bk_te_CotizacionRobo != null)
            {
                ChangeTracker.ObjectStateChanging += bk_te_CotizacionRobo.HandleCascadeDelete;
            }
    
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && ReferenceEquals(previousValue.bk_te_Cotizacion, this))
            {
                previousValue.bk_te_Cotizacion = null;
            }
    
            if (bk_te_CotizacionRobo != null)
            {
                bk_te_CotizacionRobo.bk_te_Cotizacion = this;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("bk_te_CotizacionRobo")
                    && (ChangeTracker.OriginalValues["bk_te_CotizacionRobo"] == bk_te_CotizacionRobo))
                {
                    ChangeTracker.OriginalValues.Remove("bk_te_CotizacionRobo");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("bk_te_CotizacionRobo", previousValue);
                    // This is the principal end of an identifying association, so the dependent must be deleted when the relationship is removed.
                    // If the current state of the dependent is Added, the relationship can be changed without causing the dependent to be deleted.
                    if (previousValue != null && previousValue.ChangeTracker.State != ObjectState.Added)
                    {
                        previousValue.MarkAsDeleted();
                    }
                }
                if (bk_te_CotizacionRobo != null && !bk_te_CotizacionRobo.ChangeTracker.ChangeTrackingEnabled)
                {
                    bk_te_CotizacionRobo.StartTracking();
                }
            }
        }
    
        private void Fixupbk_te_CotizacionDinVal(CotizacionDinVal previousValue)
        {
            // This is the principal end in an association that performs cascade deletes.
            // Update the event listener to refer to the new dependent.
            if (previousValue != null)
            {
                ChangeTracker.ObjectStateChanging -= previousValue.HandleCascadeDelete;
            }
    
            if (bk_te_CotizacionDinVal != null)
            {
                ChangeTracker.ObjectStateChanging += bk_te_CotizacionDinVal.HandleCascadeDelete;
            }
    
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && ReferenceEquals(previousValue.bk_te_Cotizacion, this))
            {
                previousValue.bk_te_Cotizacion = null;
            }
    
            if (bk_te_CotizacionDinVal != null)
            {
                bk_te_CotizacionDinVal.bk_te_Cotizacion = this;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("bk_te_CotizacionDinVal")
                    && (ChangeTracker.OriginalValues["bk_te_CotizacionDinVal"] == bk_te_CotizacionDinVal))
                {
                    ChangeTracker.OriginalValues.Remove("bk_te_CotizacionDinVal");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("bk_te_CotizacionDinVal", previousValue);
                    // This is the principal end of an identifying association, so the dependent must be deleted when the relationship is removed.
                    // If the current state of the dependent is Added, the relationship can be changed without causing the dependent to be deleted.
                    if (previousValue != null && previousValue.ChangeTracker.State != ObjectState.Added)
                    {
                        previousValue.MarkAsDeleted();
                    }
                }
                if (bk_te_CotizacionDinVal != null && !bk_te_CotizacionDinVal.ChangeTracker.ChangeTrackingEnabled)
                {
                    bk_te_CotizacionDinVal.StartTracking();
                }
            }
        }
    
        private void Fixupbk_te_CotizacionCaldera(CotizacionCaldera previousValue)
        {
            // This is the principal end in an association that performs cascade deletes.
            // Update the event listener to refer to the new dependent.
            if (previousValue != null)
            {
                ChangeTracker.ObjectStateChanging -= previousValue.HandleCascadeDelete;
            }
    
            if (bk_te_CotizacionCaldera != null)
            {
                ChangeTracker.ObjectStateChanging += bk_te_CotizacionCaldera.HandleCascadeDelete;
            }
    
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && ReferenceEquals(previousValue.bk_te_Cotizacion, this))
            {
                previousValue.bk_te_Cotizacion = null;
            }
    
            if (bk_te_CotizacionCaldera != null)
            {
                bk_te_CotizacionCaldera.bk_te_Cotizacion = this;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("bk_te_CotizacionCaldera")
                    && (ChangeTracker.OriginalValues["bk_te_CotizacionCaldera"] == bk_te_CotizacionCaldera))
                {
                    ChangeTracker.OriginalValues.Remove("bk_te_CotizacionCaldera");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("bk_te_CotizacionCaldera", previousValue);
                    // This is the principal end of an identifying association, so the dependent must be deleted when the relationship is removed.
                    // If the current state of the dependent is Added, the relationship can be changed without causing the dependent to be deleted.
                    if (previousValue != null && previousValue.ChangeTracker.State != ObjectState.Added)
                    {
                        previousValue.MarkAsDeleted();
                    }
                }
                if (bk_te_CotizacionCaldera != null && !bk_te_CotizacionCaldera.ChangeTracker.ChangeTrackingEnabled)
                {
                    bk_te_CotizacionCaldera.StartTracking();
                }
            }
        }
    
        private void Fixupbk_te_CotizacionCalderaPC(CotizacionCalderaPC previousValue)
        {
            // This is the principal end in an association that performs cascade deletes.
            // Update the event listener to refer to the new dependent.
            if (previousValue != null)
            {
                ChangeTracker.ObjectStateChanging -= previousValue.HandleCascadeDelete;
            }
    
            if (bk_te_CotizacionCalderaPC != null)
            {
                ChangeTracker.ObjectStateChanging += bk_te_CotizacionCalderaPC.HandleCascadeDelete;
            }
    
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && ReferenceEquals(previousValue.bk_te_Cotizacion, this))
            {
                previousValue.bk_te_Cotizacion = null;
            }
    
            if (bk_te_CotizacionCalderaPC != null)
            {
                bk_te_CotizacionCalderaPC.bk_te_Cotizacion = this;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("bk_te_CotizacionCalderaPC")
                    && (ChangeTracker.OriginalValues["bk_te_CotizacionCalderaPC"] == bk_te_CotizacionCalderaPC))
                {
                    ChangeTracker.OriginalValues.Remove("bk_te_CotizacionCalderaPC");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("bk_te_CotizacionCalderaPC", previousValue);
                    // This is the principal end of an identifying association, so the dependent must be deleted when the relationship is removed.
                    // If the current state of the dependent is Added, the relationship can be changed without causing the dependent to be deleted.
                    if (previousValue != null && previousValue.ChangeTracker.State != ObjectState.Added)
                    {
                        previousValue.MarkAsDeleted();
                    }
                }
                if (bk_te_CotizacionCalderaPC != null && !bk_te_CotizacionCalderaPC.ChangeTracker.ChangeTrackingEnabled)
                {
                    bk_te_CotizacionCalderaPC.StartTracking();
                }
            }
        }
    
        private void Fixupbk_te_CotizacionRotMaq(CotizacionRotMaq previousValue)
        {
            // This is the principal end in an association that performs cascade deletes.
            // Update the event listener to refer to the new dependent.
            if (previousValue != null)
            {
                ChangeTracker.ObjectStateChanging -= previousValue.HandleCascadeDelete;
            }
    
            if (bk_te_CotizacionRotMaq != null)
            {
                ChangeTracker.ObjectStateChanging += bk_te_CotizacionRotMaq.HandleCascadeDelete;
            }
    
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && ReferenceEquals(previousValue.bk_te_Cotizacion, this))
            {
                previousValue.bk_te_Cotizacion = null;
            }
    
            if (bk_te_CotizacionRotMaq != null)
            {
                bk_te_CotizacionRotMaq.bk_te_Cotizacion = this;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("bk_te_CotizacionRotMaq")
                    && (ChangeTracker.OriginalValues["bk_te_CotizacionRotMaq"] == bk_te_CotizacionRotMaq))
                {
                    ChangeTracker.OriginalValues.Remove("bk_te_CotizacionRotMaq");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("bk_te_CotizacionRotMaq", previousValue);
                    // This is the principal end of an identifying association, so the dependent must be deleted when the relationship is removed.
                    // If the current state of the dependent is Added, the relationship can be changed without causing the dependent to be deleted.
                    if (previousValue != null && previousValue.ChangeTracker.State != ObjectState.Added)
                    {
                        previousValue.MarkAsDeleted();
                    }
                }
                if (bk_te_CotizacionRotMaq != null && !bk_te_CotizacionRotMaq.ChangeTracker.ChangeTrackingEnabled)
                {
                    bk_te_CotizacionRotMaq.StartTracking();
                }
            }
        }
    
        private void Fixupbk_te_CotizacionRCRecall(CotizacionRCRecall previousValue)
        {
            // This is the principal end in an association that performs cascade deletes.
            // Update the event listener to refer to the new dependent.
            if (previousValue != null)
            {
                ChangeTracker.ObjectStateChanging -= previousValue.HandleCascadeDelete;
            }
    
            if (bk_te_CotizacionRCRecall != null)
            {
                ChangeTracker.ObjectStateChanging += bk_te_CotizacionRCRecall.HandleCascadeDelete;
            }
    
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && ReferenceEquals(previousValue.bk_te_Cotizacion, this))
            {
                previousValue.bk_te_Cotizacion = null;
            }
    
            if (bk_te_CotizacionRCRecall != null)
            {
                bk_te_CotizacionRCRecall.bk_te_Cotizacion = this;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("bk_te_CotizacionRCRecall")
                    && (ChangeTracker.OriginalValues["bk_te_CotizacionRCRecall"] == bk_te_CotizacionRCRecall))
                {
                    ChangeTracker.OriginalValues.Remove("bk_te_CotizacionRCRecall");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("bk_te_CotizacionRCRecall", previousValue);
                    // This is the principal end of an identifying association, so the dependent must be deleted when the relationship is removed.
                    // If the current state of the dependent is Added, the relationship can be changed without causing the dependent to be deleted.
                    if (previousValue != null && previousValue.ChangeTracker.State != ObjectState.Added)
                    {
                        previousValue.MarkAsDeleted();
                    }
                }
                if (bk_te_CotizacionRCRecall != null && !bk_te_CotizacionRCRecall.ChangeTracker.ChangeTrackingEnabled)
                {
                    bk_te_CotizacionRCRecall.StartTracking();
                }
            }
        }
    
        private void Fixupbk_te_CotizacionRotMaqPC(CotizacionRotMaqPC previousValue)
        {
            // This is the principal end in an association that performs cascade deletes.
            // Update the event listener to refer to the new dependent.
            if (previousValue != null)
            {
                ChangeTracker.ObjectStateChanging -= previousValue.HandleCascadeDelete;
            }
    
            if (bk_te_CotizacionRotMaqPC != null)
            {
                ChangeTracker.ObjectStateChanging += bk_te_CotizacionRotMaqPC.HandleCascadeDelete;
            }
    
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && ReferenceEquals(previousValue.bk_te_Cotizacion, this))
            {
                previousValue.bk_te_Cotizacion = null;
            }
    
            if (bk_te_CotizacionRotMaqPC != null)
            {
                bk_te_CotizacionRotMaqPC.bk_te_Cotizacion = this;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("bk_te_CotizacionRotMaqPC")
                    && (ChangeTracker.OriginalValues["bk_te_CotizacionRotMaqPC"] == bk_te_CotizacionRotMaqPC))
                {
                    ChangeTracker.OriginalValues.Remove("bk_te_CotizacionRotMaqPC");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("bk_te_CotizacionRotMaqPC", previousValue);
                    // This is the principal end of an identifying association, so the dependent must be deleted when the relationship is removed.
                    // If the current state of the dependent is Added, the relationship can be changed without causing the dependent to be deleted.
                    if (previousValue != null && previousValue.ChangeTracker.State != ObjectState.Added)
                    {
                        previousValue.MarkAsDeleted();
                    }
                }
                if (bk_te_CotizacionRotMaqPC != null && !bk_te_CotizacionRotMaqPC.ChangeTracker.ChangeTrackingEnabled)
                {
                    bk_te_CotizacionRotMaqPC.StartTracking();
                }
            }
        }
    
        private void Fixupbk_te_CotizacionEqContratista(CotizacionEqContratista previousValue)
        {
            // This is the principal end in an association that performs cascade deletes.
            // Update the event listener to refer to the new dependent.
            if (previousValue != null)
            {
                ChangeTracker.ObjectStateChanging -= previousValue.HandleCascadeDelete;
            }
    
            if (bk_te_CotizacionEqContratista != null)
            {
                ChangeTracker.ObjectStateChanging += bk_te_CotizacionEqContratista.HandleCascadeDelete;
            }
    
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && ReferenceEquals(previousValue.bk_te_Cotizacion, this))
            {
                previousValue.bk_te_Cotizacion = null;
            }
    
            if (bk_te_CotizacionEqContratista != null)
            {
                bk_te_CotizacionEqContratista.bk_te_Cotizacion = this;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("bk_te_CotizacionEqContratista")
                    && (ChangeTracker.OriginalValues["bk_te_CotizacionEqContratista"] == bk_te_CotizacionEqContratista))
                {
                    ChangeTracker.OriginalValues.Remove("bk_te_CotizacionEqContratista");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("bk_te_CotizacionEqContratista", previousValue);
                    // This is the principal end of an identifying association, so the dependent must be deleted when the relationship is removed.
                    // If the current state of the dependent is Added, the relationship can be changed without causing the dependent to be deleted.
                    if (previousValue != null && previousValue.ChangeTracker.State != ObjectState.Added)
                    {
                        previousValue.MarkAsDeleted();
                    }
                }
                if (bk_te_CotizacionEqContratista != null && !bk_te_CotizacionEqContratista.ChangeTracker.ChangeTrackingEnabled)
                {
                    bk_te_CotizacionEqContratista.StartTracking();
                }
            }
        }
    
        private void Fixupbk_tc_FormaPago(FormaPago previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.bk_te_Cotizacion.Contains(this))
            {
                previousValue.bk_te_Cotizacion.Remove(this);
            }
    
            if (bk_tc_FormaPago != null)
            {
                if (!bk_tc_FormaPago.bk_te_Cotizacion.Contains(this))
                {
                    bk_tc_FormaPago.bk_te_Cotizacion.Add(this);
                }
    
                FormaPagoID = bk_tc_FormaPago.FormaPagoID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("bk_tc_FormaPago")
                    && (ChangeTracker.OriginalValues["bk_tc_FormaPago"] == bk_tc_FormaPago))
                {
                    ChangeTracker.OriginalValues.Remove("bk_tc_FormaPago");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("bk_tc_FormaPago", previousValue);
                }
                if (bk_tc_FormaPago != null && !bk_tc_FormaPago.ChangeTracker.ChangeTrackingEnabled)
                {
                    bk_tc_FormaPago.StartTracking();
                }
            }
        }
    
        private void Fixupbk_tc_Moneda(Moneda previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.bk_te_Cotizacion.Contains(this))
            {
                previousValue.bk_te_Cotizacion.Remove(this);
            }
    
            if (bk_tc_Moneda != null)
            {
                if (!bk_tc_Moneda.bk_te_Cotizacion.Contains(this))
                {
                    bk_tc_Moneda.bk_te_Cotizacion.Add(this);
                }
    
                MonedaID = bk_tc_Moneda.MonedaID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("bk_tc_Moneda")
                    && (ChangeTracker.OriginalValues["bk_tc_Moneda"] == bk_tc_Moneda))
                {
                    ChangeTracker.OriginalValues.Remove("bk_tc_Moneda");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("bk_tc_Moneda", previousValue);
                }
                if (bk_tc_Moneda != null && !bk_tc_Moneda.ChangeTracker.ChangeTrackingEnabled)
                {
                    bk_tc_Moneda.StartTracking();
                }
            }
        }
    
        private void Fixupbk_tc_TipoOperacion(TipoOperacion previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.bk_te_Cotizacion.Contains(this))
            {
                previousValue.bk_te_Cotizacion.Remove(this);
            }
    
            if (bk_tc_TipoOperacion != null)
            {
                if (!bk_tc_TipoOperacion.bk_te_Cotizacion.Contains(this))
                {
                    bk_tc_TipoOperacion.bk_te_Cotizacion.Add(this);
                }
    
                TipoOperacionID = bk_tc_TipoOperacion.TipoOperacionID;
            }
            else if (!skipKeys)
            {
                TipoOperacionID = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("bk_tc_TipoOperacion")
                    && (ChangeTracker.OriginalValues["bk_tc_TipoOperacion"] == bk_tc_TipoOperacion))
                {
                    ChangeTracker.OriginalValues.Remove("bk_tc_TipoOperacion");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("bk_tc_TipoOperacion", previousValue);
                }
                if (bk_tc_TipoOperacion != null && !bk_tc_TipoOperacion.ChangeTracker.ChangeTrackingEnabled)
                {
                    bk_tc_TipoOperacion.StartTracking();
                }
            }
        }
    
        private void Fixupbk_tc_Usuario(Usuario previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.bk_te_Cotizacion.Contains(this))
            {
                previousValue.bk_te_Cotizacion.Remove(this);
            }
    
            if (bk_tc_Usuario != null)
            {
                if (!bk_tc_Usuario.bk_te_Cotizacion.Contains(this))
                {
                    bk_tc_Usuario.bk_te_Cotizacion.Add(this);
                }
    
                usuarioid = bk_tc_Usuario.UsuarioID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("bk_tc_Usuario")
                    && (ChangeTracker.OriginalValues["bk_tc_Usuario"] == bk_tc_Usuario))
                {
                    ChangeTracker.OriginalValues.Remove("bk_tc_Usuario");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("bk_tc_Usuario", previousValue);
                }
                if (bk_tc_Usuario != null && !bk_tc_Usuario.ChangeTracker.ChangeTrackingEnabled)
                {
                    bk_tc_Usuario.StartTracking();
                }
            }
        }
    
        private void Fixupbk_te_IncAS(IncAS previousValue)
        {
            // This is the principal end in an association that performs cascade deletes.
            // Update the event listener to refer to the new dependent.
            if (previousValue != null)
            {
                ChangeTracker.ObjectStateChanging -= previousValue.HandleCascadeDelete;
            }
    
            if (bk_te_IncAS != null)
            {
                ChangeTracker.ObjectStateChanging += bk_te_IncAS.HandleCascadeDelete;
            }
    
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && ReferenceEquals(previousValue.bk_te_Cotizacion, this))
            {
                previousValue.bk_te_Cotizacion = null;
            }
    
            if (bk_te_IncAS != null)
            {
                bk_te_IncAS.bk_te_Cotizacion = this;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("bk_te_IncAS")
                    && (ChangeTracker.OriginalValues["bk_te_IncAS"] == bk_te_IncAS))
                {
                    ChangeTracker.OriginalValues.Remove("bk_te_IncAS");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("bk_te_IncAS", previousValue);
                    // This is the principal end of an identifying association, so the dependent must be deleted when the relationship is removed.
                    // If the current state of the dependent is Added, the relationship can be changed without causing the dependent to be deleted.
                    if (previousValue != null && previousValue.ChangeTracker.State != ObjectState.Added)
                    {
                        previousValue.MarkAsDeleted();
                    }
                }
                if (bk_te_IncAS != null && !bk_te_IncAS.ChangeTracker.ChangeTrackingEnabled)
                {
                    bk_te_IncAS.StartTracking();
                }
            }
        }
    
        private void Fixupbk_te_IncGeneralInf(IncGeneralInf previousValue)
        {
            // This is the principal end in an association that performs cascade deletes.
            // Update the event listener to refer to the new dependent.
            if (previousValue != null)
            {
                ChangeTracker.ObjectStateChanging -= previousValue.HandleCascadeDelete;
            }
    
            if (bk_te_IncGeneralInf != null)
            {
                ChangeTracker.ObjectStateChanging += bk_te_IncGeneralInf.HandleCascadeDelete;
            }
    
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && ReferenceEquals(previousValue.bk_te_Cotizacion, this))
            {
                previousValue.bk_te_Cotizacion = null;
            }
    
            if (bk_te_IncGeneralInf != null)
            {
                bk_te_IncGeneralInf.bk_te_Cotizacion = this;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("bk_te_IncGeneralInf")
                    && (ChangeTracker.OriginalValues["bk_te_IncGeneralInf"] == bk_te_IncGeneralInf))
                {
                    ChangeTracker.OriginalValues.Remove("bk_te_IncGeneralInf");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("bk_te_IncGeneralInf", previousValue);
                    // This is the principal end of an identifying association, so the dependent must be deleted when the relationship is removed.
                    // If the current state of the dependent is Added, the relationship can be changed without causing the dependent to be deleted.
                    if (previousValue != null && previousValue.ChangeTracker.State != ObjectState.Added)
                    {
                        previousValue.MarkAsDeleted();
                    }
                }
                if (bk_te_IncGeneralInf != null && !bk_te_IncGeneralInf.ChangeTracker.ChangeTrackingEnabled)
                {
                    bk_te_IncGeneralInf.StartTracking();
                }
            }
        }
    
        private void Fixupbk_te_LazCasualty(LazCasualty previousValue)
        {
            // This is the principal end in an association that performs cascade deletes.
            // Update the event listener to refer to the new dependent.
            if (previousValue != null)
            {
                ChangeTracker.ObjectStateChanging -= previousValue.HandleCascadeDelete;
            }
    
            if (bk_te_LazCasualty != null)
            {
                ChangeTracker.ObjectStateChanging += bk_te_LazCasualty.HandleCascadeDelete;
            }
    
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && ReferenceEquals(previousValue.bk_te_Cotizacion, this))
            {
                previousValue.bk_te_Cotizacion = null;
            }
    
            if (bk_te_LazCasualty != null)
            {
                bk_te_LazCasualty.bk_te_Cotizacion = this;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("bk_te_LazCasualty")
                    && (ChangeTracker.OriginalValues["bk_te_LazCasualty"] == bk_te_LazCasualty))
                {
                    ChangeTracker.OriginalValues.Remove("bk_te_LazCasualty");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("bk_te_LazCasualty", previousValue);
                    // This is the principal end of an identifying association, so the dependent must be deleted when the relationship is removed.
                    // If the current state of the dependent is Added, the relationship can be changed without causing the dependent to be deleted.
                    if (previousValue != null && previousValue.ChangeTracker.State != ObjectState.Added)
                    {
                        previousValue.MarkAsDeleted();
                    }
                }
                if (bk_te_LazCasualty != null && !bk_te_LazCasualty.ChangeTracker.ChangeTrackingEnabled)
                {
                    bk_te_LazCasualty.StartTracking();
                }
            }
        }
    
        private void Fixupbk_te_CotizacionPagador(CotizacionPagador previousValue)
        {
            // This is the principal end in an association that performs cascade deletes.
            // Update the event listener to refer to the new dependent.
            if (previousValue != null)
            {
                ChangeTracker.ObjectStateChanging -= previousValue.HandleCascadeDelete;
            }
    
            if (bk_te_CotizacionPagador != null)
            {
                ChangeTracker.ObjectStateChanging += bk_te_CotizacionPagador.HandleCascadeDelete;
            }
    
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && ReferenceEquals(previousValue.bk_te_Cotizacion, this))
            {
                previousValue.bk_te_Cotizacion = null;
            }
    
            if (bk_te_CotizacionPagador != null)
            {
                bk_te_CotizacionPagador.bk_te_Cotizacion = this;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("bk_te_CotizacionPagador")
                    && (ChangeTracker.OriginalValues["bk_te_CotizacionPagador"] == bk_te_CotizacionPagador))
                {
                    ChangeTracker.OriginalValues.Remove("bk_te_CotizacionPagador");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("bk_te_CotizacionPagador", previousValue);
                    // This is the principal end of an identifying association, so the dependent must be deleted when the relationship is removed.
                    // If the current state of the dependent is Added, the relationship can be changed without causing the dependent to be deleted.
                    if (previousValue != null && previousValue.ChangeTracker.State != ObjectState.Added)
                    {
                        previousValue.MarkAsDeleted();
                    }
                }
                if (bk_te_CotizacionPagador != null && !bk_te_CotizacionPagador.ChangeTracker.ChangeTrackingEnabled)
                {
                    bk_te_CotizacionPagador.StartTracking();
                }
            }
        }
    
        private void Fixupbk_te_CotizacionRCProductoExt(CotizacionRCProductoExt previousValue)
        {
            // This is the principal end in an association that performs cascade deletes.
            // Update the event listener to refer to the new dependent.
            if (previousValue != null)
            {
                ChangeTracker.ObjectStateChanging -= previousValue.HandleCascadeDelete;
            }
    
            if (bk_te_CotizacionRCProductoExt != null)
            {
                ChangeTracker.ObjectStateChanging += bk_te_CotizacionRCProductoExt.HandleCascadeDelete;
            }
    
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && ReferenceEquals(previousValue.bk_te_Cotizacion, this))
            {
                previousValue.bk_te_Cotizacion = null;
            }
    
            if (bk_te_CotizacionRCProductoExt != null)
            {
                bk_te_CotizacionRCProductoExt.bk_te_Cotizacion = this;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("bk_te_CotizacionRCProductoExt")
                    && (ChangeTracker.OriginalValues["bk_te_CotizacionRCProductoExt"] == bk_te_CotizacionRCProductoExt))
                {
                    ChangeTracker.OriginalValues.Remove("bk_te_CotizacionRCProductoExt");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("bk_te_CotizacionRCProductoExt", previousValue);
                    // This is the principal end of an identifying association, so the dependent must be deleted when the relationship is removed.
                    // If the current state of the dependent is Added, the relationship can be changed without causing the dependent to be deleted.
                    if (previousValue != null && previousValue.ChangeTracker.State != ObjectState.Added)
                    {
                        previousValue.MarkAsDeleted();
                    }
                }
                if (bk_te_CotizacionRCProductoExt != null && !bk_te_CotizacionRCProductoExt.ChangeTracker.ChangeTrackingEnabled)
                {
                    bk_te_CotizacionRCProductoExt.StartTracking();
                }
            }
        }
    
        private void Fixupbk_te_CotizacionRCHoteleria(CotizacionRCHoteleria previousValue)
        {
            // This is the principal end in an association that performs cascade deletes.
            // Update the event listener to refer to the new dependent.
            if (previousValue != null)
            {
                ChangeTracker.ObjectStateChanging -= previousValue.HandleCascadeDelete;
            }
    
            if (bk_te_CotizacionRCHoteleria != null)
            {
                ChangeTracker.ObjectStateChanging += bk_te_CotizacionRCHoteleria.HandleCascadeDelete;
            }
    
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && ReferenceEquals(previousValue.bk_te_Cotizacion, this))
            {
                previousValue.bk_te_Cotizacion = null;
            }
    
            if (bk_te_CotizacionRCHoteleria != null)
            {
                bk_te_CotizacionRCHoteleria.bk_te_Cotizacion = this;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("bk_te_CotizacionRCHoteleria")
                    && (ChangeTracker.OriginalValues["bk_te_CotizacionRCHoteleria"] == bk_te_CotizacionRCHoteleria))
                {
                    ChangeTracker.OriginalValues.Remove("bk_te_CotizacionRCHoteleria");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("bk_te_CotizacionRCHoteleria", previousValue);
                    // This is the principal end of an identifying association, so the dependent must be deleted when the relationship is removed.
                    // If the current state of the dependent is Added, the relationship can be changed without causing the dependent to be deleted.
                    if (previousValue != null && previousValue.ChangeTracker.State != ObjectState.Added)
                    {
                        previousValue.MarkAsDeleted();
                    }
                }
                if (bk_te_CotizacionRCHoteleria != null && !bk_te_CotizacionRCHoteleria.ChangeTracker.ChangeTrackingEnabled)
                {
                    bk_te_CotizacionRCHoteleria.StartTracking();
                }
            }
        }
    
        private void Fixupbk_te_CotizacionRCVehiculoExc(CotizacionRCVehiculoExc previousValue)
        {
            // This is the principal end in an association that performs cascade deletes.
            // Update the event listener to refer to the new dependent.
            if (previousValue != null)
            {
                ChangeTracker.ObjectStateChanging -= previousValue.HandleCascadeDelete;
            }
    
            if (bk_te_CotizacionRCVehiculoExc != null)
            {
                ChangeTracker.ObjectStateChanging += bk_te_CotizacionRCVehiculoExc.HandleCascadeDelete;
            }
    
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && ReferenceEquals(previousValue.bk_te_Cotizacion, this))
            {
                previousValue.bk_te_Cotizacion = null;
            }
    
            if (bk_te_CotizacionRCVehiculoExc != null)
            {
                bk_te_CotizacionRCVehiculoExc.bk_te_Cotizacion = this;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("bk_te_CotizacionRCVehiculoExc")
                    && (ChangeTracker.OriginalValues["bk_te_CotizacionRCVehiculoExc"] == bk_te_CotizacionRCVehiculoExc))
                {
                    ChangeTracker.OriginalValues.Remove("bk_te_CotizacionRCVehiculoExc");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("bk_te_CotizacionRCVehiculoExc", previousValue);
                    // This is the principal end of an identifying association, so the dependent must be deleted when the relationship is removed.
                    // If the current state of the dependent is Added, the relationship can be changed without causing the dependent to be deleted.
                    if (previousValue != null && previousValue.ChangeTracker.State != ObjectState.Added)
                    {
                        previousValue.MarkAsDeleted();
                    }
                }
                if (bk_te_CotizacionRCVehiculoExc != null && !bk_te_CotizacionRCVehiculoExc.ChangeTracker.ChangeTrackingEnabled)
                {
                    bk_te_CotizacionRCVehiculoExc.StartTracking();
                }
            }
        }
    
        private void Fixupbk_te_CotizacionRCConstruccion(CotizacionRCConstruccion previousValue)
        {
            // This is the principal end in an association that performs cascade deletes.
            // Update the event listener to refer to the new dependent.
            if (previousValue != null)
            {
                ChangeTracker.ObjectStateChanging -= previousValue.HandleCascadeDelete;
            }
    
            if (bk_te_CotizacionRCConstruccion != null)
            {
                ChangeTracker.ObjectStateChanging += bk_te_CotizacionRCConstruccion.HandleCascadeDelete;
            }
    
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && ReferenceEquals(previousValue.bk_te_Cotizacion, this))
            {
                previousValue.bk_te_Cotizacion = null;
            }
    
            if (bk_te_CotizacionRCConstruccion != null)
            {
                bk_te_CotizacionRCConstruccion.bk_te_Cotizacion = this;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("bk_te_CotizacionRCConstruccion")
                    && (ChangeTracker.OriginalValues["bk_te_CotizacionRCConstruccion"] == bk_te_CotizacionRCConstruccion))
                {
                    ChangeTracker.OriginalValues.Remove("bk_te_CotizacionRCConstruccion");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("bk_te_CotizacionRCConstruccion", previousValue);
                    // This is the principal end of an identifying association, so the dependent must be deleted when the relationship is removed.
                    // If the current state of the dependent is Added, the relationship can be changed without causing the dependent to be deleted.
                    if (previousValue != null && previousValue.ChangeTracker.State != ObjectState.Added)
                    {
                        previousValue.MarkAsDeleted();
                    }
                }
                if (bk_te_CotizacionRCConstruccion != null && !bk_te_CotizacionRCConstruccion.ChangeTracker.ChangeTrackingEnabled)
                {
                    bk_te_CotizacionRCConstruccion.StartTracking();
                }
            }
        }
    
        private void Fixupbk_te_CotizacionRCActInm(CotizacionRCActInm previousValue)
        {
            // This is the principal end in an association that performs cascade deletes.
            // Update the event listener to refer to the new dependent.
            if (previousValue != null)
            {
                ChangeTracker.ObjectStateChanging -= previousValue.HandleCascadeDelete;
            }
    
            if (bk_te_CotizacionRCActInm != null)
            {
                ChangeTracker.ObjectStateChanging += bk_te_CotizacionRCActInm.HandleCascadeDelete;
            }
    
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && ReferenceEquals(previousValue.bk_te_Cotizacion, this))
            {
                previousValue.bk_te_Cotizacion = null;
            }
    
            if (bk_te_CotizacionRCActInm != null)
            {
                bk_te_CotizacionRCActInm.bk_te_Cotizacion = this;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("bk_te_CotizacionRCActInm")
                    && (ChangeTracker.OriginalValues["bk_te_CotizacionRCActInm"] == bk_te_CotizacionRCActInm))
                {
                    ChangeTracker.OriginalValues.Remove("bk_te_CotizacionRCActInm");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("bk_te_CotizacionRCActInm", previousValue);
                    // This is the principal end of an identifying association, so the dependent must be deleted when the relationship is removed.
                    // If the current state of the dependent is Added, the relationship can be changed without causing the dependent to be deleted.
                    if (previousValue != null && previousValue.ChangeTracker.State != ObjectState.Added)
                    {
                        previousValue.MarkAsDeleted();
                    }
                }
                if (bk_te_CotizacionRCActInm != null && !bk_te_CotizacionRCActInm.ChangeTracker.ChangeTrackingEnabled)
                {
                    bk_te_CotizacionRCActInm.StartTracking();
                }
            }
        }
    
        private void Fixupbk_te_CotizacionTrans(CotizacionTrans previousValue)
        {
            // This is the principal end in an association that performs cascade deletes.
            // Update the event listener to refer to the new dependent.
            if (previousValue != null)
            {
                ChangeTracker.ObjectStateChanging -= previousValue.HandleCascadeDelete;
            }
    
            if (bk_te_CotizacionTrans != null)
            {
                ChangeTracker.ObjectStateChanging += bk_te_CotizacionTrans.HandleCascadeDelete;
            }
    
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && ReferenceEquals(previousValue.bk_te_Cotizacion, this))
            {
                previousValue.bk_te_Cotizacion = null;
            }
    
            if (bk_te_CotizacionTrans != null)
            {
                bk_te_CotizacionTrans.bk_te_Cotizacion = this;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("bk_te_CotizacionTrans")
                    && (ChangeTracker.OriginalValues["bk_te_CotizacionTrans"] == bk_te_CotizacionTrans))
                {
                    ChangeTracker.OriginalValues.Remove("bk_te_CotizacionTrans");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("bk_te_CotizacionTrans", previousValue);
                    // This is the principal end of an identifying association, so the dependent must be deleted when the relationship is removed.
                    // If the current state of the dependent is Added, the relationship can be changed without causing the dependent to be deleted.
                    if (previousValue != null && previousValue.ChangeTracker.State != ObjectState.Added)
                    {
                        previousValue.MarkAsDeleted();
                    }
                }
                if (bk_te_CotizacionTrans != null && !bk_te_CotizacionTrans.ChangeTracker.ChangeTrackingEnabled)
                {
                    bk_te_CotizacionTrans.StartTracking();
                }
            }
        }
    
        private void Fixupbk_te_CotizacionRCAdicional(CotizacionRCAdicional previousValue)
        {
            // This is the principal end in an association that performs cascade deletes.
            // Update the event listener to refer to the new dependent.
            if (previousValue != null)
            {
                ChangeTracker.ObjectStateChanging -= previousValue.HandleCascadeDelete;
            }
    
            if (bk_te_CotizacionRCAdicional != null)
            {
                ChangeTracker.ObjectStateChanging += bk_te_CotizacionRCAdicional.HandleCascadeDelete;
            }
    
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && ReferenceEquals(previousValue.bk_te_Cotizacion, this))
            {
                previousValue.bk_te_Cotizacion = null;
            }
    
            if (bk_te_CotizacionRCAdicional != null)
            {
                bk_te_CotizacionRCAdicional.bk_te_Cotizacion = this;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("bk_te_CotizacionRCAdicional")
                    && (ChangeTracker.OriginalValues["bk_te_CotizacionRCAdicional"] == bk_te_CotizacionRCAdicional))
                {
                    ChangeTracker.OriginalValues.Remove("bk_te_CotizacionRCAdicional");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("bk_te_CotizacionRCAdicional", previousValue);
                    // This is the principal end of an identifying association, so the dependent must be deleted when the relationship is removed.
                    // If the current state of the dependent is Added, the relationship can be changed without causing the dependent to be deleted.
                    if (previousValue != null && previousValue.ChangeTracker.State != ObjectState.Added)
                    {
                        previousValue.MarkAsDeleted();
                    }
                }
                if (bk_te_CotizacionRCAdicional != null && !bk_te_CotizacionRCAdicional.ChangeTracker.ChangeTrackingEnabled)
                {
                    bk_te_CotizacionRCAdicional.StartTracking();
                }
            }
        }
    
        private void Fixupbk_te_CotizacionUbicacion(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CotizacionUbicacion item in e.NewItems)
                {
                    item.bk_te_Cotizacion = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("bk_te_CotizacionUbicacion", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CotizacionUbicacion item in e.OldItems)
                {
                    if (ReferenceEquals(item.bk_te_Cotizacion, this))
                    {
                        item.bk_te_Cotizacion = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("bk_te_CotizacionUbicacion", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void Fixupbk_te_CotizacionRCProductoExtPais(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CotizacionRCProductoExtPais item in e.NewItems)
                {
                    item.bk_te_Cotizacion = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("bk_te_CotizacionRCProductoExtPais", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CotizacionRCProductoExtPais item in e.OldItems)
                {
                    if (ReferenceEquals(item.bk_te_Cotizacion, this))
                    {
                        item.bk_te_Cotizacion = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("bk_te_CotizacionRCProductoExtPais", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void Fixupbk_te_CotizacionLog(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CotizacionLog item in e.NewItems)
                {
                    item.bk_te_Cotizacion = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("bk_te_CotizacionLog", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CotizacionLog item in e.OldItems)
                {
                    if (ReferenceEquals(item.bk_te_Cotizacion, this))
                    {
                        item.bk_te_Cotizacion = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("bk_te_CotizacionLog", item);
                    }
                }
            }
        }
    
        private void Fixupbk_te_IncASAreaFuego(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (IncASAreaFuego item in e.NewItems)
                {
                    item.bk_te_Cotizacion = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("bk_te_IncASAreaFuego", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (IncASAreaFuego item in e.OldItems)
                {
                    if (ReferenceEquals(item.bk_te_Cotizacion, this))
                    {
                        item.bk_te_Cotizacion = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("bk_te_IncASAreaFuego", item);
                    }
                }
            }
        }
    
        private void Fixupbk_te_IncCOPE(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (IncCOPE item in e.NewItems)
                {
                    item.bk_te_Cotizacion = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("bk_te_IncCOPE", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (IncCOPE item in e.OldItems)
                {
                    if (ReferenceEquals(item.bk_te_Cotizacion, this))
                    {
                        item.bk_te_Cotizacion = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("bk_te_IncCOPE", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void Fixupbk_tr_CotizacionTipoCobertura(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CotizacionTipoCobertura item in e.NewItems)
                {
                    item.bk_te_Cotizacion = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("bk_tr_CotizacionTipoCobertura", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CotizacionTipoCobertura item in e.OldItems)
                {
                    if (ReferenceEquals(item.bk_te_Cotizacion, this))
                    {
                        item.bk_te_Cotizacion = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("bk_tr_CotizacionTipoCobertura", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void Fixupbk_tr_CotizacionCoberturaUbi(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CotizacionCoberturaUbi item in e.NewItems)
                {
                    item.bk_te_Cotizacion = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("bk_tr_CotizacionCoberturaUbi", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CotizacionCoberturaUbi item in e.OldItems)
                {
                    if (ReferenceEquals(item.bk_te_Cotizacion, this))
                    {
                        item.bk_te_Cotizacion = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("bk_tr_CotizacionCoberturaUbi", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void Fixupbk_tr_CotizacionSubLineaUbi(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CotizacionSubLineaUbi item in e.NewItems)
                {
                    item.bk_te_Cotizacion = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("bk_tr_CotizacionSubLineaUbi", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CotizacionSubLineaUbi item in e.OldItems)
                {
                    if (ReferenceEquals(item.bk_te_Cotizacion, this))
                    {
                        item.bk_te_Cotizacion = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("bk_tr_CotizacionSubLineaUbi", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void Fixupbk_tr_CotizacionSubLineaNegocio(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CotizacionSubLineaNegocio item in e.NewItems)
                {
                    item.bk_te_Cotizacion = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("bk_tr_CotizacionSubLineaNegocio", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CotizacionSubLineaNegocio item in e.OldItems)
                {
                    if (ReferenceEquals(item.bk_te_Cotizacion, this))
                    {
                        item.bk_te_Cotizacion = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("bk_tr_CotizacionSubLineaNegocio", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void Fixupbk_te_CotizacionDeducible(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CotizacionDeducible item in e.NewItems)
                {
                    item.bk_te_Cotizacion = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("bk_te_CotizacionDeducible", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CotizacionDeducible item in e.OldItems)
                {
                    if (ReferenceEquals(item.bk_te_Cotizacion, this))
                    {
                        item.bk_te_Cotizacion = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("bk_te_CotizacionDeducible", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void Fixupbk_tw_EqContratistaEquipo(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (EqContratistaEquipo item in e.NewItems)
                {
                    item.bk_te_Cotizacion = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("bk_tw_EqContratistaEquipo", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (EqContratistaEquipo item in e.OldItems)
                {
                    if (ReferenceEquals(item.bk_te_Cotizacion, this))
                    {
                        item.bk_te_Cotizacion = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("bk_tw_EqContratistaEquipo", item);
                    }
                }
            }
        }
    
        private void Fixupbk_te_CotizacionTransConceptoEvaluacion(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CotizacionTransConceptoEvaluacion item in e.NewItems)
                {
                    item.bk_te_Cotizacion = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("bk_te_CotizacionTransConceptoEvaluacion", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CotizacionTransConceptoEvaluacion item in e.OldItems)
                {
                    if (ReferenceEquals(item.bk_te_Cotizacion, this))
                    {
                        item.bk_te_Cotizacion = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("bk_te_CotizacionTransConceptoEvaluacion", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void Fixupbk_te_CotizacionRCProductoExtResultado(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CotizacionRCProductoExtResultado item in e.NewItems)
                {
                    item.bk_te_Cotizacion = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("bk_te_CotizacionRCProductoExtResultado", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CotizacionRCProductoExtResultado item in e.OldItems)
                {
                    if (ReferenceEquals(item.bk_te_Cotizacion, this))
                    {
                        item.bk_te_Cotizacion = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("bk_te_CotizacionRCProductoExtResultado", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }

        #endregion

    }
}
