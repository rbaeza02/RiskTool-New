//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

#pragma warning disable 1591 // this is for supress no xml comments in public members warnings 

using Domain.Core.Entities;

namespace Domain.MainModule.Entities
{
    [System.CodeDom.Compiler.GeneratedCode("STE-EF",".NET 4.0")]
    #if !SILVERLIGHT
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
    #endif
    public partial class SelectRiskReportAS_Result : INotifyComplexPropertyChanging, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public Nullable<double> Participacion
        {
            get { return _participacion; }
            set
            {
                if (_participacion != value)
                {
                    OnComplexPropertyChanging();
                    _participacion = value;
                    OnPropertyChanged("Participacion");
                }
            }
        }
        private Nullable<double> _participacion;
    
        [DataMember]
        public string Reinsurance
        {
            get { return _reinsurance; }
            set
            {
                if (_reinsurance != value)
                {
                    OnComplexPropertyChanging();
                    _reinsurance = value;
                    OnPropertyChanged("Reinsurance");
                }
            }
        }
        private string _reinsurance;
    
        [DataMember]
        public string Carrier
        {
            get { return _carrier; }
            set
            {
                if (_carrier != value)
                {
                    OnComplexPropertyChanging();
                    _carrier = value;
                    OnPropertyChanged("Carrier");
                }
            }
        }
        private string _carrier;
    
        [DataMember]
        public Nullable<double> CostNetGross
        {
            get { return _costNetGross; }
            set
            {
                if (_costNetGross != value)
                {
                    OnComplexPropertyChanging();
                    _costNetGross = value;
                    OnPropertyChanged("CostNetGross");
                }
            }
        }
        private Nullable<double> _costNetGross;
    
        [DataMember]
        public string Terms
        {
            get { return _terms; }
            set
            {
                if (_terms != value)
                {
                    OnComplexPropertyChanging();
                    _terms = value;
                    OnPropertyChanged("Terms");
                }
            }
        }
        private string _terms;
    
        [DataMember]
        public string Explanation
        {
            get { return _explanation; }
            set
            {
                if (_explanation != value)
                {
                    OnComplexPropertyChanging();
                    _explanation = value;
                    OnPropertyChanged("Explanation");
                }
            }
        }
        private string _explanation;
    
        [DataMember]
        public string LossControlReport
        {
            get { return _lossControlReport; }
            set
            {
                if (_lossControlReport != value)
                {
                    OnComplexPropertyChanging();
                    _lossControlReport = value;
                    OnPropertyChanged("LossControlReport");
                }
            }
        }
        private string _lossControlReport;
    
        [DataMember]
        public string LossControlService
        {
            get { return _lossControlService; }
            set
            {
                if (_lossControlService != value)
                {
                    OnComplexPropertyChanging();
                    _lossControlService = value;
                    OnPropertyChanged("LossControlService");
                }
            }
        }
        private string _lossControlService;
    
        [DataMember]
        public string Recommendations
        {
            get { return _recommendations; }
            set
            {
                if (_recommendations != value)
                {
                    OnComplexPropertyChanging();
                    _recommendations = value;
                    OnPropertyChanged("Recommendations");
                }
            }
        }
        private string _recommendations;

        #endregion

        #region ChangeTracking
    
        private void OnComplexPropertyChanging()
        {
            if (_complexPropertyChanging != null)
            {
                _complexPropertyChanging(this, new EventArgs());
            }
        }
    
        event EventHandler INotifyComplexPropertyChanging.ComplexPropertyChanging { add { _complexPropertyChanging += value; } remove { _complexPropertyChanging -= value; } }
        private event EventHandler _complexPropertyChanging;
    
        private void OnPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged { add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
    
        public static void RecordComplexOriginalValues(String parentPropertyName, SelectRiskReportAS_Result complexObject, ObjectChangeTracker changeTracker)
        {
            if (String.IsNullOrEmpty(parentPropertyName))
            {
                throw new ArgumentException("String parameter cannot be null or empty.", "parentPropertyName");
            }
    
            if (changeTracker == null)
            {
                throw new ArgumentNullException("changeTracker");
            }
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.Participacion", parentPropertyName), complexObject == null ? null : (object)complexObject.Participacion);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.Reinsurance", parentPropertyName), complexObject == null ? null : (object)complexObject.Reinsurance);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.Carrier", parentPropertyName), complexObject == null ? null : (object)complexObject.Carrier);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.CostNetGross", parentPropertyName), complexObject == null ? null : (object)complexObject.CostNetGross);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.Terms", parentPropertyName), complexObject == null ? null : (object)complexObject.Terms);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.Explanation", parentPropertyName), complexObject == null ? null : (object)complexObject.Explanation);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.LossControlReport", parentPropertyName), complexObject == null ? null : (object)complexObject.LossControlReport);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.LossControlService", parentPropertyName), complexObject == null ? null : (object)complexObject.LossControlService);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.Recommendations", parentPropertyName), complexObject == null ? null : (object)complexObject.Recommendations);
        }

        #endregion

    }
}
