//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

#pragma warning disable 1591 // this is for supress no xml comments in public members warnings 

using Domain.Core.Entities;

namespace Domain.MainModule.Entities
{
    [System.CodeDom.Compiler.GeneratedCode("STE-EF",".NET 4.0")]
    #if !SILVERLIGHT
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
    #endif
    public partial class SelectBeneficiario_Result : INotifyComplexPropertyChanging, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int TipoBeneficiarioID
        {
            get { return _tipoBeneficiarioID; }
            set
            {
                if (_tipoBeneficiarioID != value)
                {
                    OnComplexPropertyChanging();
                    _tipoBeneficiarioID = value;
                    OnPropertyChanged("TipoBeneficiarioID");
                }
            }
        }
        private int _tipoBeneficiarioID;
    
        [DataMember]
        public string RFC
        {
            get { return _rFC; }
            set
            {
                if (_rFC != value)
                {
                    OnComplexPropertyChanging();
                    _rFC = value;
                    OnPropertyChanged("RFC");
                }
            }
        }
        private string _rFC;
    
        [DataMember]
        public string Nombre
        {
            get { return _nombre; }
            set
            {
                if (_nombre != value)
                {
                    OnComplexPropertyChanging();
                    _nombre = value;
                    OnPropertyChanged("Nombre");
                }
            }
        }
        private string _nombre;
    
        [DataMember]
        public int PersonaID
        {
            get { return _personaID; }
            set
            {
                if (_personaID != value)
                {
                    OnComplexPropertyChanging();
                    _personaID = value;
                    OnPropertyChanged("PersonaID");
                }
            }
        }
        private int _personaID;

        #endregion

        #region ChangeTracking
    
        private void OnComplexPropertyChanging()
        {
            if (_complexPropertyChanging != null)
            {
                _complexPropertyChanging(this, new EventArgs());
            }
        }
    
        event EventHandler INotifyComplexPropertyChanging.ComplexPropertyChanging { add { _complexPropertyChanging += value; } remove { _complexPropertyChanging -= value; } }
        private event EventHandler _complexPropertyChanging;
    
        private void OnPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged { add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
    
        public static void RecordComplexOriginalValues(String parentPropertyName, SelectBeneficiario_Result complexObject, ObjectChangeTracker changeTracker)
        {
            if (String.IsNullOrEmpty(parentPropertyName))
            {
                throw new ArgumentException("String parameter cannot be null or empty.", "parentPropertyName");
            }
    
            if (changeTracker == null)
            {
                throw new ArgumentNullException("changeTracker");
            }
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.TipoBeneficiarioID", parentPropertyName), complexObject == null ? null : (object)complexObject.TipoBeneficiarioID);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.RFC", parentPropertyName), complexObject == null ? null : (object)complexObject.RFC);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.Nombre", parentPropertyName), complexObject == null ? null : (object)complexObject.Nombre);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.PersonaID", parentPropertyName), complexObject == null ? null : (object)complexObject.PersonaID);
        }

        #endregion

    }
}
