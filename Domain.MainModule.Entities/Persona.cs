//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

#pragma warning disable 1591 // this is for supress no xml comments in public members warnings 

using Domain.Core.Entities;

namespace Domain.MainModule.Entities
{
    [DataContract(IsReference = true)]
    [System.CodeDom.Compiler.GeneratedCode("STE-EF",".NET 4.0")]
    #if !SILVERLIGHT
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
    #endif
    public partial class Persona: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int PersonaID
        {
            get { return _personaID; }
            set
            {
                if (_personaID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'PersonaID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _personaID = value;
                    OnPropertyChanged("PersonaID");
                }
            }
        }
        private int _personaID;
    
        [DataMember]
        public string RFC
        {
            get { return _rFC; }
            set
            {
                if (_rFC != value)
                {
                    _rFC = value;
                    OnPropertyChanged("RFC");
                }
            }
        }
        private string _rFC;
    
        [DataMember]
        public string Nombres
        {
            get { return _nombres; }
            set
            {
                if (_nombres != value)
                {
                    _nombres = value;
                    OnPropertyChanged("Nombres");
                }
            }
        }
        private string _nombres;
    
        [DataMember]
        public string Apellido1
        {
            get { return _apellido1; }
            set
            {
                if (_apellido1 != value)
                {
                    _apellido1 = value;
                    OnPropertyChanged("Apellido1");
                }
            }
        }
        private string _apellido1;
    
        [DataMember]
        public string Apellido2
        {
            get { return _apellido2; }
            set
            {
                if (_apellido2 != value)
                {
                    _apellido2 = value;
                    OnPropertyChanged("Apellido2");
                }
            }
        }
        private string _apellido2;
    
        [DataMember]
        public string RazonSocial
        {
            get { return _razonSocial; }
            set
            {
                if (_razonSocial != value)
                {
                    _razonSocial = value;
                    OnPropertyChanged("RazonSocial");
                }
            }
        }
        private string _razonSocial;
    
        [DataMember]
        public Nullable<int> SISEcod_Aseg
        {
            get { return _sISEcod_Aseg; }
            set
            {
                if (_sISEcod_Aseg != value)
                {
                    _sISEcod_Aseg = value;
                    OnPropertyChanged("SISEcod_Aseg");
                }
            }
        }
        private Nullable<int> _sISEcod_Aseg;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion

    }
}
